### YamlMime:UniversalReference
items:
  - uid: durable-functions.DurableEntityContext
    name: DurableEntityContext
    fullName: DurableEntityContext
    children:
      - durable-functions.DurableEntityContext.destructOnExit
      - durable-functions.DurableEntityContext.entityId
      - durable-functions.DurableEntityContext.entityKey
      - durable-functions.DurableEntityContext.entityName
      - durable-functions.DurableEntityContext.getInput
      - durable-functions.DurableEntityContext.getState
      - durable-functions.DurableEntityContext.isNewlyConstructed
      - durable-functions.DurableEntityContext.operationName
      - durable-functions.DurableEntityContext.return
      - durable-functions.DurableEntityContext.setState
      - durable-functions.DurableEntityContext.signalEntity
    langs:
      - typeScript
    type: class
    summary: ''
    package: durable-functions
  - uid: durable-functions.DurableEntityContext.destructOnExit
    name: destructOnExit()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function destructOnExit()
      parameters: []
    package: durable-functions
  - uid: durable-functions.DurableEntityContext.entityId
    name: entityId
    fullName: entityId
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'entityId: EntityId'
      return:
        type:
          - durable-functions.EntityId
        description: ''
    package: durable-functions
  - uid: durable-functions.DurableEntityContext.entityKey
    name: entityKey
    fullName: entityKey
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'entityKey: string'
      return:
        type:
          - string
        description: ''
    package: durable-functions
  - uid: durable-functions.DurableEntityContext.entityName
    name: entityName
    fullName: entityName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'entityName: string'
      return:
        type:
          - string
        description: ''
    package: durable-functions
  - uid: durable-functions.DurableEntityContext.getInput
    name: getInput()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getInput()
      parameters: []
      return:
        type:
          - unknown | undefined
        description: ''
    package: durable-functions
  - uid: durable-functions.DurableEntityContext.getState
    name: getState(() => unknown)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getState(initializer?: () => unknown)'
      parameters:
        - id: initializer
          type:
            - () => unknown
          description: ''
          optional: true
      return:
        type:
          - unknown | undefined
        description: ''
    package: durable-functions
  - uid: durable-functions.DurableEntityContext.isNewlyConstructed
    name: isNewlyConstructed
    fullName: isNewlyConstructed
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'isNewlyConstructed: boolean'
      return:
        type:
          - boolean
        description: ''
    package: durable-functions
  - uid: durable-functions.DurableEntityContext.operationName
    name: operationName
    fullName: operationName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'operationName: string | undefined'
      return:
        type:
          - string | undefined
        description: ''
    package: durable-functions
  - uid: durable-functions.DurableEntityContext.return
    name: return(unknown)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function return(result: unknown)'
      parameters:
        - id: result
          type:
            - unknown
          description: ''
    package: durable-functions
  - uid: durable-functions.DurableEntityContext.setState
    name: setState(unknown)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setState(state: unknown)'
      parameters:
        - id: state
          type:
            - unknown
          description: ''
    package: durable-functions
  - uid: durable-functions.DurableEntityContext.signalEntity
    name: 'signalEntity(EntityId, string, unknown)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function signalEntity(entity: EntityId, operationName: string,
        operationInput?: unknown)
      parameters:
        - id: entity
          type:
            - durable-functions.EntityId
          description: ''
        - id: operationName
          type:
            - string
          description: ''
        - id: operationInput
          type:
            - unknown
          description: ''
          optional: true
    package: durable-functions
references:
  - uid: durable-functions.EntityId
    name: EntityId
    spec.typeScript:
      - name: EntityId
        fullName: EntityId
        uid: durable-functions.EntityId
