### YamlMime:UniversalReference
items:
  - uid: durable-functions.DurableOrchestrationClient
    name: DurableOrchestrationClient
    fullName: DurableOrchestrationClient
    children:
      - durable-functions.DurableOrchestrationClient.createCheckStatusResponse
      - durable-functions.DurableOrchestrationClient.createHttpManagementPayload
      - durable-functions.DurableOrchestrationClient.constructor
      - durable-functions.DurableOrchestrationClient.getStatus
      - durable-functions.DurableOrchestrationClient.getStatusAll
      - durable-functions.DurableOrchestrationClient.getStatusBy
      - durable-functions.DurableOrchestrationClient.purgeInstanceHistory
      - durable-functions.DurableOrchestrationClient.purgeInstanceHistoryBy
      - durable-functions.DurableOrchestrationClient.raiseEvent
      - durable-functions.DurableOrchestrationClient.readEntityState
      - durable-functions.DurableOrchestrationClient.rewind
      - durable-functions.DurableOrchestrationClient.signalEntity
      - durable-functions.DurableOrchestrationClient.startNew
      - durable-functions.DurableOrchestrationClient.taskHubName
      - durable-functions.DurableOrchestrationClient.terminate
      - durable-functions.DurableOrchestrationClient.uniqueWebhookOrigins
      - >-
        durable-functions.DurableOrchestrationClient.waitForCompletionOrCreateCheckStatusResponse
    langs:
      - typeScript
    type: class
    summary: ''
    package: durable-functions
  - uid: durable-functions.DurableOrchestrationClient.createCheckStatusResponse
    name: 'createCheckStatusResponse(IHttpRequest | HttpRequest | undefined, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createCheckStatusResponse(request: IHttpRequest | HttpRequest |
        undefined, instanceId: string)
      parameters:
        - id: request
          type:
            - durable-functions.IHttpRequest | HttpRequest | undefined
          description: ''
        - id: instanceId
          type:
            - string
          description: ''
      return:
        type:
          - durable-functions.IHttpResponse
        description: ''
    package: durable-functions
  - uid: durable-functions.DurableOrchestrationClient.createHttpManagementPayload
    name: createHttpManagementPayload(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function createHttpManagementPayload(instanceId: string)'
      parameters:
        - id: instanceId
          type:
            - string
          description: ''
      return:
        type:
          - durable-functions.HttpManagementPayload
        description: ''
    package: durable-functions
  - uid: durable-functions.DurableOrchestrationClient.constructor
    name: DurableOrchestrationClient(OrchestrationClientInputData)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new DurableOrchestrationClient(clientData: OrchestrationClientInputData)'
      parameters:
        - id: clientData
          type:
            - durable-functions.OrchestrationClientInputData
          description: ''
    package: durable-functions
  - uid: durable-functions.DurableOrchestrationClient.getStatus
    name: 'getStatus(string, boolean, boolean, boolean)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getStatus(instanceId: string, showHistory?: boolean,
        showHistoryOutput?: boolean, showInput?: boolean)
      parameters:
        - id: instanceId
          type:
            - string
          description: ''
        - id: showHistory
          type:
            - boolean
          description: ''
          optional: true
        - id: showHistoryOutput
          type:
            - boolean
          description: ''
          optional: true
        - id: showInput
          type:
            - boolean
          description: ''
          optional: true
      return:
        type:
          - Promise<durable-functions.DurableOrchestrationStatus>
        description: ''
    package: durable-functions
  - uid: durable-functions.DurableOrchestrationClient.getStatusAll
    name: getStatusAll()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getStatusAll()
      parameters: []
      return:
        type:
          - 'Promise<durable-functions.DurableOrchestrationStatus[]>'
        description: ''
    package: durable-functions
  - uid: durable-functions.DurableOrchestrationClient.getStatusBy
    name: >-
      getStatusBy(Date | undefined, Date | undefined,
      OrchestrationRuntimeStatus[])
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getStatusBy(createdTimeFrom: Date | undefined, createdTimeTo:
        Date | undefined, runtimeStatus: OrchestrationRuntimeStatus[])
      parameters:
        - id: createdTimeFrom
          type:
            - Date | undefined
          description: ''
        - id: createdTimeTo
          type:
            - Date | undefined
          description: ''
        - id: runtimeStatus
          type:
            - 'durable-functions.OrchestrationRuntimeStatus[]'
          description: ''
      return:
        type:
          - 'Promise<durable-functions.DurableOrchestrationStatus[]>'
        description: ''
    package: durable-functions
  - uid: durable-functions.DurableOrchestrationClient.purgeInstanceHistory
    name: purgeInstanceHistory(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function purgeInstanceHistory(instanceId: string)'
      parameters:
        - id: instanceId
          type:
            - string
          description: ''
      return:
        type:
          - Promise<durable-functions.PurgeHistoryResult>
        description: ''
    package: durable-functions
  - uid: durable-functions.DurableOrchestrationClient.purgeInstanceHistoryBy
    name: 'purgeInstanceHistoryBy(Date, Date, OrchestrationRuntimeStatus[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function purgeInstanceHistoryBy(createdTimeFrom: Date, createdTimeTo?:
        Date, runtimeStatus?: OrchestrationRuntimeStatus[])
      parameters:
        - id: createdTimeFrom
          type:
            - Date
          description: ''
        - id: createdTimeTo
          type:
            - Date
          description: ''
          optional: true
        - id: runtimeStatus
          type:
            - 'durable-functions.OrchestrationRuntimeStatus[]'
          description: ''
          optional: true
      return:
        type:
          - Promise<durable-functions.PurgeHistoryResult>
        description: ''
    package: durable-functions
  - uid: durable-functions.DurableOrchestrationClient.raiseEvent
    name: 'raiseEvent(string, string, unknown, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function raiseEvent(instanceId: string, eventName: string, eventData:
        unknown, taskHubName?: string, connectionName?: string)
      parameters:
        - id: instanceId
          type:
            - string
          description: ''
        - id: eventName
          type:
            - string
          description: ''
        - id: eventData
          type:
            - unknown
          description: ''
        - id: taskHubName
          type:
            - string
          description: ''
          optional: true
        - id: connectionName
          type:
            - string
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
        description: ''
    package: durable-functions
  - uid: durable-functions.DurableOrchestrationClient.readEntityState
    name: 'readEntityState(EntityId, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function readEntityState<T>(entityId: EntityId, taskHubName?: string,
        connectionName?: string)
      parameters:
        - id: entityId
          type:
            - durable-functions.EntityId
          description: ''
        - id: taskHubName
          type:
            - string
          description: ''
          optional: true
        - id: connectionName
          type:
            - string
          description: ''
          optional: true
      return:
        type:
          - Promise<durable-functions.EntityStateResponse<T>>
        description: ''
    package: durable-functions
  - uid: durable-functions.DurableOrchestrationClient.rewind
    name: 'rewind(string, string, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function rewind(instanceId: string, reason: string, taskHubName?:
        string, connectionName?: string)
      parameters:
        - id: instanceId
          type:
            - string
          description: ''
        - id: reason
          type:
            - string
          description: ''
        - id: taskHubName
          type:
            - string
          description: ''
          optional: true
        - id: connectionName
          type:
            - string
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
        description: ''
    package: durable-functions
  - uid: durable-functions.DurableOrchestrationClient.signalEntity
    name: 'signalEntity(EntityId, string, unknown, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function signalEntity(entityId: EntityId, operationName?: string,
        operationContent?: unknown, taskHubName?: string, connectionName?:
        string)
      parameters:
        - id: entityId
          type:
            - durable-functions.EntityId
          description: ''
        - id: operationName
          type:
            - string
          description: ''
          optional: true
        - id: operationContent
          type:
            - unknown
          description: ''
          optional: true
        - id: taskHubName
          type:
            - string
          description: ''
          optional: true
        - id: connectionName
          type:
            - string
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
        description: ''
    package: durable-functions
  - uid: durable-functions.DurableOrchestrationClient.startNew
    name: 'startNew(string, string, unknown)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function startNew(orchestratorFunctionName: string, instanceId?: string,
        input?: unknown)
      parameters:
        - id: orchestratorFunctionName
          type:
            - string
          description: ''
        - id: instanceId
          type:
            - string
          description: ''
          optional: true
        - id: input
          type:
            - unknown
          description: ''
          optional: true
      return:
        type:
          - Promise<string>
        description: ''
    package: durable-functions
  - uid: durable-functions.DurableOrchestrationClient.taskHubName
    name: taskHubName
    fullName: taskHubName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'taskHubName: string'
      return:
        type:
          - string
        description: ''
    package: durable-functions
  - uid: durable-functions.DurableOrchestrationClient.terminate
    name: 'terminate(string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function terminate(instanceId: string, reason: string)'
      parameters:
        - id: instanceId
          type:
            - string
          description: ''
        - id: reason
          type:
            - string
          description: ''
      return:
        type:
          - Promise<void>
        description: ''
    package: durable-functions
  - uid: durable-functions.DurableOrchestrationClient.uniqueWebhookOrigins
    name: uniqueWebhookOrigins
    fullName: uniqueWebhookOrigins
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'uniqueWebhookOrigins: string[]'
      return:
        type:
          - 'string[]'
        description: ''
    package: durable-functions
  - uid: >-
      durable-functions.DurableOrchestrationClient.waitForCompletionOrCreateCheckStatusResponse
    name: >-
      waitForCompletionOrCreateCheckStatusResponse(HttpRequest, string, number,
      number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function waitForCompletionOrCreateCheckStatusResponse(request:
        HttpRequest, instanceId: string, timeoutInMilliseconds?: number,
        retryIntervalInMilliseconds?: number)
      parameters:
        - id: request
          type:
            - HttpRequest
          description: ''
        - id: instanceId
          type:
            - string
          description: ''
        - id: timeoutInMilliseconds
          type:
            - number
          description: ''
          optional: true
        - id: retryIntervalInMilliseconds
          type:
            - number
          description: ''
          optional: true
      return:
        type:
          - Promise<durable-functions.IHttpResponse>
        description: ''
    package: durable-functions
references:
  - uid: durable-functions.OrchestrationClientInputData
    name: OrchestrationClientInputData
    spec.typeScript:
      - name: OrchestrationClientInputData
        fullName: OrchestrationClientInputData
        uid: durable-functions.OrchestrationClientInputData
  - uid: durable-functions.IHttpRequest | HttpRequest | undefined
    name: IHttpRequest | HttpRequest | undefined
    spec.typeScript:
      - name: IHttpRequest
        fullName: IHttpRequest
        uid: durable-functions.IHttpRequest
      - name: ' | HttpRequest | undefined'
        fullName: ' | HttpRequest | undefined'
  - uid: durable-functions.IHttpResponse
    name: IHttpResponse
    spec.typeScript:
      - name: IHttpResponse
        fullName: IHttpResponse
        uid: durable-functions.IHttpResponse
  - uid: durable-functions.HttpManagementPayload
    name: HttpManagementPayload
    spec.typeScript:
      - name: HttpManagementPayload
        fullName: HttpManagementPayload
        uid: durable-functions.HttpManagementPayload
  - uid: Promise<durable-functions.DurableOrchestrationStatus>
    name: DurableOrchestrationStatus>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DurableOrchestrationStatus
        fullName: DurableOrchestrationStatus
        uid: durable-functions.DurableOrchestrationStatus
      - name: '>'
        fullName: '>'
  - uid: 'Promise<durable-functions.DurableOrchestrationStatus[]>'
    name: 'DurableOrchestrationStatus[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DurableOrchestrationStatus
        fullName: DurableOrchestrationStatus
        uid: durable-functions.DurableOrchestrationStatus
      - name: '[]>'
        fullName: '[]>'
  - uid: 'durable-functions.OrchestrationRuntimeStatus[]'
    name: 'OrchestrationRuntimeStatus[]'
    spec.typeScript:
      - name: OrchestrationRuntimeStatus
        fullName: OrchestrationRuntimeStatus
        uid: durable-functions.OrchestrationRuntimeStatus
      - name: '[]'
        fullName: '[]'
  - uid: Promise<durable-functions.PurgeHistoryResult>
    name: PurgeHistoryResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: PurgeHistoryResult
        fullName: PurgeHistoryResult
        uid: durable-functions.PurgeHistoryResult
      - name: '>'
        fullName: '>'
  - uid: durable-functions.EntityId
    name: EntityId
    spec.typeScript:
      - name: EntityId
        fullName: EntityId
        uid: durable-functions.EntityId
  - uid: Promise<durable-functions.EntityStateResponse<T>>
    name: EntityStateResponse<T>>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: EntityStateResponse
        fullName: EntityStateResponse
        uid: durable-functions.EntityStateResponse
      - name: <T>>
        fullName: <T>>
  - uid: Promise<durable-functions.IHttpResponse>
    name: IHttpResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: IHttpResponse
        fullName: IHttpResponse
        uid: durable-functions.IHttpResponse
      - name: '>'
        fullName: '>'
