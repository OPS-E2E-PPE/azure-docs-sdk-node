### YamlMime:TSType
name: CryptographyClient
uid: '@azure/keyvault-keys.CryptographyClient'
package: '@azure/keyvault-keys'
summary: A client used to perform cryptographic operations with Azure Key Vault keys.
fullName: CryptographyClient
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: >-
      CryptographyClient(string | KeyVaultKey, TokenCredential,
      CryptographyClientOptions)
    uid: '@azure/keyvault-keys.CryptographyClient.constructor'
    package: '@azure/keyvault-keys'
    summary: |-
      Constructs a new instance of the Cryptography client for the given key
      Example usage:
      ```ts
      import { KeyClient, CryptographyClient } from "@azure/keyvault-keys";
      import { DefaultAzureCredential } from "@azure/identity";

      let vaultUrl = `https://<MY KEYVAULT HERE>.vault.azure.net`;
      let credentials = new DefaultAzureCredential();

      let keyClient = new KeyClient(vaultUrl, credentials);
      let keyVaultKey = await keyClient.getKey("MyKey");

      let client = new CryptographyClient(keyVaultKey.id, credentials);
      // or
      let client = new CryptographyClient(keyVaultKey, credentials);
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new CryptographyClient(key: string | KeyVaultKey, credential:
        TokenCredential, pipelineOptions?: CryptographyClientOptions)
      parameters:
        - id: key
          type: string | <xref uid="@azure/keyvault-keys.KeyVaultKey" />
          description: >-
            The key to use during cryptography tasks. You can also pass the
            identifier of the key i.e its url here.
        - id: credential
          type: TokenCredential
          description: >-
            An object that implements the `TokenCredential` interface used to
            authenticate requests to the service. Use the @azure/identity
            package to create a credential that suits your needs.
        - id: pipelineOptions
          type: <xref uid="@azure/keyvault-keys.CryptographyClientOptions" />
          description: ''
properties:
  - name: vaultUrl
    uid: '@azure/keyvault-keys.CryptographyClient.vaultUrl'
    package: '@azure/keyvault-keys'
    summary: The base URL to the vault
    fullName: vaultUrl
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'vaultUrl: string'
      return:
        type: string
        description: ''
methods:
  - name: 'decrypt(EncryptionAlgorithm, Uint8Array, DecryptOptions)'
    uid: '@azure/keyvault-keys.CryptographyClient.decrypt'
    package: '@azure/keyvault-keys'
    summary: |-
      Decrypts the given ciphertext with the specified cryptography algorithm
      Example usage:
      ```ts
      let client = new CryptographyClient(keyVaultKey, credentials);
      let result = await client.decrypt("RSA1_5", encryptedBuffer);
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function decrypt(algorithm: EncryptionAlgorithm, ciphertext: Uint8Array,
        options?: DecryptOptions)
      parameters:
        - id: algorithm
          type: <xref uid="@azure/keyvault-keys.EncryptionAlgorithm" />
          description: The algorithm to use.
        - id: ciphertext
          type: Uint8Array
          description: The text to decrypt.
        - id: options
          type: <xref uid="@azure/keyvault-keys.DecryptOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/keyvault-keys.DecryptResult" />&gt;
        description: ''
  - name: 'encrypt(EncryptionAlgorithm, Uint8Array, EncryptOptions)'
    uid: '@azure/keyvault-keys.CryptographyClient.encrypt'
    package: '@azure/keyvault-keys'
    summary: |-
      Encrypts the given plaintext with the specified cryptography algorithm
      Example usage:
      ```ts
      let client = new CryptographyClient(keyVaultKey, credentials);
      let result = await client.encrypt("RSA1_5", Buffer.from("My Message"));
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function encrypt(algorithm: EncryptionAlgorithm, plaintext: Uint8Array,
        options?: EncryptOptions)
      parameters:
        - id: algorithm
          type: <xref uid="@azure/keyvault-keys.EncryptionAlgorithm" />
          description: The algorithm to use.
        - id: plaintext
          type: Uint8Array
          description: The text to encrypt.
        - id: options
          type: <xref uid="@azure/keyvault-keys.EncryptOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/keyvault-keys.EncryptResult" />&gt;
        description: ''
  - name: 'sign(SignatureAlgorithm, Uint8Array, SignOptions)'
    uid: '@azure/keyvault-keys.CryptographyClient.sign'
    package: '@azure/keyvault-keys'
    summary: |-
      Cryptographically sign the digest of a message
      Example usage:
      ```ts
      let client = new CryptographyClient(keyVaultKey, credentials);
      let result = await client.sign("RS256", digest);
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sign(algorithm: SignatureAlgorithm, digest: Uint8Array,
        options?: SignOptions)
      parameters:
        - id: algorithm
          type: <xref uid="@azure/keyvault-keys.SignatureAlgorithm" />
          description: The signing algorithm to use.
        - id: digest
          type: Uint8Array
          description: The digest of the data to sign.
        - id: options
          type: <xref uid="@azure/keyvault-keys.SignOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/keyvault-keys.SignResult" />&gt;
        description: ''
  - name: 'signData(SignatureAlgorithm, Uint8Array, SignOptions)'
    uid: '@azure/keyvault-keys.CryptographyClient.signData'
    package: '@azure/keyvault-keys'
    summary: |-
      Cryptographically sign a block of data
      Example usage:
      ```ts
      let client = new CryptographyClient(keyVaultKey, credentials);
      let result = await client.signData("RS256", message);
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function signData(algorithm: SignatureAlgorithm, data: Uint8Array,
        options?: SignOptions)
      parameters:
        - id: algorithm
          type: <xref uid="@azure/keyvault-keys.SignatureAlgorithm" />
          description: The signing algorithm to use.
        - id: data
          type: Uint8Array
          description: The data to sign.
        - id: options
          type: <xref uid="@azure/keyvault-keys.SignOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/keyvault-keys.SignResult" />&gt;
        description: ''
  - name: 'unwrapKey(KeyWrapAlgorithm, Uint8Array, UnwrapKeyOptions)'
    uid: '@azure/keyvault-keys.CryptographyClient.unwrapKey'
    package: '@azure/keyvault-keys'
    summary: |-
      Unwraps the given wrapped key using the specified cryptography algorithm
      Example usage:
      ```ts
      let client = new CryptographyClient(keyVaultKey, credentials);
      let result = await client.unwrapKey("RSA1_5", keyToUnwrap);
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function unwrapKey(algorithm: KeyWrapAlgorithm, encryptedKey:
        Uint8Array, options?: UnwrapKeyOptions)
      parameters:
        - id: algorithm
          type: <xref uid="@azure/keyvault-keys.KeyWrapAlgorithm" />
          description: The decryption algorithm to use to unwrap the key.
        - id: encryptedKey
          type: Uint8Array
          description: The encrypted key to unwrap.
        - id: options
          type: <xref uid="@azure/keyvault-keys.UnwrapKeyOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/keyvault-keys.UnwrapResult" />&gt;
        description: ''
  - name: 'verify(SignatureAlgorithm, Uint8Array, Uint8Array, VerifyOptions)'
    uid: '@azure/keyvault-keys.CryptographyClient.verify'
    package: '@azure/keyvault-keys'
    summary: |-
      Verify the signed message digest
      Example usage:
      ```ts
      let client = new CryptographyClient(keyVaultKey, credentials);
      let result = await client.verify("RS256", signedDigest, signature);
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function verify(algorithm: SignatureAlgorithm, digest: Uint8Array,
        signature: Uint8Array, options?: VerifyOptions)
      parameters:
        - id: algorithm
          type: <xref uid="@azure/keyvault-keys.SignatureAlgorithm" />
          description: The signing algorithm to use to verify with.
        - id: digest
          type: Uint8Array
          description: The digest to verify.
        - id: signature
          type: Uint8Array
          description: The signature to verify the digest against.
        - id: options
          type: <xref uid="@azure/keyvault-keys.VerifyOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/keyvault-keys.VerifyResult" />&gt;
        description: ''
  - name: 'verifyData(SignatureAlgorithm, Uint8Array, Uint8Array, VerifyOptions)'
    uid: '@azure/keyvault-keys.CryptographyClient.verifyData'
    package: '@azure/keyvault-keys'
    summary: |-
      Verify the signed block of data
      Example usage:
      ```ts
      let client = new CryptographyClient(keyVaultKey, credentials);
      let result = await client.verifyData("RS256", signedMessage, signature);
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function verifyData(algorithm: SignatureAlgorithm, data: Uint8Array,
        signature: Uint8Array, options?: VerifyOptions)
      parameters:
        - id: algorithm
          type: <xref uid="@azure/keyvault-keys.SignatureAlgorithm" />
          description: The algorithm to use to verify with.
        - id: data
          type: Uint8Array
          description: The signed block of data to verify.
        - id: signature
          type: Uint8Array
          description: The signature to verify the block against.
        - id: options
          type: <xref uid="@azure/keyvault-keys.VerifyOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/keyvault-keys.VerifyResult" />&gt;
        description: ''
  - name: 'wrapKey(KeyWrapAlgorithm, Uint8Array, WrapKeyOptions)'
    uid: '@azure/keyvault-keys.CryptographyClient.wrapKey'
    package: '@azure/keyvault-keys'
    summary: |-
      Wraps the given key using the specified cryptography algorithm
      Example usage:
      ```ts
      let client = new CryptographyClient(keyVaultKey, credentials);
      let result = await client.wrapKey("RSA1_5", keyToWrap);
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function wrapKey(algorithm: KeyWrapAlgorithm, key: Uint8Array, options?:
        WrapKeyOptions)
      parameters:
        - id: algorithm
          type: <xref uid="@azure/keyvault-keys.KeyWrapAlgorithm" />
          description: The encryption algorithm to use to wrap the given key.
        - id: key
          type: Uint8Array
          description: The key to wrap.
        - id: options
          type: <xref uid="@azure/keyvault-keys.WrapKeyOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/keyvault-keys.WrapResult" />&gt;
        description: ''
