### YamlMime:UniversalReference
items:
  - uid: '@azure/event-hubs.EventHubConsumerClient'
    name: EventHubConsumerClient
    fullName: EventHubConsumerClient
    children:
      - '@azure/event-hubs.EventHubConsumerClient.close'
      - '@azure/event-hubs.EventHubConsumerClient.defaultConsumerGroupName'
      - '@azure/event-hubs.EventHubConsumerClient.constructor_1'
      - '@azure/event-hubs.EventHubConsumerClient.constructor'
      - '@azure/event-hubs.EventHubConsumerClient.constructor_3'
      - '@azure/event-hubs.EventHubConsumerClient.constructor_2'
      - '@azure/event-hubs.EventHubConsumerClient.constructor_5'
      - '@azure/event-hubs.EventHubConsumerClient.constructor_4'
      - '@azure/event-hubs.EventHubConsumerClient.eventHubName'
      - '@azure/event-hubs.EventHubConsumerClient.fullyQualifiedNamespace'
      - '@azure/event-hubs.EventHubConsumerClient.getEventHubProperties'
      - '@azure/event-hubs.EventHubConsumerClient.getPartitionIds'
      - '@azure/event-hubs.EventHubConsumerClient.getPartitionProperties'
      - '@azure/event-hubs.EventHubConsumerClient.subscribe_1'
      - '@azure/event-hubs.EventHubConsumerClient.subscribe'
    langs:
      - typeScript
    type: class
    summary: >
      The `EventHubConsumerClient` class is used to consume events from an Event
      Hub.

      There are multiple ways to create an `EventHubConsumerClient`

      - Use the connection string from the SAS policy created for your Event Hub
      instance.

      - Use the connection string from the SAS policy created for your Event Hub
      namespace,

      and the name of the Event Hub instance

      - Use the full namespace like `<yournamespace>.servicebus.windows.net`,
      and a credentials object.


      Optionally, you can also pass:

      - An options bag to configure the retry policy or proxy settings.

      - A checkpoint store that is used by the client to read checkpoints to
      determine the position from where it should

      resume receiving events when your application gets restarted. The
      checkpoint store is also used by the client

      to load balance multiple instances of your application.
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Closes the AMQP connection to the Event Hub instance,
      returning a promise that will be resolved when disconnection is completed.
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
        description: Promise<void>
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.defaultConsumerGroupName'
    name: defaultConsumerGroupName
    fullName: defaultConsumerGroupName
    children: []
    langs:
      - typeScript
    type: property
    summary: The name of the default consumer group in the Event Hubs service.
    syntax:
      content: 'static defaultConsumerGroupName: string = Constants.defaultConsumerGroup'
      return:
        type:
          - string
        description: ''
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.constructor_1'
    name: >-
      EventHubConsumerClient(string, string, CheckpointStore,
      EventHubClientOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new EventHubConsumerClient(consumerGroup: string, connectionString:
        string, checkpointStore: CheckpointStore, options?:
        EventHubClientOptions)
      parameters:
        - id: consumerGroup
          type:
            - string
          description: >-
            The name of the consumer group from which you want to process
            events.
        - id: connectionString
          type:
            - string
          description: >-
            The connection string to use for connecting to the Event Hub
            instance.

            It is expected that the shared key properties and the Event Hub path
            are contained in this connection string.

            e.g.
            'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;EntityPath=my-event-hub-name'.
        - id: checkpointStore
          type:
            - '@azure/event-hubs.CheckpointStore'
          description: >-
            A checkpoint store that is used by the client to read checkpoints to
            determine

            the position from where it should resume receiving events when your
            application gets restarted.

            It is also used by the client to load balance multiple instances of
            your application.
        - id: options
          type:
            - '@azure/event-hubs.EventHubClientOptions'
          description: >
            A set of options to apply when configuring the client.

            - `retryOptions`   : Configures the retry policy for all the
            operations on the client.

            For example, `{ "maxRetries": 4 }` or `{ "maxRetries": 4,
            "retryDelayInMs": 30000 }`.

            - `webSocketOptions`: Configures the channelling of the AMQP
            connection over Web Sockets.

            - `userAgent`      : A string to append to the built in user agent
            string that is passed to the service.
          optional: true
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.constructor'
    name: 'EventHubConsumerClient(string, string, EventHubClientOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new EventHubConsumerClient(consumerGroup: string, connectionString:
        string, options?: EventHubClientOptions)
      parameters:
        - id: consumerGroup
          type:
            - string
          description: >-
            The name of the consumer group from which you want to process
            events.
        - id: connectionString
          type:
            - string
          description: >-
            The connection string to use for connecting to the Event Hub
            instance.

            It is expected that the shared key properties and the Event Hub path
            are contained in this connection string.

            e.g.
            'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;EntityPath=my-event-hub-name'.
        - id: options
          type:
            - '@azure/event-hubs.EventHubClientOptions'
          description: >
            A set of options to apply when configuring the client.

            - `retryOptions`   : Configures the retry policy for all the
            operations on the client.

            For example, `{ "maxRetries": 4 }` or `{ "maxRetries": 4,
            "retryDelayInMs": 30000 }`.

            - `webSocketOptions`: Configures the channelling of the AMQP
            connection over Web Sockets.

            - `userAgent`      : A string to append to the built in user agent
            string that is passed to the service.
          optional: true
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.constructor_3'
    name: >-
      EventHubConsumerClient(string, string, string, CheckpointStore,
      EventHubClientOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new EventHubConsumerClient(consumerGroup: string, connectionString:
        string, eventHubName: string, checkpointStore: CheckpointStore,
        options?: EventHubClientOptions)
      parameters:
        - id: consumerGroup
          type:
            - string
          description: >-
            The name of the consumer group from which you want to process
            events.
        - id: connectionString
          type:
            - string
          description: >-
            The connection string to use for connecting to the Event Hub
            instance.

            It is expected that the shared key properties and the Event Hub path
            are contained in this connection string.

            e.g.
            'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;EntityPath=my-event-hub-name'.
        - id: eventHubName
          type:
            - string
          description: The name of the specific Event Hub to connect the client to.
        - id: checkpointStore
          type:
            - '@azure/event-hubs.CheckpointStore'
          description: >-
            A checkpoint store that is used by the client to read checkpoints to
            determine

            the position from where it should resume receiving events when your
            application gets restarted.

            It is also used by the client to load balance multiple instances of
            your application.
        - id: options
          type:
            - '@azure/event-hubs.EventHubClientOptions'
          description: >
            A set of options to apply when configuring the client.

            - `retryOptions`   : Configures the retry policy for all the
            operations on the client.

            For example, `{ "maxRetries": 4 }` or `{ "maxRetries": 4,
            "retryDelayInMs": 30000 }`.

            - `webSocketOptions`: Configures the channelling of the AMQP
            connection over Web Sockets.

            - `userAgent`      : A string to append to the built in user agent
            string that is passed to the service.
          optional: true
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.constructor_2'
    name: 'EventHubConsumerClient(string, string, string, EventHubClientOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new EventHubConsumerClient(consumerGroup: string, connectionString:
        string, eventHubName: string, options?: EventHubClientOptions)
      parameters:
        - id: consumerGroup
          type:
            - string
          description: >-
            The name of the consumer group from which you want to process
            events.
        - id: connectionString
          type:
            - string
          description: >-
            The connection string to use for connecting to the Event Hub
            instance.

            It is expected that the shared key properties and the Event Hub path
            are contained in this connection string.

            e.g.
            'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;EntityPath=my-event-hub-name'.
        - id: eventHubName
          type:
            - string
          description: The name of the specific Event Hub to connect the client to.
        - id: options
          type:
            - '@azure/event-hubs.EventHubClientOptions'
          description: >
            A set of options to apply when configuring the client.

            - `retryOptions`   : Configures the retry policy for all the
            operations on the client.

            For example, `{ "maxRetries": 4 }` or `{ "maxRetries": 4,
            "retryDelayInMs": 30000 }`.

            - `webSocketOptions`: Configures the channelling of the AMQP
            connection over Web Sockets.

            - `userAgent`      : A string to append to the built in user agent
            string that is passed to the service.
          optional: true
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.constructor_5'
    name: >-
      EventHubConsumerClient(string, string, string, TokenCredential,
      CheckpointStore, EventHubClientOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new EventHubConsumerClient(consumerGroup: string,
        fullyQualifiedNamespace: string, eventHubName: string, credential:
        TokenCredential, checkpointStore: CheckpointStore, options?:
        EventHubClientOptions)
      parameters:
        - id: consumerGroup
          type:
            - string
          description: >-
            The name of the consumer group from which you want to process
            events.
        - id: fullyQualifiedNamespace
          type:
            - string
          description: |-
            The full namespace which is likely to be similar to
            <yournamespace>.servicebus.windows.net
        - id: eventHubName
          type:
            - string
          description: The name of the specific Event Hub to connect the client to.
        - id: credential
          type:
            - TokenCredential
          description: >-
            An credential object used by the client to get the token to
            authenticate the connection

            with the Azure Event Hubs service. See &commat;azure/identity for
            creating the credentials.
        - id: checkpointStore
          type:
            - '@azure/event-hubs.CheckpointStore'
          description: >-
            A checkpoint store that is used by the client to read checkpoints to
            determine

            the position from where it should resume receiving events when your
            application gets restarted.

            It is also used by the client to load balance multiple instances of
            your application.
        - id: options
          type:
            - '@azure/event-hubs.EventHubClientOptions'
          description: >
            A set of options to apply when configuring the client.

            - `retryOptions`   : Configures the retry policy for all the
            operations on the client.

            For example, `{ "maxRetries": 4 }` or `{ "maxRetries": 4,
            "retryDelayInMs": 30000 }`.

            - `webSocketOptions`: Configures the channelling of the AMQP
            connection over Web Sockets.

            - `userAgent`      : A string to append to the built in user agent
            string that is passed to the service.
          optional: true
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.constructor_4'
    name: >-
      EventHubConsumerClient(string, string, string, TokenCredential,
      EventHubClientOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new EventHubConsumerClient(consumerGroup: string,
        fullyQualifiedNamespace: string, eventHubName: string, credential:
        TokenCredential, options?: EventHubClientOptions)
      parameters:
        - id: consumerGroup
          type:
            - string
          description: >-
            The name of the consumer group from which you want to process
            events.
        - id: fullyQualifiedNamespace
          type:
            - string
          description: |-
            The full namespace which is likely to be similar to
            <yournamespace>.servicebus.windows.net
        - id: eventHubName
          type:
            - string
          description: The name of the specific Event Hub to connect the client to.
        - id: credential
          type:
            - TokenCredential
          description: >-
            An credential object used by the client to get the token to
            authenticate the connection

            with the Azure Event Hubs service. See &commat;azure/identity for
            creating the credentials.
        - id: options
          type:
            - '@azure/event-hubs.EventHubClientOptions'
          description: >
            A set of options to apply when configuring the client.

            - `retryOptions`   : Configures the retry policy for all the
            operations on the client.

            For example, `{ "maxRetries": 4 }` or `{ "maxRetries": 4,
            "retryDelayInMs": 30000 }`.

            - `webSocketOptions`: Configures the channelling of the AMQP
            connection over Web Sockets.

            - `userAgent`      : A string to append to the built in user agent
            string that is passed to the service.
          optional: true
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.eventHubName'
    name: eventHubName
    fullName: eventHubName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: string eventHubName
      return:
        type:
          - string
        description: ''
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.fullyQualifiedNamespace'
    name: fullyQualifiedNamespace
    fullName: fullyQualifiedNamespace
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: string fullyQualifiedNamespace
      return:
        type:
          - string
        description: ''
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.getEventHubProperties'
    name: getEventHubProperties(GetEventHubPropertiesOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Provides the Event Hub runtime information.
    syntax:
      content: 'function getEventHubProperties(options: GetEventHubPropertiesOptions)'
      parameters:
        - id: options
          type:
            - '@azure/event-hubs.GetEventHubPropertiesOptions'
          description: The set of options to apply to the operation call.
      return:
        type:
          - Promise<@azure/event-hubs.EventHubProperties>
        description: A promise that resolves with information about the Event Hub instance.
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.getPartitionIds'
    name: getPartitionIds(GetPartitionIdsOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Provides the id for each partition associated with the Event Hub.
    syntax:
      content: 'function getPartitionIds(options: GetPartitionIdsOptions)'
      parameters:
        - id: options
          type:
            - '@azure/event-hubs.GetPartitionIdsOptions'
          description: The set of options to apply to the operation call.
      return:
        type:
          - 'Promise<string[]>'
        description: >-
          A promise that resolves with an Array of strings representing the id
          for

          each partition associated with the Event Hub.
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.getPartitionProperties'
    name: 'getPartitionProperties(string, GetPartitionPropertiesOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Provides information about the state of the specified partition.
    syntax:
      content: >-
        function getPartitionProperties(partitionId: string, options:
        GetPartitionPropertiesOptions)
      parameters:
        - id: partitionId
          type:
            - string
          description: The id of the partition for which information is required.
        - id: options
          type:
            - '@azure/event-hubs.GetPartitionPropertiesOptions'
          description: The set of options to apply to the operation call.
      return:
        type:
          - Promise<@azure/event-hubs.PartitionProperties>
        description: >-
          A promise that resolves with information about the state of the
          partition .
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.subscribe_1'
    name: 'subscribe(string, SubscriptionEventHandlers, SubscribeOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Subscribe to events from a single partition.
      Call close() on the returned object to stop receiving events.
    syntax:
      content: >-
        function subscribe(partitionId: string, handlers:
        SubscriptionEventHandlers, options?: SubscribeOptions)
      parameters:
        - id: partitionId
          type:
            - string
          description: The id of the partition to subscribe to.
        - id: handlers
          type:
            - '@azure/event-hubs.SubscriptionEventHandlers'
          description: >-
            Handlers for the lifecycle of the subscription - subscription
            initialization
                            of the partition, receiving events, handling errors and the closing
                            of a subscription to the partition.
        - id: options
          type:
            - '@azure/event-hubs.SubscribeOptions'
          description: >
            Configures the way events are received.

            Most common are `maxBatchSize` and `maxWaitTimeInSeconds` that
            control the flow of

            events to the handler provided to receive events as well as the
            start position. For example,

            `{ maxBatchSize: 20, maxWaitTimeInSeconds: 120, startPosition: {
            sequenceNumber: 123 } }
          optional: true
      return:
        type:
          - '@azure/event-hubs.Subscription'
        description: ''
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.subscribe'
    name: 'subscribe(SubscriptionEventHandlers, SubscribeOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Subscribe to events from all partitions.

      If checkpoint store is provided to the `EventHubConsumerClient` and there
      are multiple

      instances of your application, then each instance will subscribe to a
      subset of the

      partitions such that the load is balanced amongst them.


      Call close() on the returned object to stop receiving events.
    syntax:
      content: >-
        function subscribe(handlers: SubscriptionEventHandlers, options?:
        SubscribeOptions)
      parameters:
        - id: handlers
          type:
            - '@azure/event-hubs.SubscriptionEventHandlers'
          description: >-
            Handlers for the lifecycle of the subscription - subscription
            initialization
                            per partition, receiving events, handling errors and the closing
                            of a subscription per partition.
        - id: options
          type:
            - '@azure/event-hubs.SubscribeOptions'
          description: >
            Configures the way events are received.

            Most common are `maxBatchSize` and `maxWaitTimeInSeconds` that
            control the flow of

            events to the handler provided to receive events as well as the
            start position. For example,

            `{ maxBatchSize: 20, maxWaitTimeInSeconds: 120, startPosition: {
            sequenceNumber: 123 } }
          optional: true
      return:
        type:
          - '@azure/event-hubs.Subscription'
        description: ''
    package: '@azure/event-hubs'
references:
  - uid: '@azure/event-hubs.EventHubClientOptions'
    name: EventHubClientOptions
    spec.typeScript:
      - name: EventHubClientOptions
        fullName: EventHubClientOptions
        uid: '@azure/event-hubs.EventHubClientOptions'
  - uid: '@azure/event-hubs.CheckpointStore'
    name: CheckpointStore
    spec.typeScript:
      - name: CheckpointStore
        fullName: CheckpointStore
        uid: '@azure/event-hubs.CheckpointStore'
  - uid: '@azure/event-hubs.GetEventHubPropertiesOptions'
    name: GetEventHubPropertiesOptions
    spec.typeScript:
      - name: GetEventHubPropertiesOptions
        fullName: GetEventHubPropertiesOptions
        uid: '@azure/event-hubs.GetEventHubPropertiesOptions'
  - uid: Promise<@azure/event-hubs.EventHubProperties>
    name: EventHubProperties>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: EventHubProperties
        fullName: EventHubProperties
        uid: '@azure/event-hubs.EventHubProperties'
      - name: '>'
        fullName: '>'
  - uid: '@azure/event-hubs.GetPartitionIdsOptions'
    name: GetPartitionIdsOptions
    spec.typeScript:
      - name: GetPartitionIdsOptions
        fullName: GetPartitionIdsOptions
        uid: '@azure/event-hubs.GetPartitionIdsOptions'
  - uid: '@azure/event-hubs.GetPartitionPropertiesOptions'
    name: GetPartitionPropertiesOptions
    spec.typeScript:
      - name: GetPartitionPropertiesOptions
        fullName: GetPartitionPropertiesOptions
        uid: '@azure/event-hubs.GetPartitionPropertiesOptions'
  - uid: Promise<@azure/event-hubs.PartitionProperties>
    name: PartitionProperties>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: PartitionProperties
        fullName: PartitionProperties
        uid: '@azure/event-hubs.PartitionProperties'
      - name: '>'
        fullName: '>'
  - uid: '@azure/event-hubs.SubscriptionEventHandlers'
    name: SubscriptionEventHandlers
    spec.typeScript:
      - name: SubscriptionEventHandlers
        fullName: SubscriptionEventHandlers
        uid: '@azure/event-hubs.SubscriptionEventHandlers'
  - uid: '@azure/event-hubs.SubscribeOptions'
    name: SubscribeOptions
    spec.typeScript:
      - name: SubscribeOptions
        fullName: SubscribeOptions
        uid: '@azure/event-hubs.SubscribeOptions'
  - uid: '@azure/event-hubs.Subscription'
    name: Subscription
    spec.typeScript:
      - name: Subscription
        fullName: Subscription
        uid: '@azure/event-hubs.Subscription'
