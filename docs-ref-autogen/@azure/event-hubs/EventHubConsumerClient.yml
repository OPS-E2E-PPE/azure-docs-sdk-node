### YamlMime:TSType
name: EventHubConsumerClient
uid: '@azure/event-hubs.EventHubConsumerClient'
package: '@azure/event-hubs'
summary: >
  The `EventHubConsumerClient` class is used to consume events from an Event
  Hub.

  There are multiple ways to create an `EventHubConsumerClient`

  - Use the connection string from the SAS policy created for your Event Hub
  instance.

  - Use the connection string from the SAS policy created for your Event Hub
  namespace,

  and the name of the Event Hub instance

  - Use the full namespace like `<yournamespace>.servicebus.windows.net`, and a
  credentials object.


  Optionally, you can also pass:

  - An options bag to configure the retry policy or proxy settings.

  - A checkpoint store that is used by the client to read checkpoints to
  determine the position from where it should

  resume receiving events when your application gets restarted. The checkpoint
  store is also used by the client

  to load balance multiple instances of your application.
fullName: EventHubConsumerClient
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: >-
      EventHubConsumerClient(string, string, CheckpointStore,
      EventHubConsumerClientOptions)
    uid: '@azure/event-hubs.EventHubConsumerClient.constructor_1'
    package: '@azure/event-hubs'
    summary: >-
      The `EventHubConsumerClient` class is used to consume events from an Event
      Hub.

      Use the `options` parmeter to configure retry policy or proxy settings.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new EventHubConsumerClient(consumerGroup: string, connectionString:
        string, checkpointStore: CheckpointStore, options?:
        EventHubConsumerClientOptions)
      parameters:
        - id: consumerGroup
          type: string
          description: >-
            The name of the consumer group from which you want to process
            events.
        - id: connectionString
          type: string
          description: >-
            The connection string to use for connecting to the Event Hub
            instance.

            It is expected that the shared key properties and the Event Hub path
            are contained in this connection string.

            e.g.
            'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;EntityPath=my-event-hub-name'.
        - id: checkpointStore
          type: <xref uid="@azure/event-hubs.CheckpointStore" />
          description: >-
            A checkpoint store that is used by the client to read checkpoints to
            determine

            the position from where it should resume receiving events when your
            application gets restarted.

            It is also used by the client to load balance multiple instances of
            your application.
        - id: options
          type: <xref uid="@azure/event-hubs.EventHubConsumerClientOptions" />
          description: >
            A set of options to apply when configuring the client.

            - `retryOptions`   : Configures the retry policy for all the
            operations on the client.

            For example, `{ "maxRetries": 4 }` or `{ "maxRetries": 4,
            "retryDelayInMs": 30000 }`.

            - `webSocketOptions`: Configures the channelling of the AMQP
            connection over Web Sockets.

            - `userAgent`      : A string to append to the built in user agent
            string that is passed to the service.
  - name: 'EventHubConsumerClient(string, string, EventHubConsumerClientOptions)'
    uid: '@azure/event-hubs.EventHubConsumerClient.constructor'
    package: '@azure/event-hubs'
    summary: >-
      The `EventHubConsumerClient` class is used to consume events from an Event
      Hub.

      Use the `options` parmeter to configure retry policy or proxy settings.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new EventHubConsumerClient(consumerGroup: string, connectionString:
        string, options?: EventHubConsumerClientOptions)
      parameters:
        - id: consumerGroup
          type: string
          description: >-
            The name of the consumer group from which you want to process
            events.
        - id: connectionString
          type: string
          description: >-
            The connection string to use for connecting to the Event Hub
            instance.

            It is expected that the shared key properties and the Event Hub path
            are contained in this connection string.

            e.g.
            'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;EntityPath=my-event-hub-name'.
        - id: options
          type: <xref uid="@azure/event-hubs.EventHubConsumerClientOptions" />
          description: >
            A set of options to apply when configuring the client.

            - `retryOptions`   : Configures the retry policy for all the
            operations on the client.

            For example, `{ "maxRetries": 4 }` or `{ "maxRetries": 4,
            "retryDelayInMs": 30000 }`.

            - `webSocketOptions`: Configures the channelling of the AMQP
            connection over Web Sockets.

            - `userAgent`      : A string to append to the built in user agent
            string that is passed to the service.
  - name: >-
      EventHubConsumerClient(string, string, string, CheckpointStore,
      EventHubConsumerClientOptions)
    uid: '@azure/event-hubs.EventHubConsumerClient.constructor_3'
    package: '@azure/event-hubs'
    summary: >-
      The `EventHubConsumerClient` class is used to consume events from an Event
      Hub.

      Use the `options` parmeter to configure retry policy or proxy settings.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new EventHubConsumerClient(consumerGroup: string, connectionString:
        string, eventHubName: string, checkpointStore: CheckpointStore,
        options?: EventHubConsumerClientOptions)
      parameters:
        - id: consumerGroup
          type: string
          description: >-
            The name of the consumer group from which you want to process
            events.
        - id: connectionString
          type: string
          description: >-
            The connection string to use for connecting to the Event Hub
            instance.

            It is expected that the shared key properties and the Event Hub path
            are contained in this connection string.

            e.g.
            'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;EntityPath=my-event-hub-name'.
        - id: eventHubName
          type: string
          description: The name of the specific Event Hub to connect the client to.
        - id: checkpointStore
          type: <xref uid="@azure/event-hubs.CheckpointStore" />
          description: >-
            A checkpoint store that is used by the client to read checkpoints to
            determine

            the position from where it should resume receiving events when your
            application gets restarted.

            It is also used by the client to load balance multiple instances of
            your application.
        - id: options
          type: <xref uid="@azure/event-hubs.EventHubConsumerClientOptions" />
          description: >
            A set of options to apply when configuring the client.

            - `retryOptions`   : Configures the retry policy for all the
            operations on the client.

            For example, `{ "maxRetries": 4 }` or `{ "maxRetries": 4,
            "retryDelayInMs": 30000 }`.

            - `webSocketOptions`: Configures the channelling of the AMQP
            connection over Web Sockets.

            - `userAgent`      : A string to append to the built in user agent
            string that is passed to the service.
  - name: >-
      EventHubConsumerClient(string, string, string,
      EventHubConsumerClientOptions)
    uid: '@azure/event-hubs.EventHubConsumerClient.constructor_2'
    package: '@azure/event-hubs'
    summary: >-
      The `EventHubConsumerClient` class is used to consume events from an Event
      Hub.

      Use the `options` parmeter to configure retry policy or proxy settings.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new EventHubConsumerClient(consumerGroup: string, connectionString:
        string, eventHubName: string, options?: EventHubConsumerClientOptions)
      parameters:
        - id: consumerGroup
          type: string
          description: >-
            The name of the consumer group from which you want to process
            events.
        - id: connectionString
          type: string
          description: >-
            The connection string to use for connecting to the Event Hub
            instance.

            It is expected that the shared key properties and the Event Hub path
            are contained in this connection string.

            e.g.
            'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;EntityPath=my-event-hub-name'.
        - id: eventHubName
          type: string
          description: The name of the specific Event Hub to connect the client to.
        - id: options
          type: <xref uid="@azure/event-hubs.EventHubConsumerClientOptions" />
          description: >
            A set of options to apply when configuring the client.

            - `retryOptions`   : Configures the retry policy for all the
            operations on the client.

            For example, `{ "maxRetries": 4 }` or `{ "maxRetries": 4,
            "retryDelayInMs": 30000 }`.

            - `webSocketOptions`: Configures the channelling of the AMQP
            connection over Web Sockets.

            - `userAgent`      : A string to append to the built in user agent
            string that is passed to the service.
  - name: >-
      EventHubConsumerClient(string, string, string, TokenCredential |
      NamedKeyCredential | SASCredential, CheckpointStore,
      EventHubConsumerClientOptions)
    uid: '@azure/event-hubs.EventHubConsumerClient.constructor_5'
    package: '@azure/event-hubs'
    summary: >-
      The `EventHubConsumerClient` class is used to consume events from an Event
      Hub.

      Use the `options` parmeter to configure retry policy or proxy settings.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new EventHubConsumerClient(consumerGroup: string,
        fullyQualifiedNamespace: string, eventHubName: string, credential:
        TokenCredential | NamedKeyCredential | SASCredential, checkpointStore:
        CheckpointStore, options?: EventHubConsumerClientOptions)
      parameters:
        - id: consumerGroup
          type: string
          description: >-
            The name of the consumer group from which you want to process
            events.
        - id: fullyQualifiedNamespace
          type: string
          description: |-
            The full namespace which is likely to be similar to
            <yournamespace>.servicebus.windows.net
        - id: eventHubName
          type: string
          description: The name of the specific Event Hub to connect the client to.
        - id: credential
          type: TokenCredential | NamedKeyCredential | SASCredential
          description: >-
            An credential object used by the client to get the token to
            authenticate the connection

            with the Azure Event Hubs service.

            See &commat;azure/identity for creating credentials that support AAD
            auth.

            Use the `AzureNamedKeyCredential` from &commat;azure/core-auth if
            you want to pass in a `SharedAccessKeyName`

            and `SharedAccessKey` without using a connection string. These
            fields map to the `name` and `key` field respectively

            in `AzureNamedKeyCredential`.

            Use the `AzureSASCredential` from &commat;azure/core-auth if you
            want to pass in a `SharedAccessSignature`

            without using a connection string. This field maps to `signature` in
            `AzureSASCredential`.
        - id: checkpointStore
          type: <xref uid="@azure/event-hubs.CheckpointStore" />
          description: >-
            A checkpoint store that is used by the client to read checkpoints to
            determine

            the position from where it should resume receiving events when your
            application gets restarted.

            It is also used by the client to load balance multiple instances of
            your application.
        - id: options
          type: <xref uid="@azure/event-hubs.EventHubConsumerClientOptions" />
          description: >
            A set of options to apply when configuring the client.

            - `retryOptions`   : Configures the retry policy for all the
            operations on the client.

            For example, `{ "maxRetries": 4 }` or `{ "maxRetries": 4,
            "retryDelayInMs": 30000 }`.

            - `webSocketOptions`: Configures the channelling of the AMQP
            connection over Web Sockets.

            - `userAgent`      : A string to append to the built in user agent
            string that is passed to the service.
  - name: >-
      EventHubConsumerClient(string, string, string, TokenCredential |
      NamedKeyCredential | SASCredential, EventHubConsumerClientOptions)
    uid: '@azure/event-hubs.EventHubConsumerClient.constructor_4'
    package: '@azure/event-hubs'
    summary: >-
      The `EventHubConsumerClient` class is used to consume events from an Event
      Hub.

      Use the `options` parmeter to configure retry policy or proxy settings.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new EventHubConsumerClient(consumerGroup: string,
        fullyQualifiedNamespace: string, eventHubName: string, credential:
        TokenCredential | NamedKeyCredential | SASCredential, options?:
        EventHubConsumerClientOptions)
      parameters:
        - id: consumerGroup
          type: string
          description: >-
            The name of the consumer group from which you want to process
            events.
        - id: fullyQualifiedNamespace
          type: string
          description: |-
            The full namespace which is likely to be similar to
            <yournamespace>.servicebus.windows.net
        - id: eventHubName
          type: string
          description: The name of the specific Event Hub to connect the client to.
        - id: credential
          type: TokenCredential | NamedKeyCredential | SASCredential
          description: >-
            An credential object used by the client to get the token to
            authenticate the connection

            with the Azure Event Hubs service.

            See &commat;azure/identity for creating credentials that support AAD
            auth.

            Use the `AzureNamedKeyCredential` from &commat;azure/core-auth if
            you want to pass in a `SharedAccessKeyName`

            and `SharedAccessKey` without using a connection string. These
            fields map to the `name` and `key` field respectively

            in `AzureNamedKeyCredential`.

            Use the `AzureSASCredential` from &commat;azure/core-auth if you
            want to pass in a `SharedAccessSignature`

            without using a connection string. This field maps to `signature` in
            `AzureSASCredential`.
        - id: options
          type: <xref uid="@azure/event-hubs.EventHubConsumerClientOptions" />
          description: >
            A set of options to apply when configuring the client.

            - `retryOptions`   : Configures the retry policy for all the
            operations on the client.

            For example, `{ "maxRetries": 4 }` or `{ "maxRetries": 4,
            "retryDelayInMs": 30000 }`.

            - `webSocketOptions`: Configures the channelling of the AMQP
            connection over Web Sockets.

            - `userAgent`      : A string to append to the built in user agent
            string that is passed to the service.
properties:
  - name: defaultConsumerGroupName
    uid: '@azure/event-hubs.EventHubConsumerClient.defaultConsumerGroupName'
    package: '@azure/event-hubs'
    summary: The name of the default consumer group in the Event Hubs service.
    fullName: defaultConsumerGroupName
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static defaultConsumerGroupName: string'
      return:
        type: string
        description: ''
  - name: eventHubName
    uid: '@azure/event-hubs.EventHubConsumerClient.eventHubName'
    package: '@azure/event-hubs'
    summary: ''
    fullName: eventHubName
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: string eventHubName
      return:
        type: string
        description: ''
  - name: fullyQualifiedNamespace
    uid: '@azure/event-hubs.EventHubConsumerClient.fullyQualifiedNamespace'
    package: '@azure/event-hubs'
    summary: ''
    fullName: fullyQualifiedNamespace
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: string fullyQualifiedNamespace
      return:
        type: string
        description: ''
methods:
  - name: close()
    uid: '@azure/event-hubs.EventHubConsumerClient.close'
    package: '@azure/event-hubs'
    summary: |-
      Closes the AMQP connection to the Event Hub instance,
      returning a promise that will be resolved when disconnection is completed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function close()
      return:
        type: Promise&lt;void&gt;
        description: Promise<void>
  - name: getEventHubProperties(GetEventHubPropertiesOptions)
    uid: '@azure/event-hubs.EventHubConsumerClient.getEventHubProperties'
    package: '@azure/event-hubs'
    summary: Provides the Event Hub runtime information.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getEventHubProperties(options?: GetEventHubPropertiesOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/event-hubs.GetEventHubPropertiesOptions" />
          description: The set of options to apply to the operation call.
      return:
        type: Promise&lt;<xref uid="@azure/event-hubs.EventHubProperties" />&gt;
        description: A promise that resolves with information about the Event Hub instance.
  - name: getPartitionIds(GetPartitionIdsOptions)
    uid: '@azure/event-hubs.EventHubConsumerClient.getPartitionIds'
    package: '@azure/event-hubs'
    summary: Provides the id for each partition associated with the Event Hub.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getPartitionIds(options?: GetPartitionIdsOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/event-hubs.GetPartitionIdsOptions" />
          description: The set of options to apply to the operation call.
      return:
        type: Promise&lt;Array&lt;string&gt;&gt;
        description: >-
          A promise that resolves with an Array of strings representing the id
          for

          each partition associated with the Event Hub.
  - name: 'getPartitionProperties(string, GetPartitionPropertiesOptions)'
    uid: '@azure/event-hubs.EventHubConsumerClient.getPartitionProperties'
    package: '@azure/event-hubs'
    summary: Provides information about the state of the specified partition.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionProperties(partitionId: string, options?:
        GetPartitionPropertiesOptions)
      parameters:
        - id: partitionId
          type: string
          description: The id of the partition for which information is required.
        - id: options
          type: <xref uid="@azure/event-hubs.GetPartitionPropertiesOptions" />
          description: The set of options to apply to the operation call.
      return:
        type: Promise&lt;<xref uid="@azure/event-hubs.PartitionProperties" />&gt;
        description: >-
          A promise that resolves with information about the state of the
          partition .
  - name: 'subscribe(string, SubscriptionEventHandlers, SubscribeOptions)'
    uid: '@azure/event-hubs.EventHubConsumerClient.subscribe_1'
    package: '@azure/event-hubs'
    summary: >
      Subscribe to events from a single partition.

      Call close() on the returned object to stop receiving events.

      Example usage:

      ```ts

      const client = new EventHubConsumerClient(consumerGroup, connectionString,
      eventHubName);

      const subscription = client.subscribe(
       partitionId,
       {
         processEvents: (events, context) => { console.log("Received event count: ", events.length) },
         processError: (err, context) => { console.log("Error: ", err) }
       },
       { startPosition: earliestEventPosition }
      );

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function subscribe(partitionId: string, handlers:
        SubscriptionEventHandlers, options?: SubscribeOptions)
      parameters:
        - id: partitionId
          type: string
          description: The id of the partition to subscribe to.
        - id: handlers
          type: <xref uid="@azure/event-hubs.SubscriptionEventHandlers" />
          description: >-
            Handlers for the lifecycle of the subscription - subscription
            initialization
                            of the partition, receiving events, handling errors and the closing
                            of a subscription to the partition.
        - id: options
          type: <xref uid="@azure/event-hubs.SubscribeOptions" />
          description: >
            Configures the way events are received.

            Most common are `maxBatchSize` and `maxWaitTimeInSeconds` that
            control the flow of

            events to the handler provided to receive events as well as the
            start position. For example,

            `{ maxBatchSize: 20, maxWaitTimeInSeconds: 120, startPosition: {
            sequenceNumber: 123 } }`
      return:
        type: <xref uid="@azure/event-hubs.Subscription" />
        description: ''
  - name: 'subscribe(SubscriptionEventHandlers, SubscribeOptions)'
    uid: '@azure/event-hubs.EventHubConsumerClient.subscribe'
    package: '@azure/event-hubs'
    summary: >
      Subscribe to events from all partitions.

      If checkpoint store is provided to the `EventHubConsumerClient` and there
      are multiple

      instances of your application, then each instance will subscribe to a
      subset of the

      partitions such that the load is balanced amongst them.


      Call close() on the returned object to stop receiving events.


      Example usage:

      ```ts

      const client = new EventHubConsumerClient(consumerGroup, connectionString,
      eventHubName);

      const subscription = client.subscribe(
       {
         processEvents: (events, context) => { console.log("Received event count: ", events.length) },
         processError: (err, context) => { console.log("Error: ", err) }
       },
       { startPosition: earliestEventPosition }
      );

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function subscribe(handlers: SubscriptionEventHandlers, options?:
        SubscribeOptions)
      parameters:
        - id: handlers
          type: <xref uid="@azure/event-hubs.SubscriptionEventHandlers" />
          description: >-
            Handlers for the lifecycle of the subscription - subscription
            initialization
                            per partition, receiving events, handling errors and the closing
                            of a subscription per partition.
        - id: options
          type: <xref uid="@azure/event-hubs.SubscribeOptions" />
          description: >
            Configures the way events are received.

            Most common are `maxBatchSize` and `maxWaitTimeInSeconds` that
            control the flow of

            events to the handler provided to receive events as well as the
            start position. For example,

            `{ maxBatchSize: 20, maxWaitTimeInSeconds: 120, startPosition: {
            sequenceNumber: 123 } }`
      return:
        type: <xref uid="@azure/event-hubs.Subscription" />
        description: ''
