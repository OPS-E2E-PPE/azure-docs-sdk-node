### YamlMime:UniversalReference
items:
  - uid: '@azure/arm-features.FeatureClient'
    name: FeatureClient
    fullName: FeatureClient
    children:
      - '@azure/arm-features.FeatureClient.acceptLanguage'
      - '@azure/arm-features.FeatureClient.apiVersion'
      - '@azure/arm-features.FeatureClient.beginLongRunningRequest'
      - '@azure/arm-features.FeatureClient.credentials'
      - '@azure/arm-features.FeatureClient.constructor'
      - '@azure/arm-features.FeatureClient.features'
      - '@azure/arm-features.FeatureClient.listOperations'
      - '@azure/arm-features.FeatureClient.listOperations_2'
      - '@azure/arm-features.FeatureClient.listOperations_1'
      - '@azure/arm-features.FeatureClient.listOperationsNext'
      - '@azure/arm-features.FeatureClient.listOperationsNext_2'
      - '@azure/arm-features.FeatureClient.listOperationsNext_1'
      - '@azure/arm-features.FeatureClient.longRunningOperationRetryTimeout'
      - '@azure/arm-features.FeatureClient.restoreLROPoller'
      - '@azure/arm-features.FeatureClient.sendLongRunningRequest'
      - '@azure/arm-features.FeatureClient.sendLRORequest'
      - '@azure/arm-features.FeatureClient.sendOperationRequest'
      - '@azure/arm-features.FeatureClient.sendRequest'
      - '@azure/arm-features.FeatureClient.subscriptionId'
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: '@azure/arm-features.FeatureClientContext'
    package: '@azure/arm-features'
  - uid: '@azure/arm-features.FeatureClient.acceptLanguage'
    name: acceptLanguage
    fullName: acceptLanguage
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'acceptLanguage: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/arm-features'
  - uid: '@azure/arm-features.FeatureClient.apiVersion'
    name: apiVersion
    fullName: apiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'apiVersion?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: '@azure/arm-features'
  - uid: '@azure/arm-features.FeatureClient.beginLongRunningRequest'
    name: >-
      beginLongRunningRequest(RequestPrepareOptions | WebResource,
      RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Send the initial request of a LRO (long running operation) and get back an

      HttpLongRunningOperationResponse that provides methods for polling the LRO
      and checking if the

      LRO is finished.
    syntax:
      content: >-
        function beginLongRunningRequest(request: RequestPrepareOptions |
        WebResource, options?: RequestOptionsBase)
      parameters:
        - id: request
          type:
            - RequestPrepareOptions | WebResource
          description: The request object
        - id: options
          type:
            - RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: |-
          The HttpLongRunningOperationResponse
          that provides methods for interacting with the LRO.
    package: '@azure/arm-features'
  - uid: '@azure/arm-features.FeatureClient.credentials'
    name: credentials
    fullName: credentials
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'credentials: ServiceClientCredentials'
      return:
        type:
          - ServiceClientCredentials
        description: ''
    package: '@azure/arm-features'
  - uid: '@azure/arm-features.FeatureClient.constructor'
    name: >-
      FeatureClient(ServiceClientCredentials, string,
      Models.FeatureClientOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Initializes a new instance of the FeatureClient class.
    syntax:
      content: >-
        new FeatureClient(credentials: ServiceClientCredentials, subscriptionId:
        string, options?: Models.FeatureClientOptions)
      parameters:
        - id: credentials
          type:
            - ServiceClientCredentials
          description: Credentials needed for the client to connect to Azure.
        - id: subscriptionId
          type:
            - string
          description: The ID of the target subscription.
        - id: options
          type:
            - Models.FeatureClientOptions
          description: ''
          optional: true
    package: '@azure/arm-features'
  - uid: '@azure/arm-features.FeatureClient.features'
    name: features
    fullName: features
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'features: Features'
      return:
        type:
          - '@azure/arm-features.Features'
        description: ''
    package: '@azure/arm-features'
  - uid: '@azure/arm-features.FeatureClient.listOperations'
    name: listOperations(msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Lists all of the available Microsoft.Features REST API operations.
    syntax:
      content: 'function listOperations(options?: msRest.RequestOptionsBase)'
      parameters:
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.ListOperationsResponse>
        description: Promise<Models.ListOperationsResponse>
    package: '@azure/arm-features'
  - uid: '@azure/arm-features.FeatureClient.listOperations_2'
    name: 'listOperations(RequestOptionsBase, ServiceCallback<OperationListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listOperations(options: RequestOptionsBase, callback:
        ServiceCallback<OperationListResult>)
      parameters:
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-features.OperationListResult>
          description: |
            The callback
    package: '@azure/arm-features'
  - uid: '@azure/arm-features.FeatureClient.listOperations_1'
    name: listOperations(ServiceCallback<OperationListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function listOperations(callback: ServiceCallback<OperationListResult>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/arm-features.OperationListResult>
          description: |
            The callback
    package: '@azure/arm-features'
  - uid: '@azure/arm-features.FeatureClient.listOperationsNext'
    name: 'listOperationsNext(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Lists all of the available Microsoft.Features REST API operations.
    syntax:
      content: >-
        function listOperationsNext(nextPageLink: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.ListOperationsNextResponse>
        description: Promise<Models.ListOperationsNextResponse>
    package: '@azure/arm-features'
  - uid: '@azure/arm-features.FeatureClient.listOperationsNext_2'
    name: >-
      listOperationsNext(string, RequestOptionsBase,
      ServiceCallback<OperationListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listOperationsNext(nextPageLink: string, options:
        RequestOptionsBase, callback: ServiceCallback<OperationListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-features.OperationListResult>
          description: |
            The callback
    package: '@azure/arm-features'
  - uid: '@azure/arm-features.FeatureClient.listOperationsNext_1'
    name: 'listOperationsNext(string, ServiceCallback<OperationListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listOperationsNext(nextPageLink: string, callback:
        ServiceCallback<OperationListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-features.OperationListResult>
          description: |
            The callback
    package: '@azure/arm-features'
  - uid: '@azure/arm-features.FeatureClient.longRunningOperationRetryTimeout'
    name: longRunningOperationRetryTimeout
    fullName: longRunningOperationRetryTimeout
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The retry timeout in seconds for Long Running Operations. Default value is
      30.
    optional: true
    syntax:
      content: 'longRunningOperationRetryTimeout?: undefined | number'
      return:
        type:
          - undefined | number
        description: ''
    package: '@azure/arm-features'
  - uid: '@azure/arm-features.FeatureClient.restoreLROPoller'
    name: restoreLROPoller(LROPollState)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Restore an LROPoller from the provided LROPollState. This method can be
      used to recreate an

      LROPoller on a different process or machine.
    syntax:
      content: 'function restoreLROPoller(lroPollState: LROPollState)'
      parameters:
        - id: lroPollState
          type:
            - LROPollState
          description: ''
      return:
        type:
          - LROPoller
        description: ''
    package: '@azure/arm-features'
  - uid: '@azure/arm-features.FeatureClient.sendLongRunningRequest'
    name: >-
      sendLongRunningRequest(RequestPrepareOptions | WebResource,
      RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Provides a mechanism to make a request that will poll and provide the
      final result.
    syntax:
      content: >-
        function sendLongRunningRequest(request: RequestPrepareOptions |
        WebResource, options?: RequestOptionsBase)
      parameters:
        - id: request
          type:
            - RequestPrepareOptions | WebResource
          description: The request object
        - id: options
          type:
            - RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse>
        description: >-
          The HttpOperationResponse containing the final polling request,
          response and the responseBody.
    package: '@azure/arm-features'
  - uid: '@azure/arm-features.FeatureClient.sendLRORequest'
    name: 'sendLRORequest(OperationArguments, OperationSpec, RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Send the initial request of a LRO (long running operation) and get back an

      LROPoller that provides methods for polling the LRO and checking if the
      LRO is finished.
    syntax:
      content: >-
        function sendLRORequest(operationArguments: OperationArguments,
        operationSpec: OperationSpec, options?: RequestOptionsBase)
      parameters:
        - id: operationArguments
          type:
            - OperationArguments
          description: The arguments to the operation.
        - id: operationSpec
          type:
            - OperationSpec
          description: The specification for the operation.
        - id: options
          type:
            - RequestOptionsBase
          description: Additional options to be sent while making the request.
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: >-
          The LROPoller object that provides methods for interacting with the
          LRO.
    package: '@azure/arm-features'
  - uid: '@azure/arm-features.FeatureClient.sendOperationRequest'
    name: >-
      sendOperationRequest(OperationArguments, OperationSpec,
      ServiceCallback<any>)
    children: []
    type: method
    langs:
      - typeScript
    summary: Send an HTTP request that is populated using the provided OperationSpec.
    syntax:
      content: >-
        function sendOperationRequest(operationArguments: OperationArguments,
        operationSpec: OperationSpec, callback?: ServiceCallback<any>)
      parameters:
        - id: operationArguments
          type:
            - OperationArguments
          description: >-
            The arguments that the HTTP request's templated values will be
            populated from.
        - id: operationSpec
          type:
            - OperationSpec
          description: The OperationSpec to use to populate the httpRequest.
        - id: callback
          type:
            - ServiceCallback<any>
          description: |
            The callback to call when the response is received.
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: ''
    package: '@azure/arm-features'
  - uid: '@azure/arm-features.FeatureClient.sendRequest'
    name: sendRequest(RequestPrepareOptions | WebResource)
    children: []
    type: method
    langs:
      - typeScript
    summary: Send the provided httpRequest.
    syntax:
      content: 'function sendRequest(options: RequestPrepareOptions | WebResource)'
      parameters:
        - id: options
          type:
            - RequestPrepareOptions | WebResource
          description: ''
      return:
        type:
          - Promise<HttpOperationResponse>
        description: ''
    package: '@azure/arm-features'
  - uid: '@azure/arm-features.FeatureClient.subscriptionId'
    name: subscriptionId
    fullName: subscriptionId
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'subscriptionId: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/arm-features'
references:
  - uid: '@azure/arm-features.FeatureClientContext'
    name: FeatureClientContext
    spec.typeScript:
      - name: FeatureClientContext
        fullName: FeatureClientContext
        uid: '@azure/arm-features.FeatureClientContext'
  - uid: '@azure/arm-features.Features'
    name: Features
    spec.typeScript:
      - name: Features
        fullName: Features
        uid: '@azure/arm-features.Features'
  - uid: ServiceCallback<@azure/arm-features.OperationListResult>
    name: OperationListResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: OperationListResult
        fullName: OperationListResult
        uid: '@azure/arm-features.OperationListResult'
      - name: '>'
        fullName: '>'
