### YamlMime:UniversalReference
items:
  - uid: '@azure/core-http.ExpiringAccessTokenCache'
    name: ExpiringAccessTokenCache
    fullName: ExpiringAccessTokenCache
    children:
      - '@azure/core-http.ExpiringAccessTokenCache.constructor'
      - '@azure/core-http.ExpiringAccessTokenCache.getCachedToken'
      - '@azure/core-http.ExpiringAccessTokenCache.setCachedToken'
    langs:
      - typeScript
    type: class
    summary: |-
      Provides an <xref:AccessTokenCache> implementation which clears
      the cached <xref:AccessToken>'s after the expiresOnTimestamp has
      passed.
    package: '@azure/core-http'
  - uid: '@azure/core-http.ExpiringAccessTokenCache.constructor'
    name: ExpiringAccessTokenCache(number)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: |-
      Constructs an instance of <xref:ExpiringAccessTokenCache> with
      an optional expiration buffer time.
    syntax:
      content: 'new ExpiringAccessTokenCache(tokenRefreshBufferMs: number)'
      parameters:
        - id: tokenRefreshBufferMs
          type:
            - number
          description: ''
    package: '@azure/core-http'
  - uid: '@azure/core-http.ExpiringAccessTokenCache.getCachedToken'
    name: getCachedToken()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getCachedToken()
      parameters: []
      return:
        type:
          - AccessToken | undefined
        description: ''
    package: '@azure/core-http'
  - uid: '@azure/core-http.ExpiringAccessTokenCache.setCachedToken'
    name: setCachedToken(AccessToken | undefined)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setCachedToken(accessToken: AccessToken | undefined)'
      parameters:
        - id: accessToken
          type:
            - AccessToken | undefined
          description: ''
    package: '@azure/core-http'
