### YamlMime:UniversalReference
items:
  - uid: '@azure/servicefabric.ServiceFabricClient'
    name: ServiceFabricClient
    fullName: ServiceFabricClient
    children:
      - >-
        @azure/servicefabric.ServiceFabricClient.addConfigurationParameterOverrides
      - >-
        @azure/servicefabric.ServiceFabricClient.addConfigurationParameterOverrides_1
      - >-
        @azure/servicefabric.ServiceFabricClient.addConfigurationParameterOverrides_2
      - '@azure/servicefabric.ServiceFabricClient.backupPartition'
      - '@azure/servicefabric.ServiceFabricClient.backupPartition_1'
      - '@azure/servicefabric.ServiceFabricClient.backupPartition_2'
      - '@azure/servicefabric.ServiceFabricClient.cancelOperation'
      - '@azure/servicefabric.ServiceFabricClient.cancelOperation_1'
      - '@azure/servicefabric.ServiceFabricClient.cancelOperation_2'
      - '@azure/servicefabric.ServiceFabricClient.cancelRepairTask'
      - '@azure/servicefabric.ServiceFabricClient.cancelRepairTask_2'
      - '@azure/servicefabric.ServiceFabricClient.cancelRepairTask_1'
      - '@azure/servicefabric.ServiceFabricClient.commitImageStoreUploadSession'
      - '@azure/servicefabric.ServiceFabricClient.commitImageStoreUploadSession_1'
      - '@azure/servicefabric.ServiceFabricClient.commitImageStoreUploadSession_2'
      - '@azure/servicefabric.ServiceFabricClient.copyImageStoreContent'
      - '@azure/servicefabric.ServiceFabricClient.copyImageStoreContent_1'
      - '@azure/servicefabric.ServiceFabricClient.copyImageStoreContent_2'
      - '@azure/servicefabric.ServiceFabricClient.createApplication'
      - '@azure/servicefabric.ServiceFabricClient.createApplication_1'
      - '@azure/servicefabric.ServiceFabricClient.createApplication_2'
      - '@azure/servicefabric.ServiceFabricClient.createBackupPolicy'
      - '@azure/servicefabric.ServiceFabricClient.createBackupPolicy_1'
      - '@azure/servicefabric.ServiceFabricClient.createBackupPolicy_2'
      - '@azure/servicefabric.ServiceFabricClient.createComposeDeployment'
      - '@azure/servicefabric.ServiceFabricClient.createComposeDeployment_1'
      - '@azure/servicefabric.ServiceFabricClient.createComposeDeployment_2'
      - '@azure/servicefabric.ServiceFabricClient.createName'
      - '@azure/servicefabric.ServiceFabricClient.createName_1'
      - '@azure/servicefabric.ServiceFabricClient.createName_2'
      - '@azure/servicefabric.ServiceFabricClient.createRepairTask'
      - '@azure/servicefabric.ServiceFabricClient.createRepairTask_2'
      - '@azure/servicefabric.ServiceFabricClient.createRepairTask_1'
      - '@azure/servicefabric.ServiceFabricClient.createService'
      - '@azure/servicefabric.ServiceFabricClient.createService_1'
      - '@azure/servicefabric.ServiceFabricClient.createService_2'
      - '@azure/servicefabric.ServiceFabricClient.createServiceFromTemplate'
      - '@azure/servicefabric.ServiceFabricClient.createServiceFromTemplate_1'
      - '@azure/servicefabric.ServiceFabricClient.createServiceFromTemplate_2'
      - '@azure/servicefabric.ServiceFabricClient.deleteApplication'
      - '@azure/servicefabric.ServiceFabricClient.deleteApplication_1'
      - '@azure/servicefabric.ServiceFabricClient.deleteApplication_2'
      - '@azure/servicefabric.ServiceFabricClient.deleteBackupPolicy'
      - '@azure/servicefabric.ServiceFabricClient.deleteBackupPolicy_1'
      - '@azure/servicefabric.ServiceFabricClient.deleteBackupPolicy_2'
      - '@azure/servicefabric.ServiceFabricClient.deleteImageStoreContent'
      - '@azure/servicefabric.ServiceFabricClient.deleteImageStoreContent_1'
      - '@azure/servicefabric.ServiceFabricClient.deleteImageStoreContent_2'
      - '@azure/servicefabric.ServiceFabricClient.deleteImageStoreUploadSession'
      - '@azure/servicefabric.ServiceFabricClient.deleteImageStoreUploadSession_1'
      - '@azure/servicefabric.ServiceFabricClient.deleteImageStoreUploadSession_2'
      - '@azure/servicefabric.ServiceFabricClient.deleteName'
      - '@azure/servicefabric.ServiceFabricClient.deleteName_1'
      - '@azure/servicefabric.ServiceFabricClient.deleteName_2'
      - '@azure/servicefabric.ServiceFabricClient.deleteProperty'
      - '@azure/servicefabric.ServiceFabricClient.deleteProperty_1'
      - '@azure/servicefabric.ServiceFabricClient.deleteProperty_2'
      - '@azure/servicefabric.ServiceFabricClient.deleteRepairTask'
      - '@azure/servicefabric.ServiceFabricClient.deleteRepairTask_2'
      - '@azure/servicefabric.ServiceFabricClient.deleteRepairTask_1'
      - '@azure/servicefabric.ServiceFabricClient.deleteService'
      - '@azure/servicefabric.ServiceFabricClient.deleteService_1'
      - '@azure/servicefabric.ServiceFabricClient.deleteService_2'
      - '@azure/servicefabric.ServiceFabricClient.deployServicePackageToNode'
      - '@azure/servicefabric.ServiceFabricClient.deployServicePackageToNode_1'
      - '@azure/servicefabric.ServiceFabricClient.deployServicePackageToNode_2'
      - '@azure/servicefabric.ServiceFabricClient.disableApplicationBackup'
      - '@azure/servicefabric.ServiceFabricClient.disableApplicationBackup_1'
      - '@azure/servicefabric.ServiceFabricClient.disableApplicationBackup_2'
      - '@azure/servicefabric.ServiceFabricClient.disableNode'
      - '@azure/servicefabric.ServiceFabricClient.disableNode_1'
      - '@azure/servicefabric.ServiceFabricClient.disableNode_2'
      - '@azure/servicefabric.ServiceFabricClient.disablePartitionBackup'
      - '@azure/servicefabric.ServiceFabricClient.disablePartitionBackup_1'
      - '@azure/servicefabric.ServiceFabricClient.disablePartitionBackup_2'
      - '@azure/servicefabric.ServiceFabricClient.disableServiceBackup'
      - '@azure/servicefabric.ServiceFabricClient.disableServiceBackup_1'
      - '@azure/servicefabric.ServiceFabricClient.disableServiceBackup_2'
      - '@azure/servicefabric.ServiceFabricClient.enableApplicationBackup'
      - '@azure/servicefabric.ServiceFabricClient.enableApplicationBackup_1'
      - '@azure/servicefabric.ServiceFabricClient.enableApplicationBackup_2'
      - '@azure/servicefabric.ServiceFabricClient.enableNode'
      - '@azure/servicefabric.ServiceFabricClient.enableNode_1'
      - '@azure/servicefabric.ServiceFabricClient.enableNode_2'
      - '@azure/servicefabric.ServiceFabricClient.enablePartitionBackup'
      - '@azure/servicefabric.ServiceFabricClient.enablePartitionBackup_1'
      - '@azure/servicefabric.ServiceFabricClient.enablePartitionBackup_2'
      - '@azure/servicefabric.ServiceFabricClient.enableServiceBackup'
      - '@azure/servicefabric.ServiceFabricClient.enableServiceBackup_1'
      - '@azure/servicefabric.ServiceFabricClient.enableServiceBackup_2'
      - '@azure/servicefabric.ServiceFabricClient.forceApproveRepairTask'
      - '@azure/servicefabric.ServiceFabricClient.forceApproveRepairTask_2'
      - '@azure/servicefabric.ServiceFabricClient.forceApproveRepairTask_1'
      - '@azure/servicefabric.ServiceFabricClient.getAadMetadata'
      - '@azure/servicefabric.ServiceFabricClient.getAadMetadata_1'
      - '@azure/servicefabric.ServiceFabricClient.getAadMetadata_2'
      - '@azure/servicefabric.ServiceFabricClient.getAllEntitiesBackedUpByPolicy'
      - >-
        @azure/servicefabric.ServiceFabricClient.getAllEntitiesBackedUpByPolicy_1
      - >-
        @azure/servicefabric.ServiceFabricClient.getAllEntitiesBackedUpByPolicy_2
      - >-
        @azure/servicefabric.ServiceFabricClient.getApplicationBackupConfigurationInfo
      - >-
        @azure/servicefabric.ServiceFabricClient.getApplicationBackupConfigurationInfo_1
      - >-
        @azure/servicefabric.ServiceFabricClient.getApplicationBackupConfigurationInfo_2
      - '@azure/servicefabric.ServiceFabricClient.getApplicationBackupList'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationBackupList_1'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationBackupList_2'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationEventList'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationEventList_1'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationEventList_2'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationHealth'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationHealth_1'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationHealth_2'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationHealthUsingPolicy'
      - >-
        @azure/servicefabric.ServiceFabricClient.getApplicationHealthUsingPolicy_1
      - >-
        @azure/servicefabric.ServiceFabricClient.getApplicationHealthUsingPolicy_2
      - '@azure/servicefabric.ServiceFabricClient.getApplicationInfo'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationInfo_1'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationInfo_2'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationInfoList'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationInfoList_1'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationInfoList_2'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationLoadInfo'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationLoadInfo_1'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationLoadInfo_2'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationManifest'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationManifest_1'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationManifest_2'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationNameInfo'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationNameInfo_1'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationNameInfo_2'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationsEventList'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationsEventList_1'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationsEventList_2'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationTypeInfoList'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationTypeInfoList_1'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationTypeInfoList_2'
      - >-
        @azure/servicefabric.ServiceFabricClient.getApplicationTypeInfoListByName
      - >-
        @azure/servicefabric.ServiceFabricClient.getApplicationTypeInfoListByName_1
      - >-
        @azure/servicefabric.ServiceFabricClient.getApplicationTypeInfoListByName_2
      - '@azure/servicefabric.ServiceFabricClient.getApplicationUpgrade'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationUpgrade_1'
      - '@azure/servicefabric.ServiceFabricClient.getApplicationUpgrade_2'
      - '@azure/servicefabric.ServiceFabricClient.getBackupPolicyByName'
      - '@azure/servicefabric.ServiceFabricClient.getBackupPolicyByName_1'
      - '@azure/servicefabric.ServiceFabricClient.getBackupPolicyByName_2'
      - '@azure/servicefabric.ServiceFabricClient.getBackupPolicyList'
      - '@azure/servicefabric.ServiceFabricClient.getBackupPolicyList_1'
      - '@azure/servicefabric.ServiceFabricClient.getBackupPolicyList_2'
      - '@azure/servicefabric.ServiceFabricClient.getBackupsFromBackupLocation'
      - '@azure/servicefabric.ServiceFabricClient.getBackupsFromBackupLocation_1'
      - '@azure/servicefabric.ServiceFabricClient.getBackupsFromBackupLocation_2'
      - '@azure/servicefabric.ServiceFabricClient.getChaos'
      - '@azure/servicefabric.ServiceFabricClient.getChaos_1'
      - '@azure/servicefabric.ServiceFabricClient.getChaos_2'
      - '@azure/servicefabric.ServiceFabricClient.getChaosEvents'
      - '@azure/servicefabric.ServiceFabricClient.getChaosEvents_1'
      - '@azure/servicefabric.ServiceFabricClient.getChaosEvents_2'
      - '@azure/servicefabric.ServiceFabricClient.getChaosSchedule'
      - '@azure/servicefabric.ServiceFabricClient.getChaosSchedule_1'
      - '@azure/servicefabric.ServiceFabricClient.getChaosSchedule_2'
      - '@azure/servicefabric.ServiceFabricClient.getClusterConfiguration'
      - '@azure/servicefabric.ServiceFabricClient.getClusterConfiguration_1'
      - '@azure/servicefabric.ServiceFabricClient.getClusterConfiguration_2'
      - >-
        @azure/servicefabric.ServiceFabricClient.getClusterConfigurationUpgradeStatus
      - >-
        @azure/servicefabric.ServiceFabricClient.getClusterConfigurationUpgradeStatus_1
      - >-
        @azure/servicefabric.ServiceFabricClient.getClusterConfigurationUpgradeStatus_2
      - '@azure/servicefabric.ServiceFabricClient.getClusterEventList'
      - '@azure/servicefabric.ServiceFabricClient.getClusterEventList_1'
      - '@azure/servicefabric.ServiceFabricClient.getClusterEventList_2'
      - '@azure/servicefabric.ServiceFabricClient.getClusterHealth'
      - '@azure/servicefabric.ServiceFabricClient.getClusterHealth_1'
      - '@azure/servicefabric.ServiceFabricClient.getClusterHealth_2'
      - '@azure/servicefabric.ServiceFabricClient.getClusterHealthChunk'
      - '@azure/servicefabric.ServiceFabricClient.getClusterHealthChunk_1'
      - '@azure/servicefabric.ServiceFabricClient.getClusterHealthChunk_2'
      - >-
        @azure/servicefabric.ServiceFabricClient.getClusterHealthChunkUsingPolicyAndAdvancedFilters
      - >-
        @azure/servicefabric.ServiceFabricClient.getClusterHealthChunkUsingPolicyAndAdvancedFilters_1
      - >-
        @azure/servicefabric.ServiceFabricClient.getClusterHealthChunkUsingPolicyAndAdvancedFilters_2
      - '@azure/servicefabric.ServiceFabricClient.getClusterHealthUsingPolicy'
      - '@azure/servicefabric.ServiceFabricClient.getClusterHealthUsingPolicy_1'
      - '@azure/servicefabric.ServiceFabricClient.getClusterHealthUsingPolicy_2'
      - '@azure/servicefabric.ServiceFabricClient.getClusterLoad'
      - '@azure/servicefabric.ServiceFabricClient.getClusterLoad_1'
      - '@azure/servicefabric.ServiceFabricClient.getClusterLoad_2'
      - '@azure/servicefabric.ServiceFabricClient.getClusterManifest'
      - '@azure/servicefabric.ServiceFabricClient.getClusterManifest_1'
      - '@azure/servicefabric.ServiceFabricClient.getClusterManifest_2'
      - '@azure/servicefabric.ServiceFabricClient.getClusterUpgradeProgress'
      - '@azure/servicefabric.ServiceFabricClient.getClusterUpgradeProgress_1'
      - '@azure/servicefabric.ServiceFabricClient.getClusterUpgradeProgress_2'
      - '@azure/servicefabric.ServiceFabricClient.getClusterVersion'
      - '@azure/servicefabric.ServiceFabricClient.getClusterVersion_1'
      - '@azure/servicefabric.ServiceFabricClient.getClusterVersion_2'
      - '@azure/servicefabric.ServiceFabricClient.getComposeDeploymentStatus'
      - '@azure/servicefabric.ServiceFabricClient.getComposeDeploymentStatus_1'
      - '@azure/servicefabric.ServiceFabricClient.getComposeDeploymentStatus_2'
      - '@azure/servicefabric.ServiceFabricClient.getComposeDeploymentStatusList'
      - >-
        @azure/servicefabric.ServiceFabricClient.getComposeDeploymentStatusList_1
      - >-
        @azure/servicefabric.ServiceFabricClient.getComposeDeploymentStatusList_2
      - >-
        @azure/servicefabric.ServiceFabricClient.getComposeDeploymentUpgradeProgress
      - >-
        @azure/servicefabric.ServiceFabricClient.getComposeDeploymentUpgradeProgress_1
      - >-
        @azure/servicefabric.ServiceFabricClient.getComposeDeploymentUpgradeProgress_2
      - '@azure/servicefabric.ServiceFabricClient.getConfigurationOverrides'
      - '@azure/servicefabric.ServiceFabricClient.getConfigurationOverrides_1'
      - '@azure/servicefabric.ServiceFabricClient.getConfigurationOverrides_2'
      - '@azure/servicefabric.ServiceFabricClient.getContainerLogsDeployedOnNode'
      - >-
        @azure/servicefabric.ServiceFabricClient.getContainerLogsDeployedOnNode_1
      - >-
        @azure/servicefabric.ServiceFabricClient.getContainerLogsDeployedOnNode_2
      - '@azure/servicefabric.ServiceFabricClient.getContainersEventList'
      - '@azure/servicefabric.ServiceFabricClient.getContainersEventList_1'
      - '@azure/servicefabric.ServiceFabricClient.getContainersEventList_2'
      - '@azure/servicefabric.ServiceFabricClient.getCorrelatedEventList'
      - '@azure/servicefabric.ServiceFabricClient.getCorrelatedEventList_1'
      - '@azure/servicefabric.ServiceFabricClient.getCorrelatedEventList_2'
      - '@azure/servicefabric.ServiceFabricClient.getDataLossProgress'
      - '@azure/servicefabric.ServiceFabricClient.getDataLossProgress_1'
      - '@azure/servicefabric.ServiceFabricClient.getDataLossProgress_2'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationHealth'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationHealth_1'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationHealth_2'
      - >-
        @azure/servicefabric.ServiceFabricClient.getDeployedApplicationHealthUsingPolicy
      - >-
        @azure/servicefabric.ServiceFabricClient.getDeployedApplicationHealthUsingPolicy_1
      - >-
        @azure/servicefabric.ServiceFabricClient.getDeployedApplicationHealthUsingPolicy_2
      - '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationInfo'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationInfo_1'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationInfo_2'
      - '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationInfoList'
      - >-
        @azure/servicefabric.ServiceFabricClient.getDeployedApplicationInfoList_1
      - >-
        @azure/servicefabric.ServiceFabricClient.getDeployedApplicationInfoList_2
      - '@azure/servicefabric.ServiceFabricClient.getDeployedCodePackageInfoList'
      - >-
        @azure/servicefabric.ServiceFabricClient.getDeployedCodePackageInfoList_1
      - >-
        @azure/servicefabric.ServiceFabricClient.getDeployedCodePackageInfoList_2
      - '@azure/servicefabric.ServiceFabricClient.getDeployedServicePackageHealth'
      - >-
        @azure/servicefabric.ServiceFabricClient.getDeployedServicePackageHealth_1
      - >-
        @azure/servicefabric.ServiceFabricClient.getDeployedServicePackageHealth_2
      - >-
        @azure/servicefabric.ServiceFabricClient.getDeployedServicePackageHealthUsingPolicy
      - >-
        @azure/servicefabric.ServiceFabricClient.getDeployedServicePackageHealthUsingPolicy_1
      - >-
        @azure/servicefabric.ServiceFabricClient.getDeployedServicePackageHealthUsingPolicy_2
      - >-
        @azure/servicefabric.ServiceFabricClient.getDeployedServicePackageInfoList
      - >-
        @azure/servicefabric.ServiceFabricClient.getDeployedServicePackageInfoList_1
      - >-
        @azure/servicefabric.ServiceFabricClient.getDeployedServicePackageInfoList_2
      - >-
        @azure/servicefabric.ServiceFabricClient.getDeployedServicePackageInfoListByName
      - >-
        @azure/servicefabric.ServiceFabricClient.getDeployedServicePackageInfoListByName_1
      - >-
        @azure/servicefabric.ServiceFabricClient.getDeployedServicePackageInfoListByName_2
      - >-
        @azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaDetailInfo
      - >-
        @azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaDetailInfo_1
      - >-
        @azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaDetailInfo_2
      - >-
        @azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaDetailInfoByPartitionId
      - >-
        @azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaDetailInfoByPartitionId_1
      - >-
        @azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaDetailInfoByPartitionId_2
      - >-
        @azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaInfoList
      - >-
        @azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaInfoList_1
      - >-
        @azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaInfoList_2
      - >-
        @azure/servicefabric.ServiceFabricClient.getDeployedServiceTypeInfoByName
      - >-
        @azure/servicefabric.ServiceFabricClient.getDeployedServiceTypeInfoByName_1
      - >-
        @azure/servicefabric.ServiceFabricClient.getDeployedServiceTypeInfoByName_2
      - '@azure/servicefabric.ServiceFabricClient.getDeployedServiceTypeInfoList'
      - >-
        @azure/servicefabric.ServiceFabricClient.getDeployedServiceTypeInfoList_1
      - >-
        @azure/servicefabric.ServiceFabricClient.getDeployedServiceTypeInfoList_2
      - '@azure/servicefabric.ServiceFabricClient.getFaultOperationList'
      - '@azure/servicefabric.ServiceFabricClient.getFaultOperationList_1'
      - '@azure/servicefabric.ServiceFabricClient.getFaultOperationList_2'
      - '@azure/servicefabric.ServiceFabricClient.getImageStoreContent'
      - '@azure/servicefabric.ServiceFabricClient.getImageStoreContent_1'
      - '@azure/servicefabric.ServiceFabricClient.getImageStoreContent_2'
      - '@azure/servicefabric.ServiceFabricClient.getImageStoreFolderSize'
      - '@azure/servicefabric.ServiceFabricClient.getImageStoreFolderSize_1'
      - '@azure/servicefabric.ServiceFabricClient.getImageStoreFolderSize_2'
      - '@azure/servicefabric.ServiceFabricClient.getImageStoreInfo'
      - '@azure/servicefabric.ServiceFabricClient.getImageStoreInfo_1'
      - '@azure/servicefabric.ServiceFabricClient.getImageStoreInfo_2'
      - '@azure/servicefabric.ServiceFabricClient.getImageStoreRootContent'
      - '@azure/servicefabric.ServiceFabricClient.getImageStoreRootContent_1'
      - '@azure/servicefabric.ServiceFabricClient.getImageStoreRootContent_2'
      - '@azure/servicefabric.ServiceFabricClient.getImageStoreRootFolderSize'
      - '@azure/servicefabric.ServiceFabricClient.getImageStoreRootFolderSize_1'
      - '@azure/servicefabric.ServiceFabricClient.getImageStoreRootFolderSize_2'
      - '@azure/servicefabric.ServiceFabricClient.getImageStoreUploadSessionById'
      - >-
        @azure/servicefabric.ServiceFabricClient.getImageStoreUploadSessionById_1
      - >-
        @azure/servicefabric.ServiceFabricClient.getImageStoreUploadSessionById_2
      - >-
        @azure/servicefabric.ServiceFabricClient.getImageStoreUploadSessionByPath
      - >-
        @azure/servicefabric.ServiceFabricClient.getImageStoreUploadSessionByPath_1
      - >-
        @azure/servicefabric.ServiceFabricClient.getImageStoreUploadSessionByPath_2
      - '@azure/servicefabric.ServiceFabricClient.getNameExistsInfo'
      - '@azure/servicefabric.ServiceFabricClient.getNameExistsInfo_1'
      - '@azure/servicefabric.ServiceFabricClient.getNameExistsInfo_2'
      - '@azure/servicefabric.ServiceFabricClient.getNodeEventList'
      - '@azure/servicefabric.ServiceFabricClient.getNodeEventList_1'
      - '@azure/servicefabric.ServiceFabricClient.getNodeEventList_2'
      - '@azure/servicefabric.ServiceFabricClient.getNodeHealth'
      - '@azure/servicefabric.ServiceFabricClient.getNodeHealth_1'
      - '@azure/servicefabric.ServiceFabricClient.getNodeHealth_2'
      - '@azure/servicefabric.ServiceFabricClient.getNodeHealthUsingPolicy'
      - '@azure/servicefabric.ServiceFabricClient.getNodeHealthUsingPolicy_1'
      - '@azure/servicefabric.ServiceFabricClient.getNodeHealthUsingPolicy_2'
      - '@azure/servicefabric.ServiceFabricClient.getNodeInfo'
      - '@azure/servicefabric.ServiceFabricClient.getNodeInfo_1'
      - '@azure/servicefabric.ServiceFabricClient.getNodeInfo_2'
      - '@azure/servicefabric.ServiceFabricClient.getNodeInfoList'
      - '@azure/servicefabric.ServiceFabricClient.getNodeInfoList_1'
      - '@azure/servicefabric.ServiceFabricClient.getNodeInfoList_2'
      - '@azure/servicefabric.ServiceFabricClient.getNodeLoadInfo'
      - '@azure/servicefabric.ServiceFabricClient.getNodeLoadInfo_1'
      - '@azure/servicefabric.ServiceFabricClient.getNodeLoadInfo_2'
      - '@azure/servicefabric.ServiceFabricClient.getNodesEventList'
      - '@azure/servicefabric.ServiceFabricClient.getNodesEventList_1'
      - '@azure/servicefabric.ServiceFabricClient.getNodesEventList_2'
      - '@azure/servicefabric.ServiceFabricClient.getNodeTransitionProgress'
      - '@azure/servicefabric.ServiceFabricClient.getNodeTransitionProgress_1'
      - '@azure/servicefabric.ServiceFabricClient.getNodeTransitionProgress_2'
      - >-
        @azure/servicefabric.ServiceFabricClient.getPartitionBackupConfigurationInfo
      - >-
        @azure/servicefabric.ServiceFabricClient.getPartitionBackupConfigurationInfo_1
      - >-
        @azure/servicefabric.ServiceFabricClient.getPartitionBackupConfigurationInfo_2
      - '@azure/servicefabric.ServiceFabricClient.getPartitionBackupList'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionBackupList_1'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionBackupList_2'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionBackupProgress'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionBackupProgress_1'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionBackupProgress_2'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionEventList'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionEventList_1'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionEventList_2'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionHealth'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionHealth_1'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionHealth_2'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionHealthUsingPolicy'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionHealthUsingPolicy_1'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionHealthUsingPolicy_2'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionInfo'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionInfo_1'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionInfo_2'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionInfoList'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionInfoList_1'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionInfoList_2'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionLoadInformation'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionLoadInformation_1'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionLoadInformation_2'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionReplicaEventList'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionReplicaEventList_1'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionReplicaEventList_2'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionReplicasEventList'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionReplicasEventList_1'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionReplicasEventList_2'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionRestartProgress'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionRestartProgress_1'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionRestartProgress_2'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionRestoreProgress'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionRestoreProgress_1'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionRestoreProgress_2'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionsEventList'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionsEventList_1'
      - '@azure/servicefabric.ServiceFabricClient.getPartitionsEventList_2'
      - '@azure/servicefabric.ServiceFabricClient.getPropertyInfo'
      - '@azure/servicefabric.ServiceFabricClient.getPropertyInfo_1'
      - '@azure/servicefabric.ServiceFabricClient.getPropertyInfo_2'
      - '@azure/servicefabric.ServiceFabricClient.getPropertyInfoList'
      - '@azure/servicefabric.ServiceFabricClient.getPropertyInfoList_1'
      - '@azure/servicefabric.ServiceFabricClient.getPropertyInfoList_2'
      - >-
        @azure/servicefabric.ServiceFabricClient.getProvisionedFabricCodeVersionInfoList
      - >-
        @azure/servicefabric.ServiceFabricClient.getProvisionedFabricCodeVersionInfoList_1
      - >-
        @azure/servicefabric.ServiceFabricClient.getProvisionedFabricCodeVersionInfoList_2
      - >-
        @azure/servicefabric.ServiceFabricClient.getProvisionedFabricConfigVersionInfoList
      - >-
        @azure/servicefabric.ServiceFabricClient.getProvisionedFabricConfigVersionInfoList_1
      - >-
        @azure/servicefabric.ServiceFabricClient.getProvisionedFabricConfigVersionInfoList_2
      - '@azure/servicefabric.ServiceFabricClient.getQuorumLossProgress'
      - '@azure/servicefabric.ServiceFabricClient.getQuorumLossProgress_1'
      - '@azure/servicefabric.ServiceFabricClient.getQuorumLossProgress_2'
      - '@azure/servicefabric.ServiceFabricClient.getRepairTaskList'
      - '@azure/servicefabric.ServiceFabricClient.getRepairTaskList_1'
      - '@azure/servicefabric.ServiceFabricClient.getRepairTaskList_2'
      - '@azure/servicefabric.ServiceFabricClient.getReplicaHealth'
      - '@azure/servicefabric.ServiceFabricClient.getReplicaHealth_1'
      - '@azure/servicefabric.ServiceFabricClient.getReplicaHealth_2'
      - '@azure/servicefabric.ServiceFabricClient.getReplicaHealthUsingPolicy'
      - '@azure/servicefabric.ServiceFabricClient.getReplicaHealthUsingPolicy_1'
      - '@azure/servicefabric.ServiceFabricClient.getReplicaHealthUsingPolicy_2'
      - '@azure/servicefabric.ServiceFabricClient.getReplicaInfo'
      - '@azure/servicefabric.ServiceFabricClient.getReplicaInfo_1'
      - '@azure/servicefabric.ServiceFabricClient.getReplicaInfo_2'
      - '@azure/servicefabric.ServiceFabricClient.getReplicaInfoList'
      - '@azure/servicefabric.ServiceFabricClient.getReplicaInfoList_1'
      - '@azure/servicefabric.ServiceFabricClient.getReplicaInfoList_2'
      - >-
        @azure/servicefabric.ServiceFabricClient.getServiceBackupConfigurationInfo
      - >-
        @azure/servicefabric.ServiceFabricClient.getServiceBackupConfigurationInfo_1
      - >-
        @azure/servicefabric.ServiceFabricClient.getServiceBackupConfigurationInfo_2
      - '@azure/servicefabric.ServiceFabricClient.getServiceBackupList'
      - '@azure/servicefabric.ServiceFabricClient.getServiceBackupList_1'
      - '@azure/servicefabric.ServiceFabricClient.getServiceBackupList_2'
      - '@azure/servicefabric.ServiceFabricClient.getServiceDescription'
      - '@azure/servicefabric.ServiceFabricClient.getServiceDescription_1'
      - '@azure/servicefabric.ServiceFabricClient.getServiceDescription_2'
      - '@azure/servicefabric.ServiceFabricClient.getServiceEventList'
      - '@azure/servicefabric.ServiceFabricClient.getServiceEventList_1'
      - '@azure/servicefabric.ServiceFabricClient.getServiceEventList_2'
      - '@azure/servicefabric.ServiceFabricClient.getServiceHealth'
      - '@azure/servicefabric.ServiceFabricClient.getServiceHealth_1'
      - '@azure/servicefabric.ServiceFabricClient.getServiceHealth_2'
      - '@azure/servicefabric.ServiceFabricClient.getServiceHealthUsingPolicy'
      - '@azure/servicefabric.ServiceFabricClient.getServiceHealthUsingPolicy_1'
      - '@azure/servicefabric.ServiceFabricClient.getServiceHealthUsingPolicy_2'
      - '@azure/servicefabric.ServiceFabricClient.getServiceInfo'
      - '@azure/servicefabric.ServiceFabricClient.getServiceInfo_1'
      - '@azure/servicefabric.ServiceFabricClient.getServiceInfo_2'
      - '@azure/servicefabric.ServiceFabricClient.getServiceInfoList'
      - '@azure/servicefabric.ServiceFabricClient.getServiceInfoList_1'
      - '@azure/servicefabric.ServiceFabricClient.getServiceInfoList_2'
      - '@azure/servicefabric.ServiceFabricClient.getServiceManifest'
      - '@azure/servicefabric.ServiceFabricClient.getServiceManifest_1'
      - '@azure/servicefabric.ServiceFabricClient.getServiceManifest_2'
      - '@azure/servicefabric.ServiceFabricClient.getServiceNameInfo'
      - '@azure/servicefabric.ServiceFabricClient.getServiceNameInfo_1'
      - '@azure/servicefabric.ServiceFabricClient.getServiceNameInfo_2'
      - '@azure/servicefabric.ServiceFabricClient.getServicesEventList'
      - '@azure/servicefabric.ServiceFabricClient.getServicesEventList_1'
      - '@azure/servicefabric.ServiceFabricClient.getServicesEventList_2'
      - '@azure/servicefabric.ServiceFabricClient.getServiceTypeInfoByName'
      - '@azure/servicefabric.ServiceFabricClient.getServiceTypeInfoByName_1'
      - '@azure/servicefabric.ServiceFabricClient.getServiceTypeInfoByName_2'
      - '@azure/servicefabric.ServiceFabricClient.getServiceTypeInfoList'
      - '@azure/servicefabric.ServiceFabricClient.getServiceTypeInfoList_1'
      - '@azure/servicefabric.ServiceFabricClient.getServiceTypeInfoList_2'
      - '@azure/servicefabric.ServiceFabricClient.getSubNameInfoList'
      - '@azure/servicefabric.ServiceFabricClient.getSubNameInfoList_1'
      - '@azure/servicefabric.ServiceFabricClient.getSubNameInfoList_2'
      - '@azure/servicefabric.ServiceFabricClient.getUnplacedReplicaInformation'
      - '@azure/servicefabric.ServiceFabricClient.getUnplacedReplicaInformation_1'
      - '@azure/servicefabric.ServiceFabricClient.getUnplacedReplicaInformation_2'
      - >-
        @azure/servicefabric.ServiceFabricClient.getUpgradeOrchestrationServiceState
      - >-
        @azure/servicefabric.ServiceFabricClient.getUpgradeOrchestrationServiceState_1
      - >-
        @azure/servicefabric.ServiceFabricClient.getUpgradeOrchestrationServiceState_2
      - '@azure/servicefabric.ServiceFabricClient.invokeContainerApi'
      - '@azure/servicefabric.ServiceFabricClient.invokeContainerApi_1'
      - '@azure/servicefabric.ServiceFabricClient.invokeContainerApi_2'
      - '@azure/servicefabric.ServiceFabricClient.invokeInfrastructureCommand'
      - '@azure/servicefabric.ServiceFabricClient.invokeInfrastructureCommand_1'
      - '@azure/servicefabric.ServiceFabricClient.invokeInfrastructureCommand_2'
      - '@azure/servicefabric.ServiceFabricClient.invokeInfrastructureQuery'
      - '@azure/servicefabric.ServiceFabricClient.invokeInfrastructureQuery_1'
      - '@azure/servicefabric.ServiceFabricClient.invokeInfrastructureQuery_2'
      - '@azure/servicefabric.ServiceFabricClient.meshApplication'
      - '@azure/servicefabric.ServiceFabricClient.meshCodePackage'
      - '@azure/servicefabric.ServiceFabricClient.meshGateway'
      - '@azure/servicefabric.ServiceFabricClient.meshNetwork'
      - '@azure/servicefabric.ServiceFabricClient.meshSecret'
      - '@azure/servicefabric.ServiceFabricClient.meshSecretValue'
      - '@azure/servicefabric.ServiceFabricClient.meshService'
      - '@azure/servicefabric.ServiceFabricClient.meshServiceReplica'
      - '@azure/servicefabric.ServiceFabricClient.meshVolume'
      - '@azure/servicefabric.ServiceFabricClient.movePrimaryReplica'
      - '@azure/servicefabric.ServiceFabricClient.movePrimaryReplica_1'
      - '@azure/servicefabric.ServiceFabricClient.movePrimaryReplica_2'
      - '@azure/servicefabric.ServiceFabricClient.moveSecondaryReplica'
      - '@azure/servicefabric.ServiceFabricClient.moveSecondaryReplica_1'
      - '@azure/servicefabric.ServiceFabricClient.moveSecondaryReplica_2'
      - '@azure/servicefabric.ServiceFabricClient.postChaosSchedule'
      - '@azure/servicefabric.ServiceFabricClient.postChaosSchedule_1'
      - '@azure/servicefabric.ServiceFabricClient.postChaosSchedule_2'
      - '@azure/servicefabric.ServiceFabricClient.provisionApplicationType'
      - '@azure/servicefabric.ServiceFabricClient.provisionApplicationType_1'
      - '@azure/servicefabric.ServiceFabricClient.provisionApplicationType_2'
      - '@azure/servicefabric.ServiceFabricClient.provisionCluster'
      - '@azure/servicefabric.ServiceFabricClient.provisionCluster_1'
      - '@azure/servicefabric.ServiceFabricClient.provisionCluster_2'
      - '@azure/servicefabric.ServiceFabricClient.putProperty'
      - '@azure/servicefabric.ServiceFabricClient.putProperty_1'
      - '@azure/servicefabric.ServiceFabricClient.putProperty_2'
      - '@azure/servicefabric.ServiceFabricClient.recoverAllPartitions'
      - '@azure/servicefabric.ServiceFabricClient.recoverAllPartitions_1'
      - '@azure/servicefabric.ServiceFabricClient.recoverAllPartitions_2'
      - '@azure/servicefabric.ServiceFabricClient.recoverPartition'
      - '@azure/servicefabric.ServiceFabricClient.recoverPartition_1'
      - '@azure/servicefabric.ServiceFabricClient.recoverPartition_2'
      - '@azure/servicefabric.ServiceFabricClient.recoverServicePartitions'
      - '@azure/servicefabric.ServiceFabricClient.recoverServicePartitions_1'
      - '@azure/servicefabric.ServiceFabricClient.recoverServicePartitions_2'
      - '@azure/servicefabric.ServiceFabricClient.recoverSystemPartitions'
      - '@azure/servicefabric.ServiceFabricClient.recoverSystemPartitions_1'
      - '@azure/servicefabric.ServiceFabricClient.recoverSystemPartitions_2'
      - '@azure/servicefabric.ServiceFabricClient.removeComposeDeployment'
      - '@azure/servicefabric.ServiceFabricClient.removeComposeDeployment_1'
      - '@azure/servicefabric.ServiceFabricClient.removeComposeDeployment_2'
      - '@azure/servicefabric.ServiceFabricClient.removeConfigurationOverrides'
      - '@azure/servicefabric.ServiceFabricClient.removeConfigurationOverrides_1'
      - '@azure/servicefabric.ServiceFabricClient.removeConfigurationOverrides_2'
      - '@azure/servicefabric.ServiceFabricClient.removeNodeState'
      - '@azure/servicefabric.ServiceFabricClient.removeNodeState_1'
      - '@azure/servicefabric.ServiceFabricClient.removeNodeState_2'
      - '@azure/servicefabric.ServiceFabricClient.removeReplica'
      - '@azure/servicefabric.ServiceFabricClient.removeReplica_1'
      - '@azure/servicefabric.ServiceFabricClient.removeReplica_2'
      - '@azure/servicefabric.ServiceFabricClient.reportApplicationHealth'
      - '@azure/servicefabric.ServiceFabricClient.reportApplicationHealth_1'
      - '@azure/servicefabric.ServiceFabricClient.reportApplicationHealth_2'
      - '@azure/servicefabric.ServiceFabricClient.reportClusterHealth'
      - '@azure/servicefabric.ServiceFabricClient.reportClusterHealth_1'
      - '@azure/servicefabric.ServiceFabricClient.reportClusterHealth_2'
      - '@azure/servicefabric.ServiceFabricClient.reportDeployedApplicationHealth'
      - >-
        @azure/servicefabric.ServiceFabricClient.reportDeployedApplicationHealth_1
      - >-
        @azure/servicefabric.ServiceFabricClient.reportDeployedApplicationHealth_2
      - >-
        @azure/servicefabric.ServiceFabricClient.reportDeployedServicePackageHealth
      - >-
        @azure/servicefabric.ServiceFabricClient.reportDeployedServicePackageHealth_1
      - >-
        @azure/servicefabric.ServiceFabricClient.reportDeployedServicePackageHealth_2
      - '@azure/servicefabric.ServiceFabricClient.reportNodeHealth'
      - '@azure/servicefabric.ServiceFabricClient.reportNodeHealth_1'
      - '@azure/servicefabric.ServiceFabricClient.reportNodeHealth_2'
      - '@azure/servicefabric.ServiceFabricClient.reportPartitionHealth'
      - '@azure/servicefabric.ServiceFabricClient.reportPartitionHealth_1'
      - '@azure/servicefabric.ServiceFabricClient.reportPartitionHealth_2'
      - '@azure/servicefabric.ServiceFabricClient.reportReplicaHealth'
      - '@azure/servicefabric.ServiceFabricClient.reportReplicaHealth_1'
      - '@azure/servicefabric.ServiceFabricClient.reportReplicaHealth_2'
      - '@azure/servicefabric.ServiceFabricClient.reportServiceHealth'
      - '@azure/servicefabric.ServiceFabricClient.reportServiceHealth_1'
      - '@azure/servicefabric.ServiceFabricClient.reportServiceHealth_2'
      - '@azure/servicefabric.ServiceFabricClient.resetPartitionLoad'
      - '@azure/servicefabric.ServiceFabricClient.resetPartitionLoad_1'
      - '@azure/servicefabric.ServiceFabricClient.resetPartitionLoad_2'
      - '@azure/servicefabric.ServiceFabricClient.resolveService'
      - '@azure/servicefabric.ServiceFabricClient.resolveService_1'
      - '@azure/servicefabric.ServiceFabricClient.resolveService_2'
      - '@azure/servicefabric.ServiceFabricClient.restartDeployedCodePackage'
      - '@azure/servicefabric.ServiceFabricClient.restartDeployedCodePackage_1'
      - '@azure/servicefabric.ServiceFabricClient.restartDeployedCodePackage_2'
      - '@azure/servicefabric.ServiceFabricClient.restartNode'
      - '@azure/servicefabric.ServiceFabricClient.restartNode_1'
      - '@azure/servicefabric.ServiceFabricClient.restartNode_2'
      - '@azure/servicefabric.ServiceFabricClient.restartReplica'
      - '@azure/servicefabric.ServiceFabricClient.restartReplica_1'
      - '@azure/servicefabric.ServiceFabricClient.restartReplica_2'
      - '@azure/servicefabric.ServiceFabricClient.restorePartition'
      - '@azure/servicefabric.ServiceFabricClient.restorePartition_1'
      - '@azure/servicefabric.ServiceFabricClient.restorePartition_2'
      - '@azure/servicefabric.ServiceFabricClient.resumeApplicationBackup'
      - '@azure/servicefabric.ServiceFabricClient.resumeApplicationBackup_1'
      - '@azure/servicefabric.ServiceFabricClient.resumeApplicationBackup_2'
      - '@azure/servicefabric.ServiceFabricClient.resumeApplicationUpgrade'
      - '@azure/servicefabric.ServiceFabricClient.resumeApplicationUpgrade_1'
      - '@azure/servicefabric.ServiceFabricClient.resumeApplicationUpgrade_2'
      - '@azure/servicefabric.ServiceFabricClient.resumeClusterUpgrade'
      - '@azure/servicefabric.ServiceFabricClient.resumeClusterUpgrade_1'
      - '@azure/servicefabric.ServiceFabricClient.resumeClusterUpgrade_2'
      - '@azure/servicefabric.ServiceFabricClient.resumePartitionBackup'
      - '@azure/servicefabric.ServiceFabricClient.resumePartitionBackup_1'
      - '@azure/servicefabric.ServiceFabricClient.resumePartitionBackup_2'
      - '@azure/servicefabric.ServiceFabricClient.resumeServiceBackup'
      - '@azure/servicefabric.ServiceFabricClient.resumeServiceBackup_1'
      - '@azure/servicefabric.ServiceFabricClient.resumeServiceBackup_2'
      - '@azure/servicefabric.ServiceFabricClient.rollbackApplicationUpgrade'
      - '@azure/servicefabric.ServiceFabricClient.rollbackApplicationUpgrade_1'
      - '@azure/servicefabric.ServiceFabricClient.rollbackApplicationUpgrade_2'
      - '@azure/servicefabric.ServiceFabricClient.rollbackClusterUpgrade'
      - '@azure/servicefabric.ServiceFabricClient.rollbackClusterUpgrade_1'
      - '@azure/servicefabric.ServiceFabricClient.rollbackClusterUpgrade_2'
      - '@azure/servicefabric.ServiceFabricClient.sendOperationRequest'
      - '@azure/servicefabric.ServiceFabricClient.sendRequest'
      - '@azure/servicefabric.ServiceFabricClient.constructor'
      - >-
        @azure/servicefabric.ServiceFabricClient.setUpgradeOrchestrationServiceState
      - >-
        @azure/servicefabric.ServiceFabricClient.setUpgradeOrchestrationServiceState_1
      - >-
        @azure/servicefabric.ServiceFabricClient.setUpgradeOrchestrationServiceState_2
      - '@azure/servicefabric.ServiceFabricClient.startApplicationUpgrade'
      - '@azure/servicefabric.ServiceFabricClient.startApplicationUpgrade_1'
      - '@azure/servicefabric.ServiceFabricClient.startApplicationUpgrade_2'
      - '@azure/servicefabric.ServiceFabricClient.startChaos'
      - '@azure/servicefabric.ServiceFabricClient.startChaos_1'
      - '@azure/servicefabric.ServiceFabricClient.startChaos_2'
      - >-
        @azure/servicefabric.ServiceFabricClient.startClusterConfigurationUpgrade
      - >-
        @azure/servicefabric.ServiceFabricClient.startClusterConfigurationUpgrade_1
      - >-
        @azure/servicefabric.ServiceFabricClient.startClusterConfigurationUpgrade_2
      - '@azure/servicefabric.ServiceFabricClient.startClusterUpgrade'
      - '@azure/servicefabric.ServiceFabricClient.startClusterUpgrade_1'
      - '@azure/servicefabric.ServiceFabricClient.startClusterUpgrade_2'
      - '@azure/servicefabric.ServiceFabricClient.startComposeDeploymentUpgrade'
      - '@azure/servicefabric.ServiceFabricClient.startComposeDeploymentUpgrade_1'
      - '@azure/servicefabric.ServiceFabricClient.startComposeDeploymentUpgrade_2'
      - '@azure/servicefabric.ServiceFabricClient.startDataLoss'
      - '@azure/servicefabric.ServiceFabricClient.startDataLoss_1'
      - '@azure/servicefabric.ServiceFabricClient.startDataLoss_2'
      - '@azure/servicefabric.ServiceFabricClient.startNodeTransition'
      - '@azure/servicefabric.ServiceFabricClient.startNodeTransition_1'
      - '@azure/servicefabric.ServiceFabricClient.startNodeTransition_2'
      - '@azure/servicefabric.ServiceFabricClient.startPartitionRestart'
      - '@azure/servicefabric.ServiceFabricClient.startPartitionRestart_1'
      - '@azure/servicefabric.ServiceFabricClient.startPartitionRestart_2'
      - '@azure/servicefabric.ServiceFabricClient.startQuorumLoss'
      - '@azure/servicefabric.ServiceFabricClient.startQuorumLoss_1'
      - '@azure/servicefabric.ServiceFabricClient.startQuorumLoss_2'
      - >-
        @azure/servicefabric.ServiceFabricClient.startRollbackComposeDeploymentUpgrade
      - >-
        @azure/servicefabric.ServiceFabricClient.startRollbackComposeDeploymentUpgrade_1
      - >-
        @azure/servicefabric.ServiceFabricClient.startRollbackComposeDeploymentUpgrade_2
      - '@azure/servicefabric.ServiceFabricClient.stopChaos'
      - '@azure/servicefabric.ServiceFabricClient.stopChaos_1'
      - '@azure/servicefabric.ServiceFabricClient.stopChaos_2'
      - '@azure/servicefabric.ServiceFabricClient.submitPropertyBatch'
      - '@azure/servicefabric.ServiceFabricClient.submitPropertyBatch_1'
      - '@azure/servicefabric.ServiceFabricClient.submitPropertyBatch_2'
      - '@azure/servicefabric.ServiceFabricClient.suspendApplicationBackup'
      - '@azure/servicefabric.ServiceFabricClient.suspendApplicationBackup_1'
      - '@azure/servicefabric.ServiceFabricClient.suspendApplicationBackup_2'
      - '@azure/servicefabric.ServiceFabricClient.suspendPartitionBackup'
      - '@azure/servicefabric.ServiceFabricClient.suspendPartitionBackup_1'
      - '@azure/servicefabric.ServiceFabricClient.suspendPartitionBackup_2'
      - '@azure/servicefabric.ServiceFabricClient.suspendServiceBackup'
      - '@azure/servicefabric.ServiceFabricClient.suspendServiceBackup_1'
      - '@azure/servicefabric.ServiceFabricClient.suspendServiceBackup_2'
      - >-
        @azure/servicefabric.ServiceFabricClient.toggleVerboseServicePlacementHealthReporting
      - >-
        @azure/servicefabric.ServiceFabricClient.toggleVerboseServicePlacementHealthReporting_1
      - >-
        @azure/servicefabric.ServiceFabricClient.toggleVerboseServicePlacementHealthReporting_2
      - '@azure/servicefabric.ServiceFabricClient.unprovisionApplicationType'
      - '@azure/servicefabric.ServiceFabricClient.unprovisionApplicationType_1'
      - '@azure/servicefabric.ServiceFabricClient.unprovisionApplicationType_2'
      - '@azure/servicefabric.ServiceFabricClient.unprovisionCluster'
      - '@azure/servicefabric.ServiceFabricClient.unprovisionCluster_1'
      - '@azure/servicefabric.ServiceFabricClient.unprovisionCluster_2'
      - '@azure/servicefabric.ServiceFabricClient.updateApplicationUpgrade'
      - '@azure/servicefabric.ServiceFabricClient.updateApplicationUpgrade_1'
      - '@azure/servicefabric.ServiceFabricClient.updateApplicationUpgrade_2'
      - '@azure/servicefabric.ServiceFabricClient.updateBackupPolicy'
      - '@azure/servicefabric.ServiceFabricClient.updateBackupPolicy_1'
      - '@azure/servicefabric.ServiceFabricClient.updateBackupPolicy_2'
      - '@azure/servicefabric.ServiceFabricClient.updateClusterUpgrade'
      - '@azure/servicefabric.ServiceFabricClient.updateClusterUpgrade_1'
      - '@azure/servicefabric.ServiceFabricClient.updateClusterUpgrade_2'
      - '@azure/servicefabric.ServiceFabricClient.updateRepairExecutionState'
      - '@azure/servicefabric.ServiceFabricClient.updateRepairExecutionState_2'
      - '@azure/servicefabric.ServiceFabricClient.updateRepairExecutionState_1'
      - '@azure/servicefabric.ServiceFabricClient.updateRepairTaskHealthPolicy'
      - '@azure/servicefabric.ServiceFabricClient.updateRepairTaskHealthPolicy_2'
      - '@azure/servicefabric.ServiceFabricClient.updateRepairTaskHealthPolicy_1'
      - '@azure/servicefabric.ServiceFabricClient.updateService'
      - '@azure/servicefabric.ServiceFabricClient.updateService_1'
      - '@azure/servicefabric.ServiceFabricClient.updateService_2'
      - '@azure/servicefabric.ServiceFabricClient.uploadFile'
      - '@azure/servicefabric.ServiceFabricClient.uploadFile_1'
      - '@azure/servicefabric.ServiceFabricClient.uploadFile_2'
      - '@azure/servicefabric.ServiceFabricClient.uploadFileChunk'
      - '@azure/servicefabric.ServiceFabricClient.uploadFileChunk_1'
      - '@azure/servicefabric.ServiceFabricClient.uploadFileChunk_2'
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: '@azure/servicefabric.ServiceFabricClientContext'
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.addConfigurationParameterOverrides
    name: >-
      addConfigurationParameterOverrides(string, ConfigParameterOverride[],
      Models.ServiceFabricClientAddConfigurationParameterOverridesOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This api allows adding all existing configuration overrides on the
      specified node.
    syntax:
      content: >-
        function addConfigurationParameterOverrides(nodeName: string,
        configParameterOverrideList: ConfigParameterOverride[], options?:
        Models.ServiceFabricClientAddConfigurationParameterOverridesOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: configParameterOverrideList
          type:
            - '@azure/servicefabric.ConfigParameterOverride[]'
          description: Description for adding list of configuration overrides.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientAddConfigurationParameterOverridesOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.addConfigurationParameterOverrides_1
    name: >-
      addConfigurationParameterOverrides(string, ConfigParameterOverride[],
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function addConfigurationParameterOverrides(nodeName: string,
        configParameterOverrideList: ConfigParameterOverride[], callback:
        ServiceCallback<void>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: configParameterOverrideList
          type:
            - '@azure/servicefabric.ConfigParameterOverride[]'
          description: Description for adding list of configuration overrides.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.addConfigurationParameterOverrides_2
    name: >-
      addConfigurationParameterOverrides(string, ConfigParameterOverride[],
      ServiceFabricClientAddConfigurationParameterOverridesOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function addConfigurationParameterOverrides(nodeName: string,
        configParameterOverrideList: ConfigParameterOverride[], options:
        ServiceFabricClientAddConfigurationParameterOverridesOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: configParameterOverrideList
          type:
            - '@azure/servicefabric.ConfigParameterOverride[]'
          description: Description for adding list of configuration overrides.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientAddConfigurationParameterOverridesOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.backupPartition'
    name: >-
      backupPartition(string,
      Models.ServiceFabricClientBackupPartitionOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a backup of the stateful persisted partition's state. In case the
      partition is already

      being periodically backed up, then by default the new backup is created at
      the same backup

      storage. One can also override the same by specifying the backup storage
      details as part of the

      request body. Once the backup is initiated, its progress can be tracked
      using the

      GetBackupProgress operation.

      In case, the operation times out, specify a greater backup timeout value
      in the query parameter.
    syntax:
      content: >-
        function backupPartition(partitionId: string, options?:
        Models.ServiceFabricClientBackupPartitionOptionalParams)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - Models.ServiceFabricClientBackupPartitionOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.backupPartition_1'
    name: 'backupPartition(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function backupPartition(partitionId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.backupPartition_2'
    name: >-
      backupPartition(string, ServiceFabricClientBackupPartitionOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function backupPartition(partitionId: string, options:
        ServiceFabricClientBackupPartitionOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientBackupPartitionOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.cancelOperation'
    name: >-
      cancelOperation(string, boolean,
      Models.ServiceFabricClientCancelOperationOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The following APIs start fault operations that may be cancelled by using
      CancelOperation:

      StartDataLoss, StartQuorumLoss, StartPartitionRestart,
      StartNodeTransition.

      If force is false, then the specified user-induced operation will be
      gracefully stopped and

      cleaned up.  If force is true, the command will be aborted, and some
      internal state

      may be left behind.  Specifying force as true should be used with care. 
      Calling this API with

      force set to true is not allowed until this API has already

      been called on the same test command with force set to false first, or
      unless the test command

      already has an OperationState of OperationState.RollingBack.

      Clarification: OperationState.RollingBack means that the system will be/is
      cleaning up internal

      system state caused by executing the command.  It will not restore data if
      the

      test command was to cause data loss.  For example, if you call
      StartDataLoss then call this API,

      the system will only clean up internal state from running the command.

      It will not restore the target partition's data, if the command progressed
      far enough to cause

      data loss.


      Important note:  if this API is invoked with force==true, internal state
      may be left behind.
    syntax:
      content: >-
        function cancelOperation(operationId: string, force: boolean, options?:
        Models.ServiceFabricClientCancelOperationOptionalParams)
      parameters:
        - id: operationId
          type:
            - string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: force
          type:
            - boolean
          description: >-
            Indicates whether to gracefully roll back and clean up internal
            system state

            modified by executing the user-induced operation.
        - id: options
          type:
            - Models.ServiceFabricClientCancelOperationOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.cancelOperation_1'
    name: 'cancelOperation(string, boolean, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function cancelOperation(operationId: string, force: boolean, callback:
        ServiceCallback<void>)
      parameters:
        - id: operationId
          type:
            - string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: force
          type:
            - boolean
          description: >-
            Indicates whether to gracefully roll back and clean up internal
            system state

            modified by executing the user-induced operation.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.cancelOperation_2'
    name: >-
      cancelOperation(string, boolean,
      ServiceFabricClientCancelOperationOptionalParams, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function cancelOperation(operationId: string, force: boolean, options:
        ServiceFabricClientCancelOperationOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: operationId
          type:
            - string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: force
          type:
            - boolean
          description: >-
            Indicates whether to gracefully roll back and clean up internal
            system state

            modified by executing the user-induced operation.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientCancelOperationOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.cancelRepairTask'
    name: 'cancelRepairTask(RepairTaskCancelDescription, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This API supports the Service Fabric platform; it is not meant to be used
      directly from your

      code.
    syntax:
      content: >-
        function cancelRepairTask(repairTaskCancelDescription:
        RepairTaskCancelDescription, options?: msRest.RequestOptionsBase)
      parameters:
        - id: repairTaskCancelDescription
          type:
            - '@azure/servicefabric.RepairTaskCancelDescription'
          description: Describes the repair task to be cancelled.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.CancelRepairTaskResponse>
        description: Promise<Models.CancelRepairTaskResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.cancelRepairTask_2'
    name: >-
      cancelRepairTask(RepairTaskCancelDescription, RequestOptionsBase,
      ServiceCallback<RepairTaskUpdateInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function cancelRepairTask(repairTaskCancelDescription:
        RepairTaskCancelDescription, options: RequestOptionsBase, callback:
        ServiceCallback<RepairTaskUpdateInfo>)
      parameters:
        - id: repairTaskCancelDescription
          type:
            - '@azure/servicefabric.RepairTaskCancelDescription'
          description: Describes the repair task to be cancelled.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.RepairTaskUpdateInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.cancelRepairTask_1'
    name: >-
      cancelRepairTask(RepairTaskCancelDescription,
      ServiceCallback<RepairTaskUpdateInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function cancelRepairTask(repairTaskCancelDescription:
        RepairTaskCancelDescription, callback:
        ServiceCallback<RepairTaskUpdateInfo>)
      parameters:
        - id: repairTaskCancelDescription
          type:
            - '@azure/servicefabric.RepairTaskCancelDescription'
          description: Describes the repair task to be cancelled.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.RepairTaskUpdateInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.commitImageStoreUploadSession'
    name: >-
      commitImageStoreUploadSession(string,
      Models.ServiceFabricClientCommitImageStoreUploadSessionOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      When all file chunks have been uploaded, the upload session needs to be
      committed explicitly to

      complete the upload. Image store preserves the upload session until the
      expiration time, which

      is 30 minutes after the last chunk received.
    syntax:
      content: >-
        function commitImageStoreUploadSession(sessionId: string, options?:
        Models.ServiceFabricClientCommitImageStoreUploadSessionOptionalParams)
      parameters:
        - id: sessionId
          type:
            - string
          description: >-
            A GUID generated by the user for a file uploading. It identifies an
            image store

            upload session which keeps track of all file chunks until it is
            committed.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientCommitImageStoreUploadSessionOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.commitImageStoreUploadSession_1'
    name: 'commitImageStoreUploadSession(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function commitImageStoreUploadSession(sessionId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: sessionId
          type:
            - string
          description: >-
            A GUID generated by the user for a file uploading. It identifies an
            image store

            upload session which keeps track of all file chunks until it is
            committed.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.commitImageStoreUploadSession_2'
    name: >-
      commitImageStoreUploadSession(string,
      ServiceFabricClientCommitImageStoreUploadSessionOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function commitImageStoreUploadSession(sessionId: string, options:
        ServiceFabricClientCommitImageStoreUploadSessionOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: sessionId
          type:
            - string
          description: >-
            A GUID generated by the user for a file uploading. It identifies an
            image store

            upload session which keeps track of all file chunks until it is
            committed.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientCommitImageStoreUploadSessionOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.copyImageStoreContent'
    name: >-
      copyImageStoreContent(ImageStoreCopyDescription,
      Models.ServiceFabricClientCopyImageStoreContentOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Copies the image store content from the source image store relative path
      to the destination

      image store relative path.
    syntax:
      content: >-
        function copyImageStoreContent(imageStoreCopyDescription:
        ImageStoreCopyDescription, options?:
        Models.ServiceFabricClientCopyImageStoreContentOptionalParams)
      parameters:
        - id: imageStoreCopyDescription
          type:
            - '@azure/servicefabric.ImageStoreCopyDescription'
          description: Describes the copy description for the image store.
        - id: options
          type:
            - Models.ServiceFabricClientCopyImageStoreContentOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.copyImageStoreContent_1'
    name: 'copyImageStoreContent(ImageStoreCopyDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function copyImageStoreContent(imageStoreCopyDescription:
        ImageStoreCopyDescription, callback: ServiceCallback<void>)
      parameters:
        - id: imageStoreCopyDescription
          type:
            - '@azure/servicefabric.ImageStoreCopyDescription'
          description: Describes the copy description for the image store.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.copyImageStoreContent_2'
    name: >-
      copyImageStoreContent(ImageStoreCopyDescription,
      ServiceFabricClientCopyImageStoreContentOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function copyImageStoreContent(imageStoreCopyDescription:
        ImageStoreCopyDescription, options:
        ServiceFabricClientCopyImageStoreContentOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: imageStoreCopyDescription
          type:
            - '@azure/servicefabric.ImageStoreCopyDescription'
          description: Describes the copy description for the image store.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientCopyImageStoreContentOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createApplication'
    name: >-
      createApplication(ApplicationDescription,
      Models.ServiceFabricClientCreateApplicationOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a Service Fabric application using the specified description.
    syntax:
      content: >-
        function createApplication(applicationDescription:
        ApplicationDescription, options?:
        Models.ServiceFabricClientCreateApplicationOptionalParams)
      parameters:
        - id: applicationDescription
          type:
            - '@azure/servicefabric.ApplicationDescription'
          description: Description for creating an application.
        - id: options
          type:
            - Models.ServiceFabricClientCreateApplicationOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createApplication_1'
    name: 'createApplication(ApplicationDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createApplication(applicationDescription:
        ApplicationDescription, callback: ServiceCallback<void>)
      parameters:
        - id: applicationDescription
          type:
            - '@azure/servicefabric.ApplicationDescription'
          description: Description for creating an application.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createApplication_2'
    name: >-
      createApplication(ApplicationDescription,
      ServiceFabricClientCreateApplicationOptionalParams, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createApplication(applicationDescription:
        ApplicationDescription, options:
        ServiceFabricClientCreateApplicationOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationDescription
          type:
            - '@azure/servicefabric.ApplicationDescription'
          description: Description for creating an application.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientCreateApplicationOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createBackupPolicy'
    name: >-
      createBackupPolicy(BackupPolicyDescription,
      Models.ServiceFabricClientCreateBackupPolicyOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a backup policy which can be associated later with a Service
      Fabric application, service

      or a partition for periodic backup.
    syntax:
      content: >-
        function createBackupPolicy(backupPolicyDescription:
        BackupPolicyDescription, options?:
        Models.ServiceFabricClientCreateBackupPolicyOptionalParams)
      parameters:
        - id: backupPolicyDescription
          type:
            - '@azure/servicefabric.BackupPolicyDescription'
          description: Describes the backup policy.
        - id: options
          type:
            - Models.ServiceFabricClientCreateBackupPolicyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createBackupPolicy_1'
    name: 'createBackupPolicy(BackupPolicyDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createBackupPolicy(backupPolicyDescription:
        BackupPolicyDescription, callback: ServiceCallback<void>)
      parameters:
        - id: backupPolicyDescription
          type:
            - '@azure/servicefabric.BackupPolicyDescription'
          description: Describes the backup policy.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createBackupPolicy_2'
    name: >-
      createBackupPolicy(BackupPolicyDescription,
      ServiceFabricClientCreateBackupPolicyOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createBackupPolicy(backupPolicyDescription:
        BackupPolicyDescription, options:
        ServiceFabricClientCreateBackupPolicyOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: backupPolicyDescription
          type:
            - '@azure/servicefabric.BackupPolicyDescription'
          description: Describes the backup policy.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientCreateBackupPolicyOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createComposeDeployment'
    name: >-
      createComposeDeployment(CreateComposeDeploymentDescription,
      Models.ServiceFabricClientCreateComposeDeploymentOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Compose is a file format that describes multi-container applications. This
      API allows deploying

      container based applications defined in compose format in a Service Fabric
      cluster. Once the

      deployment is created, its status can be tracked via the
      `GetComposeDeploymentStatus` API.
    syntax:
      content: >-
        function createComposeDeployment(createComposeDeploymentDescription:
        CreateComposeDeploymentDescription, options?:
        Models.ServiceFabricClientCreateComposeDeploymentOptionalParams)
      parameters:
        - id: createComposeDeploymentDescription
          type:
            - '@azure/servicefabric.CreateComposeDeploymentDescription'
          description: |-
            Describes the compose deployment that needs to be
            created.
        - id: options
          type:
            - Models.ServiceFabricClientCreateComposeDeploymentOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createComposeDeployment_1'
    name: >-
      createComposeDeployment(CreateComposeDeploymentDescription,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createComposeDeployment(createComposeDeploymentDescription:
        CreateComposeDeploymentDescription, callback: ServiceCallback<void>)
      parameters:
        - id: createComposeDeploymentDescription
          type:
            - '@azure/servicefabric.CreateComposeDeploymentDescription'
          description: |-
            Describes the compose deployment that needs to be
            created.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createComposeDeployment_2'
    name: >-
      createComposeDeployment(CreateComposeDeploymentDescription,
      ServiceFabricClientCreateComposeDeploymentOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createComposeDeployment(createComposeDeploymentDescription:
        CreateComposeDeploymentDescription, options:
        ServiceFabricClientCreateComposeDeploymentOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: createComposeDeploymentDescription
          type:
            - '@azure/servicefabric.CreateComposeDeploymentDescription'
          description: |-
            Describes the compose deployment that needs to be
            created.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientCreateComposeDeploymentOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createName'
    name: >-
      createName(NameDescription,
      Models.ServiceFabricClientCreateNameOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates the specified Service Fabric name.
    syntax:
      content: >-
        function createName(nameDescription: NameDescription, options?:
        Models.ServiceFabricClientCreateNameOptionalParams)
      parameters:
        - id: nameDescription
          type:
            - '@azure/servicefabric.NameDescription'
          description: Describes the Service Fabric name to be created.
        - id: options
          type:
            - Models.ServiceFabricClientCreateNameOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createName_1'
    name: 'createName(NameDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createName(nameDescription: NameDescription, callback:
        ServiceCallback<void>)
      parameters:
        - id: nameDescription
          type:
            - '@azure/servicefabric.NameDescription'
          description: Describes the Service Fabric name to be created.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createName_2'
    name: >-
      createName(NameDescription, ServiceFabricClientCreateNameOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createName(nameDescription: NameDescription, options:
        ServiceFabricClientCreateNameOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: nameDescription
          type:
            - '@azure/servicefabric.NameDescription'
          description: Describes the Service Fabric name to be created.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientCreateNameOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createRepairTask'
    name: 'createRepairTask(RepairTask, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      For clusters that have the Repair Manager Service configured,

      this API provides a way to create repair tasks that run automatically or
      manually.

      For repair tasks that run automatically, an appropriate repair executor

      must be running for each repair action to run automatically.

      These are currently only available in specially-configured Azure Cloud
      Services.

      To create a manual repair task, provide the set of impacted node names and
      the

      expected impact. When the state of the created repair task changes to
      approved,

      you can safely perform repair actions on those nodes.


      This API supports the Service Fabric platform; it is not meant to be used
      directly from your

      code.
    syntax:
      content: >-
        function createRepairTask(repairTask: RepairTask, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: repairTask
          type:
            - '@azure/servicefabric.RepairTask'
          description: Describes the repair task to be created or updated.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.CreateRepairTaskResponse>
        description: Promise<Models.CreateRepairTaskResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createRepairTask_2'
    name: >-
      createRepairTask(RepairTask, RequestOptionsBase,
      ServiceCallback<RepairTaskUpdateInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createRepairTask(repairTask: RepairTask, options:
        RequestOptionsBase, callback: ServiceCallback<RepairTaskUpdateInfo>)
      parameters:
        - id: repairTask
          type:
            - '@azure/servicefabric.RepairTask'
          description: Describes the repair task to be created or updated.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.RepairTaskUpdateInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createRepairTask_1'
    name: 'createRepairTask(RepairTask, ServiceCallback<RepairTaskUpdateInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createRepairTask(repairTask: RepairTask, callback:
        ServiceCallback<RepairTaskUpdateInfo>)
      parameters:
        - id: repairTask
          type:
            - '@azure/servicefabric.RepairTask'
          description: Describes the repair task to be created or updated.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.RepairTaskUpdateInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createService'
    name: >-
      createService(string, Models.ServiceDescriptionUnion,
      Models.ServiceFabricClientCreateServiceOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This api allows creating a new Service Fabric stateless or stateful
      service under a specified

      Service Fabric application. The description for creating the service
      includes partitioning

      information and optional properties for placement and load balancing. Some
      of the properties can

      later be modified using `UpdateService` API.
    syntax:
      content: >-
        function createService(applicationId: string, serviceDescription:
        Models.ServiceDescriptionUnion, options?:
        Models.ServiceFabricClientCreateServiceOptionalParams)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceDescription
          type:
            - Models.ServiceDescriptionUnion
          description: The information necessary to create a service.
        - id: options
          type:
            - Models.ServiceFabricClientCreateServiceOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createService_1'
    name: >-
      createService(string, Models.ServiceDescriptionUnion,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createService(applicationId: string, serviceDescription:
        Models.ServiceDescriptionUnion, callback: ServiceCallback<void>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceDescription
          type:
            - Models.ServiceDescriptionUnion
          description: The information necessary to create a service.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createService_2'
    name: >-
      createService(string, Models.ServiceDescriptionUnion,
      ServiceFabricClientCreateServiceOptionalParams, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createService(applicationId: string, serviceDescription:
        Models.ServiceDescriptionUnion, options:
        ServiceFabricClientCreateServiceOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceDescription
          type:
            - Models.ServiceDescriptionUnion
          description: The information necessary to create a service.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientCreateServiceOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createServiceFromTemplate'
    name: >-
      createServiceFromTemplate(string, ServiceFromTemplateDescription,
      Models.ServiceFabricClientCreateServiceFromTemplateOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a Service Fabric service from the service template defined in the
      application manifest.

      A service template contains the properties that will be same for the
      service instance of the

      same type. The API allows overriding the properties that are usually
      different for different

      services of the same service type.
    syntax:
      content: >-
        function createServiceFromTemplate(applicationId: string,
        serviceFromTemplateDescription: ServiceFromTemplateDescription,
        options?:
        Models.ServiceFabricClientCreateServiceFromTemplateOptionalParams)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceFromTemplateDescription
          type:
            - '@azure/servicefabric.ServiceFromTemplateDescription'
          description: |-
            Describes the service that needs to be created from the
            template defined in the application manifest.
        - id: options
          type:
            - Models.ServiceFabricClientCreateServiceFromTemplateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createServiceFromTemplate_1'
    name: >-
      createServiceFromTemplate(string, ServiceFromTemplateDescription,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createServiceFromTemplate(applicationId: string,
        serviceFromTemplateDescription: ServiceFromTemplateDescription,
        callback: ServiceCallback<void>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceFromTemplateDescription
          type:
            - '@azure/servicefabric.ServiceFromTemplateDescription'
          description: |-
            Describes the service that needs to be created from the
            template defined in the application manifest.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.createServiceFromTemplate_2'
    name: >-
      createServiceFromTemplate(string, ServiceFromTemplateDescription,
      ServiceFabricClientCreateServiceFromTemplateOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createServiceFromTemplate(applicationId: string,
        serviceFromTemplateDescription: ServiceFromTemplateDescription, options:
        ServiceFabricClientCreateServiceFromTemplateOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceFromTemplateDescription
          type:
            - '@azure/servicefabric.ServiceFromTemplateDescription'
          description: |-
            Describes the service that needs to be created from the
            template defined in the application manifest.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientCreateServiceFromTemplateOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteApplication'
    name: >-
      deleteApplication(string,
      Models.ServiceFabricClientDeleteApplicationOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      An application must be created before it can be deleted. Deleting an
      application will delete all

      services that are part of that application. By default, Service Fabric
      will try to close service

      replicas in a graceful manner and then delete the service. However, if a
      service is having

      issues closing the replica gracefully, the delete operation may take a
      long time or get stuck.

      Use the optional ForceRemove flag to skip the graceful close sequence and
      forcefully delete the

      application and all of its services.
    syntax:
      content: >-
        function deleteApplication(applicationId: string, options?:
        Models.ServiceFabricClientDeleteApplicationOptionalParams)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - Models.ServiceFabricClientDeleteApplicationOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteApplication_1'
    name: 'deleteApplication(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteApplication(applicationId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteApplication_2'
    name: >-
      deleteApplication(string,
      ServiceFabricClientDeleteApplicationOptionalParams, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteApplication(applicationId: string, options:
        ServiceFabricClientDeleteApplicationOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientDeleteApplicationOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteBackupPolicy'
    name: >-
      deleteBackupPolicy(string,
      Models.ServiceFabricClientDeleteBackupPolicyOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Deletes an existing backup policy. A backup policy must be created before
      it can be deleted. A

      currently active backup policy, associated with any Service Fabric
      application, service or

      partition, cannot be deleted without first deleting the mapping.
    syntax:
      content: >-
        function deleteBackupPolicy(backupPolicyName: string, options?:
        Models.ServiceFabricClientDeleteBackupPolicyOptionalParams)
      parameters:
        - id: backupPolicyName
          type:
            - string
          description: The name of the backup policy.
        - id: options
          type:
            - Models.ServiceFabricClientDeleteBackupPolicyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteBackupPolicy_1'
    name: 'deleteBackupPolicy(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteBackupPolicy(backupPolicyName: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: backupPolicyName
          type:
            - string
          description: The name of the backup policy.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteBackupPolicy_2'
    name: >-
      deleteBackupPolicy(string,
      ServiceFabricClientDeleteBackupPolicyOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteBackupPolicy(backupPolicyName: string, options:
        ServiceFabricClientDeleteBackupPolicyOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: backupPolicyName
          type:
            - string
          description: The name of the backup policy.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientDeleteBackupPolicyOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteImageStoreContent'
    name: >-
      deleteImageStoreContent(string,
      Models.ServiceFabricClientDeleteImageStoreContentOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Deletes existing image store content being found within the given image
      store relative path.

      This command can be used to delete uploaded application packages once they
      are provisioned.
    syntax:
      content: >-
        function deleteImageStoreContent(contentPath: string, options?:
        Models.ServiceFabricClientDeleteImageStoreContentOptionalParams)
      parameters:
        - id: contentPath
          type:
            - string
          description: Relative path to file or folder in the image store from its root.
        - id: options
          type:
            - Models.ServiceFabricClientDeleteImageStoreContentOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteImageStoreContent_1'
    name: 'deleteImageStoreContent(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteImageStoreContent(contentPath: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: contentPath
          type:
            - string
          description: Relative path to file or folder in the image store from its root.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteImageStoreContent_2'
    name: >-
      deleteImageStoreContent(string,
      ServiceFabricClientDeleteImageStoreContentOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteImageStoreContent(contentPath: string, options:
        ServiceFabricClientDeleteImageStoreContentOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: contentPath
          type:
            - string
          description: Relative path to file or folder in the image store from its root.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientDeleteImageStoreContentOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteImageStoreUploadSession'
    name: >-
      deleteImageStoreUploadSession(string,
      Models.ServiceFabricClientDeleteImageStoreUploadSessionOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The DELETE request will cause the existing upload session to expire and
      remove any previously

      uploaded file chunks.
    syntax:
      content: >-
        function deleteImageStoreUploadSession(sessionId: string, options?:
        Models.ServiceFabricClientDeleteImageStoreUploadSessionOptionalParams)
      parameters:
        - id: sessionId
          type:
            - string
          description: >-
            A GUID generated by the user for a file uploading. It identifies an
            image store

            upload session which keeps track of all file chunks until it is
            committed.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientDeleteImageStoreUploadSessionOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteImageStoreUploadSession_1'
    name: 'deleteImageStoreUploadSession(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteImageStoreUploadSession(sessionId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: sessionId
          type:
            - string
          description: >-
            A GUID generated by the user for a file uploading. It identifies an
            image store

            upload session which keeps track of all file chunks until it is
            committed.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteImageStoreUploadSession_2'
    name: >-
      deleteImageStoreUploadSession(string,
      ServiceFabricClientDeleteImageStoreUploadSessionOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteImageStoreUploadSession(sessionId: string, options:
        ServiceFabricClientDeleteImageStoreUploadSessionOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: sessionId
          type:
            - string
          description: >-
            A GUID generated by the user for a file uploading. It identifies an
            image store

            upload session which keeps track of all file chunks until it is
            committed.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientDeleteImageStoreUploadSessionOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteName'
    name: 'deleteName(string, Models.ServiceFabricClientDeleteNameOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Deletes the specified Service Fabric name. A name must be created before
      it can be deleted.

      Deleting a name with child properties will fail.
    syntax:
      content: >-
        function deleteName(nameId: string, options?:
        Models.ServiceFabricClientDeleteNameOptionalParams)
      parameters:
        - id: nameId
          type:
            - string
          description: 'The Service Fabric name, without the ''fabric:'' URI scheme.'
        - id: options
          type:
            - Models.ServiceFabricClientDeleteNameOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteName_1'
    name: 'deleteName(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteName(nameId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: nameId
          type:
            - string
          description: 'The Service Fabric name, without the ''fabric:'' URI scheme.'
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteName_2'
    name: >-
      deleteName(string, ServiceFabricClientDeleteNameOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteName(nameId: string, options:
        ServiceFabricClientDeleteNameOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: nameId
          type:
            - string
          description: 'The Service Fabric name, without the ''fabric:'' URI scheme.'
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientDeleteNameOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteProperty'
    name: >-
      deleteProperty(string, string,
      Models.ServiceFabricClientDeletePropertyOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Deletes the specified Service Fabric property under a given name. A
      property must be created

      before it can be deleted.
    syntax:
      content: >-
        function deleteProperty(nameId: string, propertyName: string, options?:
        Models.ServiceFabricClientDeletePropertyOptionalParams)
      parameters:
        - id: nameId
          type:
            - string
          description: 'The Service Fabric name, without the ''fabric:'' URI scheme.'
        - id: propertyName
          type:
            - string
          description: Specifies the name of the property to get.
        - id: options
          type:
            - Models.ServiceFabricClientDeletePropertyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteProperty_1'
    name: 'deleteProperty(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteProperty(nameId: string, propertyName: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: nameId
          type:
            - string
          description: 'The Service Fabric name, without the ''fabric:'' URI scheme.'
        - id: propertyName
          type:
            - string
          description: Specifies the name of the property to get.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteProperty_2'
    name: >-
      deleteProperty(string, string,
      ServiceFabricClientDeletePropertyOptionalParams, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteProperty(nameId: string, propertyName: string, options:
        ServiceFabricClientDeletePropertyOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: nameId
          type:
            - string
          description: 'The Service Fabric name, without the ''fabric:'' URI scheme.'
        - id: propertyName
          type:
            - string
          description: Specifies the name of the property to get.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientDeletePropertyOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteRepairTask'
    name: 'deleteRepairTask(RepairTaskDeleteDescription, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This API supports the Service Fabric platform; it is not meant to be used
      directly from your

      code.
    syntax:
      content: >-
        function deleteRepairTask(repairTaskDeleteDescription:
        RepairTaskDeleteDescription, options?: msRest.RequestOptionsBase)
      parameters:
        - id: repairTaskDeleteDescription
          type:
            - '@azure/servicefabric.RepairTaskDeleteDescription'
          description: Describes the repair task to be deleted.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteRepairTask_2'
    name: >-
      deleteRepairTask(RepairTaskDeleteDescription, RequestOptionsBase,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteRepairTask(repairTaskDeleteDescription:
        RepairTaskDeleteDescription, options: RequestOptionsBase, callback:
        ServiceCallback<void>)
      parameters:
        - id: repairTaskDeleteDescription
          type:
            - '@azure/servicefabric.RepairTaskDeleteDescription'
          description: Describes the repair task to be deleted.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteRepairTask_1'
    name: 'deleteRepairTask(RepairTaskDeleteDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteRepairTask(repairTaskDeleteDescription:
        RepairTaskDeleteDescription, callback: ServiceCallback<void>)
      parameters:
        - id: repairTaskDeleteDescription
          type:
            - '@azure/servicefabric.RepairTaskDeleteDescription'
          description: Describes the repair task to be deleted.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteService'
    name: >-
      deleteService(string,
      Models.ServiceFabricClientDeleteServiceOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      A service must be created before it can be deleted. By default, Service
      Fabric will try to close

      service replicas in a graceful manner and then delete the service.
      However, if the service is

      having issues closing the replica gracefully, the delete operation may
      take a long time or get

      stuck. Use the optional ForceRemove flag to skip the graceful close
      sequence and forcefully

      delete the service.
    syntax:
      content: >-
        function deleteService(serviceId: string, options?:
        Models.ServiceFabricClientDeleteServiceOptionalParams)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type:
            - Models.ServiceFabricClientDeleteServiceOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteService_1'
    name: 'deleteService(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteService(serviceId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deleteService_2'
    name: >-
      deleteService(string, ServiceFabricClientDeleteServiceOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteService(serviceId: string, options:
        ServiceFabricClientDeleteServiceOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientDeleteServiceOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deployServicePackageToNode'
    name: >-
      deployServicePackageToNode(string, DeployServicePackageToNodeDescription,
      Models.ServiceFabricClientDeployServicePackageToNodeOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This API provides a way to download code packages including the container
      images on a specific

      node outside of the normal application deployment and upgrade path. This
      is useful for the large

      code packages and container images to be present on the node before the
      actual application

      deployment and upgrade, thus significantly reducing the total time
      required for the deployment

      or upgrade.
    syntax:
      content: >-
        function deployServicePackageToNode(nodeName: string,
        deployServicePackageToNodeDescription:
        DeployServicePackageToNodeDescription, options?:
        Models.ServiceFabricClientDeployServicePackageToNodeOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: deployServicePackageToNodeDescription
          type:
            - '@azure/servicefabric.DeployServicePackageToNodeDescription'
          description: |-
            Describes information for deploying a service
            package to a Service Fabric node.
        - id: options
          type:
            - Models.ServiceFabricClientDeployServicePackageToNodeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deployServicePackageToNode_1'
    name: >-
      deployServicePackageToNode(string, DeployServicePackageToNodeDescription,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deployServicePackageToNode(nodeName: string,
        deployServicePackageToNodeDescription:
        DeployServicePackageToNodeDescription, callback: ServiceCallback<void>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: deployServicePackageToNodeDescription
          type:
            - '@azure/servicefabric.DeployServicePackageToNodeDescription'
          description: |-
            Describes information for deploying a service
            package to a Service Fabric node.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.deployServicePackageToNode_2'
    name: >-
      deployServicePackageToNode(string, DeployServicePackageToNodeDescription,
      ServiceFabricClientDeployServicePackageToNodeOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deployServicePackageToNode(nodeName: string,
        deployServicePackageToNodeDescription:
        DeployServicePackageToNodeDescription, options:
        ServiceFabricClientDeployServicePackageToNodeOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: deployServicePackageToNodeDescription
          type:
            - '@azure/servicefabric.DeployServicePackageToNodeDescription'
          description: |-
            Describes information for deploying a service
            package to a Service Fabric node.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientDeployServicePackageToNodeOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.disableApplicationBackup'
    name: >-
      disableApplicationBackup(string,
      Models.ServiceFabricClientDisableApplicationBackupOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Disables periodic backup of Service Fabric application which was
      previously enabled.
    syntax:
      content: >-
        function disableApplicationBackup(applicationId: string, options?:
        Models.ServiceFabricClientDisableApplicationBackupOptionalParams)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - Models.ServiceFabricClientDisableApplicationBackupOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.disableApplicationBackup_1'
    name: 'disableApplicationBackup(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function disableApplicationBackup(applicationId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.disableApplicationBackup_2'
    name: >-
      disableApplicationBackup(string,
      ServiceFabricClientDisableApplicationBackupOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function disableApplicationBackup(applicationId: string, options:
        ServiceFabricClientDisableApplicationBackupOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientDisableApplicationBackupOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.disableNode'
    name: >-
      disableNode(string, DeactivationIntentDescription,
      Models.ServiceFabricClientDisableNodeOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Deactivate a Service Fabric cluster node with the specified deactivation
      intent. Once the

      deactivation is in progress, the deactivation intent can be increased, but
      not decreased (for

      example, a node that is deactivated with the Pause intent can be
      deactivated further with

      Restart, but not the other way around. Nodes may be reactivated using the
      Activate a node

      operation any time after they are deactivated. If the deactivation is not
      complete, this will

      cancel the deactivation. A node that goes down and comes back up while
      deactivated will still

      need to be reactivated before services will be placed on that node.
    syntax:
      content: >-
        function disableNode(nodeName: string, deactivationIntentDescription:
        DeactivationIntentDescription, options?:
        Models.ServiceFabricClientDisableNodeOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: deactivationIntentDescription
          type:
            - '@azure/servicefabric.DeactivationIntentDescription'
          description: Describes the intent or reason for deactivating the node.
        - id: options
          type:
            - Models.ServiceFabricClientDisableNodeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.disableNode_1'
    name: 'disableNode(string, DeactivationIntentDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function disableNode(nodeName: string, deactivationIntentDescription:
        DeactivationIntentDescription, callback: ServiceCallback<void>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: deactivationIntentDescription
          type:
            - '@azure/servicefabric.DeactivationIntentDescription'
          description: Describes the intent or reason for deactivating the node.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.disableNode_2'
    name: >-
      disableNode(string, DeactivationIntentDescription,
      ServiceFabricClientDisableNodeOptionalParams, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function disableNode(nodeName: string, deactivationIntentDescription:
        DeactivationIntentDescription, options:
        ServiceFabricClientDisableNodeOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: deactivationIntentDescription
          type:
            - '@azure/servicefabric.DeactivationIntentDescription'
          description: Describes the intent or reason for deactivating the node.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientDisableNodeOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.disablePartitionBackup'
    name: >-
      disablePartitionBackup(string,
      Models.ServiceFabricClientDisablePartitionBackupOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Disables periodic backup of partition which was previously enabled. Backup
      must be explicitly

      enabled before it can be disabled.

      In case the backup is enabled for the Service Fabric application or
      service, which this

      partition is part of, this partition would continue to be periodically
      backed up as per the

      policy mapped at the higher level entity.
    syntax:
      content: >-
        function disablePartitionBackup(partitionId: string, options?:
        Models.ServiceFabricClientDisablePartitionBackupOptionalParams)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - Models.ServiceFabricClientDisablePartitionBackupOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.disablePartitionBackup_1'
    name: 'disablePartitionBackup(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function disablePartitionBackup(partitionId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.disablePartitionBackup_2'
    name: >-
      disablePartitionBackup(string,
      ServiceFabricClientDisablePartitionBackupOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function disablePartitionBackup(partitionId: string, options:
        ServiceFabricClientDisablePartitionBackupOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientDisablePartitionBackupOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.disableServiceBackup'
    name: >-
      disableServiceBackup(string,
      Models.ServiceFabricClientDisableServiceBackupOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Disables periodic backup of Service Fabric service which was previously
      enabled. Backup must be

      explicitly enabled before it can be disabled.

      In case the backup is enabled for the Service Fabric application, which
      this service is part of,

      this service would continue to be periodically backed up as per the policy
      mapped at the

      application level.
    syntax:
      content: >-
        function disableServiceBackup(serviceId: string, options?:
        Models.ServiceFabricClientDisableServiceBackupOptionalParams)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type:
            - Models.ServiceFabricClientDisableServiceBackupOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.disableServiceBackup_1'
    name: 'disableServiceBackup(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function disableServiceBackup(serviceId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.disableServiceBackup_2'
    name: >-
      disableServiceBackup(string,
      ServiceFabricClientDisableServiceBackupOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function disableServiceBackup(serviceId: string, options:
        ServiceFabricClientDisableServiceBackupOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientDisableServiceBackupOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.enableApplicationBackup'
    name: >-
      enableApplicationBackup(string, EnableBackupDescription,
      Models.ServiceFabricClientEnableApplicationBackupOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Enables periodic backup of stateful partitions which are part of this
      Service Fabric

      application. Each partition is backed up individually as per the specified
      backup policy

      description.

      Note only C# based Reliable Actor and Reliable Stateful services are
      currently supported for

      periodic backup.
    syntax:
      content: >-
        function enableApplicationBackup(applicationId: string,
        enableBackupDescription: EnableBackupDescription, options?:
        Models.ServiceFabricClientEnableApplicationBackupOptionalParams)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: enableBackupDescription
          type:
            - '@azure/servicefabric.EnableBackupDescription'
          description: Specifies the parameters for enabling backup.
        - id: options
          type:
            - Models.ServiceFabricClientEnableApplicationBackupOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.enableApplicationBackup_1'
    name: >-
      enableApplicationBackup(string, EnableBackupDescription,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function enableApplicationBackup(applicationId: string,
        enableBackupDescription: EnableBackupDescription, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: enableBackupDescription
          type:
            - '@azure/servicefabric.EnableBackupDescription'
          description: Specifies the parameters for enabling backup.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.enableApplicationBackup_2'
    name: >-
      enableApplicationBackup(string, EnableBackupDescription,
      ServiceFabricClientEnableApplicationBackupOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function enableApplicationBackup(applicationId: string,
        enableBackupDescription: EnableBackupDescription, options:
        ServiceFabricClientEnableApplicationBackupOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: enableBackupDescription
          type:
            - '@azure/servicefabric.EnableBackupDescription'
          description: Specifies the parameters for enabling backup.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientEnableApplicationBackupOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.enableNode'
    name: 'enableNode(string, Models.ServiceFabricClientEnableNodeOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Activates a Service Fabric cluster node that is currently deactivated.
      Once activated, the node

      will again become a viable target for placing new replicas, and any
      deactivated replicas

      remaining on the node will be reactivated.
    syntax:
      content: >-
        function enableNode(nodeName: string, options?:
        Models.ServiceFabricClientEnableNodeOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: options
          type:
            - Models.ServiceFabricClientEnableNodeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.enableNode_1'
    name: 'enableNode(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function enableNode(nodeName: string, callback: ServiceCallback<void>)'
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.enableNode_2'
    name: >-
      enableNode(string, ServiceFabricClientEnableNodeOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function enableNode(nodeName: string, options:
        ServiceFabricClientEnableNodeOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientEnableNodeOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.enablePartitionBackup'
    name: >-
      enablePartitionBackup(string, EnableBackupDescription,
      Models.ServiceFabricClientEnablePartitionBackupOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Enables periodic backup of stateful persisted partition. Each partition is
      backed up as per the

      specified backup policy description. In case the application or service,
      which is partition is

      part of, is already enabled for backup then this operation would override
      the policy being used

      to take the periodic backup of this partition.

      Note only C# based Reliable Actor and Reliable Stateful services are
      currently supported for

      periodic backup.
    syntax:
      content: >-
        function enablePartitionBackup(partitionId: string,
        enableBackupDescription: EnableBackupDescription, options?:
        Models.ServiceFabricClientEnablePartitionBackupOptionalParams)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: enableBackupDescription
          type:
            - '@azure/servicefabric.EnableBackupDescription'
          description: Specifies the parameters for enabling backup.
        - id: options
          type:
            - Models.ServiceFabricClientEnablePartitionBackupOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.enablePartitionBackup_1'
    name: >-
      enablePartitionBackup(string, EnableBackupDescription,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function enablePartitionBackup(partitionId: string,
        enableBackupDescription: EnableBackupDescription, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: enableBackupDescription
          type:
            - '@azure/servicefabric.EnableBackupDescription'
          description: Specifies the parameters for enabling backup.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.enablePartitionBackup_2'
    name: >-
      enablePartitionBackup(string, EnableBackupDescription,
      ServiceFabricClientEnablePartitionBackupOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function enablePartitionBackup(partitionId: string,
        enableBackupDescription: EnableBackupDescription, options:
        ServiceFabricClientEnablePartitionBackupOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: enableBackupDescription
          type:
            - '@azure/servicefabric.EnableBackupDescription'
          description: Specifies the parameters for enabling backup.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientEnablePartitionBackupOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.enableServiceBackup'
    name: >-
      enableServiceBackup(string, EnableBackupDescription,
      Models.ServiceFabricClientEnableServiceBackupOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Enables periodic backup of stateful partitions which are part of this
      Service Fabric service.

      Each partition is backed up individually as per the specified backup
      policy description. In case

      the application, which the service is part of, is already enabled for
      backup then this operation

      would override the policy being used to take the periodic backup for this
      service and its

      partitions (unless explicitly overridden at the partition level).

      Note only C# based Reliable Actor and Reliable Stateful services are
      currently supported for

      periodic backup.
    syntax:
      content: >-
        function enableServiceBackup(serviceId: string, enableBackupDescription:
        EnableBackupDescription, options?:
        Models.ServiceFabricClientEnableServiceBackupOptionalParams)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: enableBackupDescription
          type:
            - '@azure/servicefabric.EnableBackupDescription'
          description: Specifies the parameters for enabling backup.
        - id: options
          type:
            - Models.ServiceFabricClientEnableServiceBackupOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.enableServiceBackup_1'
    name: >-
      enableServiceBackup(string, EnableBackupDescription,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function enableServiceBackup(serviceId: string, enableBackupDescription:
        EnableBackupDescription, callback: ServiceCallback<void>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: enableBackupDescription
          type:
            - '@azure/servicefabric.EnableBackupDescription'
          description: Specifies the parameters for enabling backup.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.enableServiceBackup_2'
    name: >-
      enableServiceBackup(string, EnableBackupDescription,
      ServiceFabricClientEnableServiceBackupOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function enableServiceBackup(serviceId: string, enableBackupDescription:
        EnableBackupDescription, options:
        ServiceFabricClientEnableServiceBackupOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: enableBackupDescription
          type:
            - '@azure/servicefabric.EnableBackupDescription'
          description: Specifies the parameters for enabling backup.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientEnableServiceBackupOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.forceApproveRepairTask'
    name: >-
      forceApproveRepairTask(RepairTaskApproveDescription,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This API supports the Service Fabric platform; it is not meant to be used
      directly from your

      code.
    syntax:
      content: >-
        function forceApproveRepairTask(repairTaskApproveDescription:
        RepairTaskApproveDescription, options?: msRest.RequestOptionsBase)
      parameters:
        - id: repairTaskApproveDescription
          type:
            - '@azure/servicefabric.RepairTaskApproveDescription'
          description: Describes the repair task to be approved.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.ForceApproveRepairTaskResponse>
        description: Promise<Models.ForceApproveRepairTaskResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.forceApproveRepairTask_2'
    name: >-
      forceApproveRepairTask(RepairTaskApproveDescription, RequestOptionsBase,
      ServiceCallback<RepairTaskUpdateInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function forceApproveRepairTask(repairTaskApproveDescription:
        RepairTaskApproveDescription, options: RequestOptionsBase, callback:
        ServiceCallback<RepairTaskUpdateInfo>)
      parameters:
        - id: repairTaskApproveDescription
          type:
            - '@azure/servicefabric.RepairTaskApproveDescription'
          description: Describes the repair task to be approved.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.RepairTaskUpdateInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.forceApproveRepairTask_1'
    name: >-
      forceApproveRepairTask(RepairTaskApproveDescription,
      ServiceCallback<RepairTaskUpdateInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function forceApproveRepairTask(repairTaskApproveDescription:
        RepairTaskApproveDescription, callback:
        ServiceCallback<RepairTaskUpdateInfo>)
      parameters:
        - id: repairTaskApproveDescription
          type:
            - '@azure/servicefabric.RepairTaskApproveDescription'
          description: Describes the repair task to be approved.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.RepairTaskUpdateInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getAadMetadata'
    name: getAadMetadata(Models.ServiceFabricClientGetAadMetadataOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the Azure Active Directory metadata used for secured connection to
      cluster.

      This API is not supposed to be called separately. It provides information
      needed to set up an

      Azure Active Directory secured connection with a Service Fabric cluster.
    syntax:
      content: >-
        function getAadMetadata(options?:
        Models.ServiceFabricClientGetAadMetadataOptionalParams)
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetAadMetadataOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetAadMetadataResponse>
        description: Promise<Models.GetAadMetadataResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getAadMetadata_1'
    name: getAadMetadata(ServiceCallback<AadMetadataObject>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getAadMetadata(callback: ServiceCallback<AadMetadataObject>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.AadMetadataObject>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getAadMetadata_2'
    name: >-
      getAadMetadata(ServiceFabricClientGetAadMetadataOptionalParams,
      ServiceCallback<AadMetadataObject>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getAadMetadata(options:
        ServiceFabricClientGetAadMetadataOptionalParams, callback:
        ServiceCallback<AadMetadataObject>)
      parameters:
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetAadMetadataOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.AadMetadataObject>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getAllEntitiesBackedUpByPolicy'
    name: >-
      getAllEntitiesBackedUpByPolicy(string,
      Models.ServiceFabricClientGetAllEntitiesBackedUpByPolicyOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a list of Service Fabric application, service or partition which
      are associated with

      this backup policy.
    syntax:
      content: >-
        function getAllEntitiesBackedUpByPolicy(backupPolicyName: string,
        options?:
        Models.ServiceFabricClientGetAllEntitiesBackedUpByPolicyOptionalParams)
      parameters:
        - id: backupPolicyName
          type:
            - string
          description: The name of the backup policy.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetAllEntitiesBackedUpByPolicyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetAllEntitiesBackedUpByPolicyResponse>
        description: Promise<Models.GetAllEntitiesBackedUpByPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getAllEntitiesBackedUpByPolicy_1'
    name: >-
      getAllEntitiesBackedUpByPolicy(string,
      ServiceCallback<PagedBackupEntityList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getAllEntitiesBackedUpByPolicy(backupPolicyName: string,
        callback: ServiceCallback<PagedBackupEntityList>)
      parameters:
        - id: backupPolicyName
          type:
            - string
          description: The name of the backup policy.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedBackupEntityList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getAllEntitiesBackedUpByPolicy_2'
    name: >-
      getAllEntitiesBackedUpByPolicy(string,
      ServiceFabricClientGetAllEntitiesBackedUpByPolicyOptionalParams,
      ServiceCallback<PagedBackupEntityList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getAllEntitiesBackedUpByPolicy(backupPolicyName: string,
        options:
        ServiceFabricClientGetAllEntitiesBackedUpByPolicyOptionalParams,
        callback: ServiceCallback<PagedBackupEntityList>)
      parameters:
        - id: backupPolicyName
          type:
            - string
          description: The name of the backup policy.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetAllEntitiesBackedUpByPolicyOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedBackupEntityList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getApplicationBackupConfigurationInfo
    name: >-
      getApplicationBackupConfigurationInfo(string,
      Models.ServiceFabricClientGetApplicationBackupConfigurationInfoOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the Service Fabric backup configuration information for the
      application and the services

      and partitions under this application.
    syntax:
      content: >-
        function getApplicationBackupConfigurationInfo(applicationId: string,
        options?:
        Models.ServiceFabricClientGetApplicationBackupConfigurationInfoOptionalParams)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetApplicationBackupConfigurationInfoOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetApplicationBackupConfigurationInfoResponse>
        description: Promise<Models.GetApplicationBackupConfigurationInfoResponse>
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getApplicationBackupConfigurationInfo_1
    name: >-
      getApplicationBackupConfigurationInfo(string,
      ServiceCallback<PagedBackupConfigurationInfoList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getApplicationBackupConfigurationInfo(applicationId: string,
        callback: ServiceCallback<PagedBackupConfigurationInfoList>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/servicefabric.PagedBackupConfigurationInfoList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getApplicationBackupConfigurationInfo_2
    name: >-
      getApplicationBackupConfigurationInfo(string,
      ServiceFabricClientGetApplicationBackupConfigurationInfoOptionalParams,
      ServiceCallback<PagedBackupConfigurationInfoList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getApplicationBackupConfigurationInfo(applicationId: string,
        options:
        ServiceFabricClientGetApplicationBackupConfigurationInfoOptionalParams,
        callback: ServiceCallback<PagedBackupConfigurationInfoList>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetApplicationBackupConfigurationInfoOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/servicefabric.PagedBackupConfigurationInfoList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationBackupList'
    name: >-
      getApplicationBackupList(string,
      Models.ServiceFabricClientGetApplicationBackupListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a list of backups available for every partition in this Service
      Fabric application. The

      server enumerates all the backups available at the backup location
      configured in the backup

      policy. It also allows filtering of the result based on start and end
      datetime or just fetching

      the latest available backup for every partition.
    syntax:
      content: >-
        function getApplicationBackupList(applicationId: string, options?:
        Models.ServiceFabricClientGetApplicationBackupListOptionalParams)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - Models.ServiceFabricClientGetApplicationBackupListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetApplicationBackupListResponse>
        description: Promise<Models.GetApplicationBackupListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationBackupList_1'
    name: 'getApplicationBackupList(string, ServiceCallback<PagedBackupInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getApplicationBackupList(applicationId: string, callback:
        ServiceCallback<PagedBackupInfoList>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedBackupInfoList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationBackupList_2'
    name: >-
      getApplicationBackupList(string,
      ServiceFabricClientGetApplicationBackupListOptionalParams,
      ServiceCallback<PagedBackupInfoList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getApplicationBackupList(applicationId: string, options:
        ServiceFabricClientGetApplicationBackupListOptionalParams, callback:
        ServiceCallback<PagedBackupInfoList>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetApplicationBackupListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedBackupInfoList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationEventList'
    name: >-
      getApplicationEventList(string, string, string,
      Models.ServiceFabricClientGetApplicationEventListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: The response is list of ApplicationEvent objects.
    syntax:
      content: >-
        function getApplicationEventList(applicationId: string, startTimeUtc:
        string, endTimeUtc: string, options?:
        Models.ServiceFabricClientGetApplicationEventListOptionalParams)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: options
          type:
            - Models.ServiceFabricClientGetApplicationEventListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetApplicationEventListResponse>
        description: Promise<Models.GetApplicationEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationEventList_1'
    name: >-
      getApplicationEventList(string, string, string,
      ServiceCallback<Models.ApplicationEventUnion[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getApplicationEventList(applicationId: string, startTimeUtc:
        string, endTimeUtc: string, callback:
        ServiceCallback<Models.ApplicationEventUnion[]>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: callback
          type:
            - 'ServiceCallback<Models.ApplicationEventUnion[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationEventList_2'
    name: >-
      getApplicationEventList(string, string, string,
      ServiceFabricClientGetApplicationEventListOptionalParams,
      ServiceCallback<Models.ApplicationEventUnion[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getApplicationEventList(applicationId: string, startTimeUtc:
        string, endTimeUtc: string, options:
        ServiceFabricClientGetApplicationEventListOptionalParams, callback:
        ServiceCallback<Models.ApplicationEventUnion[]>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetApplicationEventListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - 'ServiceCallback<Models.ApplicationEventUnion[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationHealth'
    name: >-
      getApplicationHealth(string,
      Models.ServiceFabricClientGetApplicationHealthOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns the heath state of the service fabric application. The response
      reports either Ok, Error

      or Warning health state. If the entity is not found in the health store,
      it will return Error.
    syntax:
      content: >-
        function getApplicationHealth(applicationId: string, options?:
        Models.ServiceFabricClientGetApplicationHealthOptionalParams)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - Models.ServiceFabricClientGetApplicationHealthOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetApplicationHealthResponse>
        description: Promise<Models.GetApplicationHealthResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationHealth_1'
    name: 'getApplicationHealth(string, ServiceCallback<ApplicationHealth>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getApplicationHealth(applicationId: string, callback:
        ServiceCallback<ApplicationHealth>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ApplicationHealth>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationHealth_2'
    name: >-
      getApplicationHealth(string,
      ServiceFabricClientGetApplicationHealthOptionalParams,
      ServiceCallback<ApplicationHealth>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getApplicationHealth(applicationId: string, options:
        ServiceFabricClientGetApplicationHealthOptionalParams, callback:
        ServiceCallback<ApplicationHealth>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetApplicationHealthOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ApplicationHealth>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationHealthUsingPolicy'
    name: >-
      getApplicationHealthUsingPolicy(string,
      Models.ServiceFabricClientGetApplicationHealthUsingPolicyOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the health of a Service Fabric application. Use
      EventsHealthStateFilter to filter the

      collection of health events reported on the node based on the health
      state. Use

      ClusterHealthPolicies to override the health policies used to evaluate the
      health.
    syntax:
      content: >-
        function getApplicationHealthUsingPolicy(applicationId: string,
        options?:
        Models.ServiceFabricClientGetApplicationHealthUsingPolicyOptionalParams)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetApplicationHealthUsingPolicyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetApplicationHealthUsingPolicyResponse>
        description: Promise<Models.GetApplicationHealthUsingPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationHealthUsingPolicy_1'
    name: >-
      getApplicationHealthUsingPolicy(string,
      ServiceCallback<ApplicationHealth>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getApplicationHealthUsingPolicy(applicationId: string,
        callback: ServiceCallback<ApplicationHealth>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ApplicationHealth>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationHealthUsingPolicy_2'
    name: >-
      getApplicationHealthUsingPolicy(string,
      ServiceFabricClientGetApplicationHealthUsingPolicyOptionalParams,
      ServiceCallback<ApplicationHealth>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getApplicationHealthUsingPolicy(applicationId: string, options:
        ServiceFabricClientGetApplicationHealthUsingPolicyOptionalParams,
        callback: ServiceCallback<ApplicationHealth>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetApplicationHealthUsingPolicyOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ApplicationHealth>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationInfo'
    name: >-
      getApplicationInfo(string,
      Models.ServiceFabricClientGetApplicationInfoOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns the information about the application that was created or in the
      process of being

      created in the Service Fabric cluster and whose name matches the one
      specified as the parameter.

      The response includes the name, type, status, parameters, and other
      details about the

      application.
    syntax:
      content: >-
        function getApplicationInfo(applicationId: string, options?:
        Models.ServiceFabricClientGetApplicationInfoOptionalParams)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - Models.ServiceFabricClientGetApplicationInfoOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetApplicationInfoResponse>
        description: Promise<Models.GetApplicationInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationInfo_1'
    name: 'getApplicationInfo(string, ServiceCallback<ApplicationInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getApplicationInfo(applicationId: string, callback:
        ServiceCallback<ApplicationInfo>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ApplicationInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationInfo_2'
    name: >-
      getApplicationInfo(string,
      ServiceFabricClientGetApplicationInfoOptionalParams,
      ServiceCallback<ApplicationInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getApplicationInfo(applicationId: string, options:
        ServiceFabricClientGetApplicationInfoOptionalParams, callback:
        ServiceCallback<ApplicationInfo>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetApplicationInfoOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ApplicationInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationInfoList'
    name: >-
      getApplicationInfoList(Models.ServiceFabricClientGetApplicationInfoListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the information about the applications that were created or in the
      process of being created

      in the Service Fabric cluster and match the specified filters. The
      response includes the name,

      type, status, parameters, and other details about the application. If the
      applications do not

      fit in a page, one page of results is returned as well as a continuation
      token, which can be

      used to get the next page. Filters ApplicationTypeName and
      ApplicationDefinitionKindFilter

      cannot be specified at the same time.
    syntax:
      content: >-
        function getApplicationInfoList(options?:
        Models.ServiceFabricClientGetApplicationInfoListOptionalParams)
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetApplicationInfoListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetApplicationInfoListResponse>
        description: Promise<Models.GetApplicationInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationInfoList_1'
    name: getApplicationInfoList(ServiceCallback<PagedApplicationInfoList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getApplicationInfoList(callback:
        ServiceCallback<PagedApplicationInfoList>)
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedApplicationInfoList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationInfoList_2'
    name: >-
      getApplicationInfoList(ServiceFabricClientGetApplicationInfoListOptionalParams,
      ServiceCallback<PagedApplicationInfoList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getApplicationInfoList(options:
        ServiceFabricClientGetApplicationInfoListOptionalParams, callback:
        ServiceCallback<PagedApplicationInfoList>)
      parameters:
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetApplicationInfoListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedApplicationInfoList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationLoadInfo'
    name: >-
      getApplicationLoadInfo(string,
      Models.ServiceFabricClientGetApplicationLoadInfoOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns the load information about the application that was created or in
      the process of being

      created in the Service Fabric cluster and whose name matches the one
      specified as the parameter.

      The response includes the name, minimum nodes, maximum nodes, the number
      of nodes the

      application is occupying currently, and application load metric
      information about the

      application.
    syntax:
      content: >-
        function getApplicationLoadInfo(applicationId: string, options?:
        Models.ServiceFabricClientGetApplicationLoadInfoOptionalParams)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - Models.ServiceFabricClientGetApplicationLoadInfoOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetApplicationLoadInfoResponse>
        description: Promise<Models.GetApplicationLoadInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationLoadInfo_1'
    name: 'getApplicationLoadInfo(string, ServiceCallback<ApplicationLoadInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getApplicationLoadInfo(applicationId: string, callback:
        ServiceCallback<ApplicationLoadInfo>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ApplicationLoadInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationLoadInfo_2'
    name: >-
      getApplicationLoadInfo(string,
      ServiceFabricClientGetApplicationLoadInfoOptionalParams,
      ServiceCallback<ApplicationLoadInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getApplicationLoadInfo(applicationId: string, options:
        ServiceFabricClientGetApplicationLoadInfoOptionalParams, callback:
        ServiceCallback<ApplicationLoadInfo>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetApplicationLoadInfoOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ApplicationLoadInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationManifest'
    name: >-
      getApplicationManifest(string, string,
      Models.ServiceFabricClientGetApplicationManifestOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: The response contains the application manifest XML as a string.
    syntax:
      content: >-
        function getApplicationManifest(applicationTypeName: string,
        applicationTypeVersion: string, options?:
        Models.ServiceFabricClientGetApplicationManifestOptionalParams)
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: The name of the application type.
        - id: applicationTypeVersion
          type:
            - string
          description: The version of the application type.
        - id: options
          type:
            - Models.ServiceFabricClientGetApplicationManifestOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetApplicationManifestResponse>
        description: Promise<Models.GetApplicationManifestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationManifest_1'
    name: >-
      getApplicationManifest(string, string,
      ServiceCallback<ApplicationTypeManifest>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getApplicationManifest(applicationTypeName: string,
        applicationTypeVersion: string, callback:
        ServiceCallback<ApplicationTypeManifest>)
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: The name of the application type.
        - id: applicationTypeVersion
          type:
            - string
          description: The version of the application type.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ApplicationTypeManifest>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationManifest_2'
    name: >-
      getApplicationManifest(string, string,
      ServiceFabricClientGetApplicationManifestOptionalParams,
      ServiceCallback<ApplicationTypeManifest>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getApplicationManifest(applicationTypeName: string,
        applicationTypeVersion: string, options:
        ServiceFabricClientGetApplicationManifestOptionalParams, callback:
        ServiceCallback<ApplicationTypeManifest>)
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: The name of the application type.
        - id: applicationTypeVersion
          type:
            - string
          description: The version of the application type.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetApplicationManifestOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ApplicationTypeManifest>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationNameInfo'
    name: >-
      getApplicationNameInfo(string,
      Models.ServiceFabricClientGetApplicationNameInfoOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the name of the application for the specified service. A 404

      FABRIC_E_SERVICE_DOES_NOT_EXIST error is returned if a service with the
      provided service ID does

      not exist.
    syntax:
      content: >-
        function getApplicationNameInfo(serviceId: string, options?:
        Models.ServiceFabricClientGetApplicationNameInfoOptionalParams)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type:
            - Models.ServiceFabricClientGetApplicationNameInfoOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetApplicationNameInfoResponse>
        description: Promise<Models.GetApplicationNameInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationNameInfo_1'
    name: 'getApplicationNameInfo(string, ServiceCallback<ApplicationNameInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getApplicationNameInfo(serviceId: string, callback:
        ServiceCallback<ApplicationNameInfo>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ApplicationNameInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationNameInfo_2'
    name: >-
      getApplicationNameInfo(string,
      ServiceFabricClientGetApplicationNameInfoOptionalParams,
      ServiceCallback<ApplicationNameInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getApplicationNameInfo(serviceId: string, options:
        ServiceFabricClientGetApplicationNameInfoOptionalParams, callback:
        ServiceCallback<ApplicationNameInfo>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetApplicationNameInfoOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ApplicationNameInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationsEventList'
    name: >-
      getApplicationsEventList(string, string,
      Models.ServiceFabricClientGetApplicationsEventListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: The response is list of ApplicationEvent objects.
    syntax:
      content: >-
        function getApplicationsEventList(startTimeUtc: string, endTimeUtc:
        string, options?:
        Models.ServiceFabricClientGetApplicationsEventListOptionalParams)
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: options
          type:
            - Models.ServiceFabricClientGetApplicationsEventListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetApplicationsEventListResponse>
        description: Promise<Models.GetApplicationsEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationsEventList_1'
    name: >-
      getApplicationsEventList(string, string,
      ServiceCallback<Models.ApplicationEventUnion[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getApplicationsEventList(startTimeUtc: string, endTimeUtc:
        string, callback: ServiceCallback<Models.ApplicationEventUnion[]>)
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: callback
          type:
            - 'ServiceCallback<Models.ApplicationEventUnion[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationsEventList_2'
    name: >-
      getApplicationsEventList(string, string,
      ServiceFabricClientGetApplicationsEventListOptionalParams,
      ServiceCallback<Models.ApplicationEventUnion[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getApplicationsEventList(startTimeUtc: string, endTimeUtc:
        string, options:
        ServiceFabricClientGetApplicationsEventListOptionalParams, callback:
        ServiceCallback<Models.ApplicationEventUnion[]>)
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetApplicationsEventListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - 'ServiceCallback<Models.ApplicationEventUnion[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationTypeInfoList'
    name: >-
      getApplicationTypeInfoList(Models.ServiceFabricClientGetApplicationTypeInfoListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns the information about the application types that are provisioned
      or in the process of

      being provisioned in the Service Fabric cluster. Each version of an
      application type is returned

      as one application type. The response includes the name, version, status,
      and other details

      about the application type. This is a paged query, meaning that if not all
      of the application

      types fit in a page, one page of results is returned as well as a
      continuation token, which can

      be used to get the next page. For example, if there are 10 application
      types but a page only

      fits the first three application types, or if max results is set to 3,
      then three is returned.

      To access the rest of the results, retrieve subsequent pages by using the
      returned continuation

      token in the next query. An empty continuation token is returned if there
      are no subsequent

      pages.
    syntax:
      content: >-
        function getApplicationTypeInfoList(options?:
        Models.ServiceFabricClientGetApplicationTypeInfoListOptionalParams)
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetApplicationTypeInfoListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetApplicationTypeInfoListResponse>
        description: Promise<Models.GetApplicationTypeInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationTypeInfoList_1'
    name: getApplicationTypeInfoList(ServiceCallback<PagedApplicationTypeInfoList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getApplicationTypeInfoList(callback:
        ServiceCallback<PagedApplicationTypeInfoList>)
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedApplicationTypeInfoList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationTypeInfoList_2'
    name: >-
      getApplicationTypeInfoList(ServiceFabricClientGetApplicationTypeInfoListOptionalParams,
      ServiceCallback<PagedApplicationTypeInfoList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getApplicationTypeInfoList(options:
        ServiceFabricClientGetApplicationTypeInfoListOptionalParams, callback:
        ServiceCallback<PagedApplicationTypeInfoList>)
      parameters:
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetApplicationTypeInfoListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedApplicationTypeInfoList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationTypeInfoListByName'
    name: >-
      getApplicationTypeInfoListByName(string,
      Models.ServiceFabricClientGetApplicationTypeInfoListByNameOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns the information about the application types that are provisioned
      or in the process of

      being provisioned in the Service Fabric cluster. These results are of
      application types whose

      name match exactly the one specified as the parameter, and which comply
      with the given query

      parameters. All versions of the application type matching the application
      type name are

      returned, with each version returned as one application type. The response
      includes the name,

      version, status, and other details about the application type. This is a
      paged query, meaning

      that if not all of the application types fit in a page, one page of
      results is returned as well

      as a continuation token, which can be used to get the next page. For
      example, if there are 10

      application types but a page only fits the first three application types,
      or if max results is

      set to 3, then three is returned. To access the rest of the results,
      retrieve subsequent pages

      by using the returned continuation token in the next query. An empty
      continuation token is

      returned if there are no subsequent pages.
    syntax:
      content: >-
        function getApplicationTypeInfoListByName(applicationTypeName: string,
        options?:
        Models.ServiceFabricClientGetApplicationTypeInfoListByNameOptionalParams)
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: The name of the application type.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetApplicationTypeInfoListByNameOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetApplicationTypeInfoListByNameResponse>
        description: Promise<Models.GetApplicationTypeInfoListByNameResponse>
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getApplicationTypeInfoListByName_1
    name: >-
      getApplicationTypeInfoListByName(string,
      ServiceCallback<PagedApplicationTypeInfoList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getApplicationTypeInfoListByName(applicationTypeName: string,
        callback: ServiceCallback<PagedApplicationTypeInfoList>)
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: The name of the application type.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedApplicationTypeInfoList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getApplicationTypeInfoListByName_2
    name: >-
      getApplicationTypeInfoListByName(string,
      ServiceFabricClientGetApplicationTypeInfoListByNameOptionalParams,
      ServiceCallback<PagedApplicationTypeInfoList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getApplicationTypeInfoListByName(applicationTypeName: string,
        options:
        ServiceFabricClientGetApplicationTypeInfoListByNameOptionalParams,
        callback: ServiceCallback<PagedApplicationTypeInfoList>)
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: The name of the application type.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetApplicationTypeInfoListByNameOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedApplicationTypeInfoList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationUpgrade'
    name: >-
      getApplicationUpgrade(string,
      Models.ServiceFabricClientGetApplicationUpgradeOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns information about the state of the latest application upgrade
      along with details to aid

      debugging application health issues.
    syntax:
      content: >-
        function getApplicationUpgrade(applicationId: string, options?:
        Models.ServiceFabricClientGetApplicationUpgradeOptionalParams)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - Models.ServiceFabricClientGetApplicationUpgradeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetApplicationUpgradeResponse>
        description: Promise<Models.GetApplicationUpgradeResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationUpgrade_1'
    name: >-
      getApplicationUpgrade(string,
      ServiceCallback<ApplicationUpgradeProgressInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getApplicationUpgrade(applicationId: string, callback:
        ServiceCallback<ApplicationUpgradeProgressInfo>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/servicefabric.ApplicationUpgradeProgressInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getApplicationUpgrade_2'
    name: >-
      getApplicationUpgrade(string,
      ServiceFabricClientGetApplicationUpgradeOptionalParams,
      ServiceCallback<ApplicationUpgradeProgressInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getApplicationUpgrade(applicationId: string, options:
        ServiceFabricClientGetApplicationUpgradeOptionalParams, callback:
        ServiceCallback<ApplicationUpgradeProgressInfo>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetApplicationUpgradeOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/servicefabric.ApplicationUpgradeProgressInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getBackupPolicyByName'
    name: >-
      getBackupPolicyByName(string,
      Models.ServiceFabricClientGetBackupPolicyByNameOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Gets a particular backup policy identified by {backupPolicyName}'
    syntax:
      content: >-
        function getBackupPolicyByName(backupPolicyName: string, options?:
        Models.ServiceFabricClientGetBackupPolicyByNameOptionalParams)
      parameters:
        - id: backupPolicyName
          type:
            - string
          description: The name of the backup policy.
        - id: options
          type:
            - Models.ServiceFabricClientGetBackupPolicyByNameOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetBackupPolicyByNameResponse>
        description: Promise<Models.GetBackupPolicyByNameResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getBackupPolicyByName_1'
    name: 'getBackupPolicyByName(string, ServiceCallback<BackupPolicyDescription>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getBackupPolicyByName(backupPolicyName: string, callback:
        ServiceCallback<BackupPolicyDescription>)
      parameters:
        - id: backupPolicyName
          type:
            - string
          description: The name of the backup policy.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.BackupPolicyDescription>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getBackupPolicyByName_2'
    name: >-
      getBackupPolicyByName(string,
      ServiceFabricClientGetBackupPolicyByNameOptionalParams,
      ServiceCallback<BackupPolicyDescription>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getBackupPolicyByName(backupPolicyName: string, options:
        ServiceFabricClientGetBackupPolicyByNameOptionalParams, callback:
        ServiceCallback<BackupPolicyDescription>)
      parameters:
        - id: backupPolicyName
          type:
            - string
          description: The name of the backup policy.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetBackupPolicyByNameOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.BackupPolicyDescription>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getBackupPolicyList'
    name: >-
      getBackupPolicyList(Models.ServiceFabricClientGetBackupPolicyListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Get a list of all the backup policies configured.
    syntax:
      content: >-
        function getBackupPolicyList(options?:
        Models.ServiceFabricClientGetBackupPolicyListOptionalParams)
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetBackupPolicyListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetBackupPolicyListResponse>
        description: Promise<Models.GetBackupPolicyListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getBackupPolicyList_1'
    name: getBackupPolicyList(ServiceCallback<PagedBackupPolicyDescriptionList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getBackupPolicyList(callback:
        ServiceCallback<PagedBackupPolicyDescriptionList>)
      parameters:
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/servicefabric.PagedBackupPolicyDescriptionList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getBackupPolicyList_2'
    name: >-
      getBackupPolicyList(ServiceFabricClientGetBackupPolicyListOptionalParams,
      ServiceCallback<PagedBackupPolicyDescriptionList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getBackupPolicyList(options:
        ServiceFabricClientGetBackupPolicyListOptionalParams, callback:
        ServiceCallback<PagedBackupPolicyDescriptionList>)
      parameters:
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetBackupPolicyListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/servicefabric.PagedBackupPolicyDescriptionList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getBackupsFromBackupLocation'
    name: >-
      getBackupsFromBackupLocation(GetBackupByStorageQueryDescription,
      Models.ServiceFabricClientGetBackupsFromBackupLocationOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the list of backups available for the specified backed up entity
      (Application, Service or

      Partition) at the specified backup location (FileShare or Azure Blob
      Storage).
    syntax:
      content: >-
        function
        getBackupsFromBackupLocation(getBackupByStorageQueryDescription:
        GetBackupByStorageQueryDescription, options?:
        Models.ServiceFabricClientGetBackupsFromBackupLocationOptionalParams)
      parameters:
        - id: getBackupByStorageQueryDescription
          type:
            - '@azure/servicefabric.GetBackupByStorageQueryDescription'
          description: |-
            Describes the filters and backup storage details to be
            used for enumerating backups.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetBackupsFromBackupLocationOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetBackupsFromBackupLocationResponse>
        description: Promise<Models.GetBackupsFromBackupLocationResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getBackupsFromBackupLocation_1'
    name: >-
      getBackupsFromBackupLocation(GetBackupByStorageQueryDescription,
      ServiceCallback<PagedBackupInfoList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function
        getBackupsFromBackupLocation(getBackupByStorageQueryDescription:
        GetBackupByStorageQueryDescription, callback:
        ServiceCallback<PagedBackupInfoList>)
      parameters:
        - id: getBackupByStorageQueryDescription
          type:
            - '@azure/servicefabric.GetBackupByStorageQueryDescription'
          description: |-
            Describes the filters and backup storage details to be
            used for enumerating backups.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedBackupInfoList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getBackupsFromBackupLocation_2'
    name: >-
      getBackupsFromBackupLocation(GetBackupByStorageQueryDescription,
      ServiceFabricClientGetBackupsFromBackupLocationOptionalParams,
      ServiceCallback<PagedBackupInfoList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function
        getBackupsFromBackupLocation(getBackupByStorageQueryDescription:
        GetBackupByStorageQueryDescription, options:
        ServiceFabricClientGetBackupsFromBackupLocationOptionalParams, callback:
        ServiceCallback<PagedBackupInfoList>)
      parameters:
        - id: getBackupByStorageQueryDescription
          type:
            - '@azure/servicefabric.GetBackupByStorageQueryDescription'
          description: |-
            Describes the filters and backup storage details to be
            used for enumerating backups.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetBackupsFromBackupLocationOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedBackupInfoList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getChaos'
    name: getChaos(Models.ServiceFabricClientGetChaosOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Get the status of Chaos indicating whether or not Chaos is running, the
      Chaos parameters used

      for running Chaos and the status of the Chaos Schedule.
    syntax:
      content: >-
        function getChaos(options?:
        Models.ServiceFabricClientGetChaosOptionalParams)
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetChaosOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetChaosResponse>
        description: Promise<Models.GetChaosResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getChaos_1'
    name: getChaos(ServiceCallback<Chaos>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getChaos(callback: ServiceCallback<Chaos>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.Chaos>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getChaos_2'
    name: >-
      getChaos(ServiceFabricClientGetChaosOptionalParams,
      ServiceCallback<Chaos>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getChaos(options: ServiceFabricClientGetChaosOptionalParams,
        callback: ServiceCallback<Chaos>)
      parameters:
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetChaosOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.Chaos>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getChaosEvents'
    name: getChaosEvents(Models.ServiceFabricClientGetChaosEventsOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      To get the next segment of the Chaos events, you can specify the
      ContinuationToken. To get the

      start of a new segment of Chaos events, you can specify the time range

      through StartTimeUtc and EndTimeUtc. You cannot specify both the
      ContinuationToken and the time

      range in the same call.

      When there are more than 100 Chaos events, the Chaos events are returned
      in multiple segments

      where a segment contains no more than 100 Chaos events and to get the next
      segment you make a

      call to this API with the continuation token.
    syntax:
      content: >-
        function getChaosEvents(options?:
        Models.ServiceFabricClientGetChaosEventsOptionalParams)
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetChaosEventsOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetChaosEventsResponse>
        description: Promise<Models.GetChaosEventsResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getChaosEvents_1'
    name: getChaosEvents(ServiceCallback<ChaosEventsSegment>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getChaosEvents(callback: ServiceCallback<ChaosEventsSegment>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ChaosEventsSegment>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getChaosEvents_2'
    name: >-
      getChaosEvents(ServiceFabricClientGetChaosEventsOptionalParams,
      ServiceCallback<ChaosEventsSegment>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getChaosEvents(options:
        ServiceFabricClientGetChaosEventsOptionalParams, callback:
        ServiceCallback<ChaosEventsSegment>)
      parameters:
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetChaosEventsOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ChaosEventsSegment>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getChaosSchedule'
    name: getChaosSchedule(Models.ServiceFabricClientGetChaosScheduleOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the version of the Chaos Schedule in use and the Chaos Schedule that
      defines when and how

      to run Chaos.
    syntax:
      content: >-
        function getChaosSchedule(options?:
        Models.ServiceFabricClientGetChaosScheduleOptionalParams)
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetChaosScheduleOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetChaosScheduleResponse>
        description: Promise<Models.GetChaosScheduleResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getChaosSchedule_1'
    name: getChaosSchedule(ServiceCallback<ChaosScheduleDescription>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getChaosSchedule(callback:
        ServiceCallback<ChaosScheduleDescription>)
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ChaosScheduleDescription>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getChaosSchedule_2'
    name: >-
      getChaosSchedule(ServiceFabricClientGetChaosScheduleOptionalParams,
      ServiceCallback<ChaosScheduleDescription>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getChaosSchedule(options:
        ServiceFabricClientGetChaosScheduleOptionalParams, callback:
        ServiceCallback<ChaosScheduleDescription>)
      parameters:
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetChaosScheduleOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ChaosScheduleDescription>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterConfiguration'
    name: >-
      getClusterConfiguration(string,
      Models.ServiceFabricClientGetClusterConfigurationOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The cluster configuration contains properties of the cluster that include
      different node types

      on the cluster,

      security configurations, fault, and upgrade domain topologies, etc.
    syntax:
      content: >-
        function getClusterConfiguration(configurationApiVersion: string,
        options?:
        Models.ServiceFabricClientGetClusterConfigurationOptionalParams)
      parameters:
        - id: configurationApiVersion
          type:
            - string
          description: The API version of the Standalone cluster json configuration.
        - id: options
          type:
            - Models.ServiceFabricClientGetClusterConfigurationOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetClusterConfigurationResponse>
        description: Promise<Models.GetClusterConfigurationResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterConfiguration_1'
    name: 'getClusterConfiguration(string, ServiceCallback<ClusterConfiguration>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getClusterConfiguration(configurationApiVersion: string,
        callback: ServiceCallback<ClusterConfiguration>)
      parameters:
        - id: configurationApiVersion
          type:
            - string
          description: The API version of the Standalone cluster json configuration.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterConfiguration>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterConfiguration_2'
    name: >-
      getClusterConfiguration(string,
      ServiceFabricClientGetClusterConfigurationOptionalParams,
      ServiceCallback<ClusterConfiguration>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getClusterConfiguration(configurationApiVersion: string,
        options: ServiceFabricClientGetClusterConfigurationOptionalParams,
        callback: ServiceCallback<ClusterConfiguration>)
      parameters:
        - id: configurationApiVersion
          type:
            - string
          description: The API version of the Standalone cluster json configuration.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetClusterConfigurationOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterConfiguration>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getClusterConfigurationUpgradeStatus
    name: >-
      getClusterConfigurationUpgradeStatus(Models.ServiceFabricClientGetClusterConfigurationUpgradeStatusOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Get the cluster configuration upgrade status details of a Service Fabric
      standalone cluster.
    syntax:
      content: >-
        function getClusterConfigurationUpgradeStatus(options?:
        Models.ServiceFabricClientGetClusterConfigurationUpgradeStatusOptionalParams)
      parameters:
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetClusterConfigurationUpgradeStatusOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetClusterConfigurationUpgradeStatusResponse>
        description: Promise<Models.GetClusterConfigurationUpgradeStatusResponse>
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getClusterConfigurationUpgradeStatus_1
    name: >-
      getClusterConfigurationUpgradeStatus(ServiceCallback<ClusterConfigurationUpgradeStatusInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getClusterConfigurationUpgradeStatus(callback:
        ServiceCallback<ClusterConfigurationUpgradeStatusInfo>)
      parameters:
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/servicefabric.ClusterConfigurationUpgradeStatusInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getClusterConfigurationUpgradeStatus_2
    name: >-
      getClusterConfigurationUpgradeStatus(ServiceFabricClientGetClusterConfigurationUpgradeStatusOptionalParams,
      ServiceCallback<ClusterConfigurationUpgradeStatusInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getClusterConfigurationUpgradeStatus(options:
        ServiceFabricClientGetClusterConfigurationUpgradeStatusOptionalParams,
        callback: ServiceCallback<ClusterConfigurationUpgradeStatusInfo>)
      parameters:
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetClusterConfigurationUpgradeStatusOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/servicefabric.ClusterConfigurationUpgradeStatusInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterEventList'
    name: >-
      getClusterEventList(string, string,
      Models.ServiceFabricClientGetClusterEventListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: The response is list of ClusterEvent objects.
    syntax:
      content: >-
        function getClusterEventList(startTimeUtc: string, endTimeUtc: string,
        options?: Models.ServiceFabricClientGetClusterEventListOptionalParams)
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: options
          type:
            - Models.ServiceFabricClientGetClusterEventListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetClusterEventListResponse>
        description: Promise<Models.GetClusterEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterEventList_1'
    name: >-
      getClusterEventList(string, string,
      ServiceCallback<Models.ClusterEventUnion[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getClusterEventList(startTimeUtc: string, endTimeUtc: string,
        callback: ServiceCallback<Models.ClusterEventUnion[]>)
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: callback
          type:
            - 'ServiceCallback<Models.ClusterEventUnion[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterEventList_2'
    name: >-
      getClusterEventList(string, string,
      ServiceFabricClientGetClusterEventListOptionalParams,
      ServiceCallback<Models.ClusterEventUnion[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getClusterEventList(startTimeUtc: string, endTimeUtc: string,
        options: ServiceFabricClientGetClusterEventListOptionalParams, callback:
        ServiceCallback<Models.ClusterEventUnion[]>)
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetClusterEventListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - 'ServiceCallback<Models.ClusterEventUnion[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterHealth'
    name: getClusterHealth(Models.ServiceFabricClientGetClusterHealthOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Use EventsHealthStateFilter to filter the collection of health events
      reported on the cluster

      based on the health state.

      Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to
      filter the collection

      of nodes and applications returned based on their aggregated health state.
    syntax:
      content: >-
        function getClusterHealth(options?:
        Models.ServiceFabricClientGetClusterHealthOptionalParams)
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetClusterHealthOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetClusterHealthResponse>
        description: Promise<Models.GetClusterHealthResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterHealth_1'
    name: getClusterHealth(ServiceCallback<ClusterHealth>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getClusterHealth(callback: ServiceCallback<ClusterHealth>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterHealth>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterHealth_2'
    name: >-
      getClusterHealth(ServiceFabricClientGetClusterHealthOptionalParams,
      ServiceCallback<ClusterHealth>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getClusterHealth(options:
        ServiceFabricClientGetClusterHealthOptionalParams, callback:
        ServiceCallback<ClusterHealth>)
      parameters:
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetClusterHealthOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterHealth>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterHealthChunk'
    name: >-
      getClusterHealthChunk(Models.ServiceFabricClientGetClusterHealthChunkOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the health of a Service Fabric cluster using health chunks. Includes
      the aggregated health

      state of the cluster, but none of the cluster entities.

      To expand the cluster health and get the health state of all or some of
      the entities, use the

      POST URI and specify the cluster health chunk query description.
    syntax:
      content: >-
        function getClusterHealthChunk(options?:
        Models.ServiceFabricClientGetClusterHealthChunkOptionalParams)
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetClusterHealthChunkOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetClusterHealthChunkResponse>
        description: Promise<Models.GetClusterHealthChunkResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterHealthChunk_1'
    name: getClusterHealthChunk(ServiceCallback<ClusterHealthChunk>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getClusterHealthChunk(callback:
        ServiceCallback<ClusterHealthChunk>)
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterHealthChunk>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterHealthChunk_2'
    name: >-
      getClusterHealthChunk(ServiceFabricClientGetClusterHealthChunkOptionalParams,
      ServiceCallback<ClusterHealthChunk>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getClusterHealthChunk(options:
        ServiceFabricClientGetClusterHealthChunkOptionalParams, callback:
        ServiceCallback<ClusterHealthChunk>)
      parameters:
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetClusterHealthChunkOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterHealthChunk>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getClusterHealthChunkUsingPolicyAndAdvancedFilters
    name: >-
      getClusterHealthChunkUsingPolicyAndAdvancedFilters(Models.ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the health of a Service Fabric cluster using health chunks. The
      health evaluation is done

      based on the input cluster health chunk query description.

      The query description allows users to specify health policies for
      evaluating the cluster and its

      children.

      Users can specify very flexible filters to select which cluster entities
      to return. The

      selection can be done based on the entities health state and based on the
      hierarchy.

      The query can return multi-level children of the entities based on the
      specified filters. For

      example, it can return one application with a specified name, and for this
      application, return

      only services that are in Error or Warning, and all partitions and
      replicas for one of these

      services.
    syntax:
      content: >-
        function getClusterHealthChunkUsingPolicyAndAdvancedFilters(options?:
        Models.ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams)
      parameters:
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<Models.GetClusterHealthChunkUsingPolicyAndAdvancedFiltersResponse>
        description: >-
          Promise<Models.GetClusterHealthChunkUsingPolicyAndAdvancedFiltersResponse>
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getClusterHealthChunkUsingPolicyAndAdvancedFilters_1
    name: >-
      getClusterHealthChunkUsingPolicyAndAdvancedFilters(ServiceCallback<ClusterHealthChunk>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getClusterHealthChunkUsingPolicyAndAdvancedFilters(callback:
        ServiceCallback<ClusterHealthChunk>)
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterHealthChunk>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getClusterHealthChunkUsingPolicyAndAdvancedFilters_2
    name: >-
      getClusterHealthChunkUsingPolicyAndAdvancedFilters(ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams,
      ServiceCallback<ClusterHealthChunk>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getClusterHealthChunkUsingPolicyAndAdvancedFilters(options:
        ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams,
        callback: ServiceCallback<ClusterHealthChunk>)
      parameters:
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterHealthChunk>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterHealthUsingPolicy'
    name: >-
      getClusterHealthUsingPolicy(Models.ServiceFabricClientGetClusterHealthUsingPolicyOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Use EventsHealthStateFilter to filter the collection of health events
      reported on the cluster

      based on the health state.

      Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to
      filter the collection

      of nodes and applications returned based on their aggregated health state.

      Use ClusterHealthPolicies to override the health policies used to evaluate
      the health.
    syntax:
      content: >-
        function getClusterHealthUsingPolicy(options?:
        Models.ServiceFabricClientGetClusterHealthUsingPolicyOptionalParams)
      parameters:
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetClusterHealthUsingPolicyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetClusterHealthUsingPolicyResponse>
        description: Promise<Models.GetClusterHealthUsingPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterHealthUsingPolicy_1'
    name: getClusterHealthUsingPolicy(ServiceCallback<ClusterHealth>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getClusterHealthUsingPolicy(callback:
        ServiceCallback<ClusterHealth>)
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterHealth>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterHealthUsingPolicy_2'
    name: >-
      getClusterHealthUsingPolicy(ServiceFabricClientGetClusterHealthUsingPolicyOptionalParams,
      ServiceCallback<ClusterHealth>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getClusterHealthUsingPolicy(options:
        ServiceFabricClientGetClusterHealthUsingPolicyOptionalParams, callback:
        ServiceCallback<ClusterHealth>)
      parameters:
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetClusterHealthUsingPolicyOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterHealth>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterLoad'
    name: getClusterLoad(Models.ServiceFabricClientGetClusterLoadOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieves the load information of a Service Fabric cluster for all the
      metrics that have load or

      capacity defined.
    syntax:
      content: >-
        function getClusterLoad(options?:
        Models.ServiceFabricClientGetClusterLoadOptionalParams)
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetClusterLoadOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetClusterLoadResponse>
        description: Promise<Models.GetClusterLoadResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterLoad_1'
    name: getClusterLoad(ServiceCallback<ClusterLoadInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getClusterLoad(callback: ServiceCallback<ClusterLoadInfo>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterLoadInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterLoad_2'
    name: >-
      getClusterLoad(ServiceFabricClientGetClusterLoadOptionalParams,
      ServiceCallback<ClusterLoadInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getClusterLoad(options:
        ServiceFabricClientGetClusterLoadOptionalParams, callback:
        ServiceCallback<ClusterLoadInfo>)
      parameters:
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetClusterLoadOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterLoadInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterManifest'
    name: >-
      getClusterManifest(Models.ServiceFabricClientGetClusterManifestOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Get the Service Fabric cluster manifest. The cluster manifest contains
      properties of the cluster

      that include different node types on the cluster,

      security configurations, fault, and upgrade domain topologies, etc.

      These properties are specified as part of the ClusterConfig.JSON file
      while deploying a

      stand-alone cluster. However, most of the information in the cluster
      manifest

      is generated internally by service fabric during cluster deployment in
      other deployment

      scenarios (e.g. when using Azure portal).


      The contents of the cluster manifest are for informational purposes only
      and users are not

      expected to take a dependency on the format of the file contents or its
      interpretation.
    syntax:
      content: >-
        function getClusterManifest(options?:
        Models.ServiceFabricClientGetClusterManifestOptionalParams)
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetClusterManifestOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetClusterManifestResponse>
        description: Promise<Models.GetClusterManifestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterManifest_1'
    name: getClusterManifest(ServiceCallback<ClusterManifest>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getClusterManifest(callback: ServiceCallback<ClusterManifest>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterManifest>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterManifest_2'
    name: >-
      getClusterManifest(ServiceFabricClientGetClusterManifestOptionalParams,
      ServiceCallback<ClusterManifest>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getClusterManifest(options:
        ServiceFabricClientGetClusterManifestOptionalParams, callback:
        ServiceCallback<ClusterManifest>)
      parameters:
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetClusterManifestOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterManifest>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterUpgradeProgress'
    name: >-
      getClusterUpgradeProgress(Models.ServiceFabricClientGetClusterUpgradeProgressOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the current progress of the ongoing cluster upgrade. If no upgrade is
      currently in

      progress, get the last state of the previous cluster upgrade.
    syntax:
      content: >-
        function getClusterUpgradeProgress(options?:
        Models.ServiceFabricClientGetClusterUpgradeProgressOptionalParams)
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetClusterUpgradeProgressOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetClusterUpgradeProgressResponse>
        description: Promise<Models.GetClusterUpgradeProgressResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterUpgradeProgress_1'
    name: getClusterUpgradeProgress(ServiceCallback<ClusterUpgradeProgressObject>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getClusterUpgradeProgress(callback:
        ServiceCallback<ClusterUpgradeProgressObject>)
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterUpgradeProgressObject>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterUpgradeProgress_2'
    name: >-
      getClusterUpgradeProgress(ServiceFabricClientGetClusterUpgradeProgressOptionalParams,
      ServiceCallback<ClusterUpgradeProgressObject>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getClusterUpgradeProgress(options:
        ServiceFabricClientGetClusterUpgradeProgressOptionalParams, callback:
        ServiceCallback<ClusterUpgradeProgressObject>)
      parameters:
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetClusterUpgradeProgressOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterUpgradeProgressObject>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterVersion'
    name: >-
      getClusterVersion(Models.ServiceFabricClientGetClusterVersionOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      If a cluster upgrade is happening, then this API will return the lowest
      (older) version of the

      current and target cluster runtime versions.
    syntax:
      content: >-
        function getClusterVersion(options?:
        Models.ServiceFabricClientGetClusterVersionOptionalParams)
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetClusterVersionOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetClusterVersionResponse>
        description: Promise<Models.GetClusterVersionResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterVersion_1'
    name: getClusterVersion(ServiceCallback<ClusterVersion>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getClusterVersion(callback: ServiceCallback<ClusterVersion>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterVersion>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getClusterVersion_2'
    name: >-
      getClusterVersion(ServiceFabricClientGetClusterVersionOptionalParams,
      ServiceCallback<ClusterVersion>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getClusterVersion(options:
        ServiceFabricClientGetClusterVersionOptionalParams, callback:
        ServiceCallback<ClusterVersion>)
      parameters:
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetClusterVersionOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ClusterVersion>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getComposeDeploymentStatus'
    name: >-
      getComposeDeploymentStatus(string,
      Models.ServiceFabricClientGetComposeDeploymentStatusOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns the status of the compose deployment that was created or in the
      process of being created

      in the Service Fabric cluster and whose name matches the one specified as
      the parameter. The

      response includes the name, status, and other details about the
      deployment.
    syntax:
      content: >-
        function getComposeDeploymentStatus(deploymentName: string, options?:
        Models.ServiceFabricClientGetComposeDeploymentStatusOptionalParams)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The identity of the deployment.
        - id: options
          type:
            - Models.ServiceFabricClientGetComposeDeploymentStatusOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetComposeDeploymentStatusResponse>
        description: Promise<Models.GetComposeDeploymentStatusResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getComposeDeploymentStatus_1'
    name: >-
      getComposeDeploymentStatus(string,
      ServiceCallback<ComposeDeploymentStatusInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getComposeDeploymentStatus(deploymentName: string, callback:
        ServiceCallback<ComposeDeploymentStatusInfo>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The identity of the deployment.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ComposeDeploymentStatusInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getComposeDeploymentStatus_2'
    name: >-
      getComposeDeploymentStatus(string,
      ServiceFabricClientGetComposeDeploymentStatusOptionalParams,
      ServiceCallback<ComposeDeploymentStatusInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getComposeDeploymentStatus(deploymentName: string, options:
        ServiceFabricClientGetComposeDeploymentStatusOptionalParams, callback:
        ServiceCallback<ComposeDeploymentStatusInfo>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The identity of the deployment.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetComposeDeploymentStatusOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ComposeDeploymentStatusInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getComposeDeploymentStatusList'
    name: >-
      getComposeDeploymentStatusList(Models.ServiceFabricClientGetComposeDeploymentStatusListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the status about the compose deployments that were created or in the
      process of being

      created in the Service Fabric cluster. The response includes the name,
      status, and other details

      about the compose deployments. If the list of deployments do not fit in a
      page, one page of

      results is returned as well as a continuation token, which can be used to
      get the next page.
    syntax:
      content: >-
        function getComposeDeploymentStatusList(options?:
        Models.ServiceFabricClientGetComposeDeploymentStatusListOptionalParams)
      parameters:
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetComposeDeploymentStatusListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetComposeDeploymentStatusListResponse>
        description: Promise<Models.GetComposeDeploymentStatusListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getComposeDeploymentStatusList_1'
    name: >-
      getComposeDeploymentStatusList(ServiceCallback<PagedComposeDeploymentStatusInfoList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getComposeDeploymentStatusList(callback:
        ServiceCallback<PagedComposeDeploymentStatusInfoList>)
      parameters:
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/servicefabric.PagedComposeDeploymentStatusInfoList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getComposeDeploymentStatusList_2'
    name: >-
      getComposeDeploymentStatusList(ServiceFabricClientGetComposeDeploymentStatusListOptionalParams,
      ServiceCallback<PagedComposeDeploymentStatusInfoList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getComposeDeploymentStatusList(options:
        ServiceFabricClientGetComposeDeploymentStatusListOptionalParams,
        callback: ServiceCallback<PagedComposeDeploymentStatusInfoList>)
      parameters:
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetComposeDeploymentStatusListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/servicefabric.PagedComposeDeploymentStatusInfoList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getComposeDeploymentUpgradeProgress
    name: >-
      getComposeDeploymentUpgradeProgress(string,
      Models.ServiceFabricClientGetComposeDeploymentUpgradeProgressOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns the information about the state of the compose deployment upgrade
      along with details to

      aid debugging application health issues.
    syntax:
      content: >-
        function getComposeDeploymentUpgradeProgress(deploymentName: string,
        options?:
        Models.ServiceFabricClientGetComposeDeploymentUpgradeProgressOptionalParams)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The identity of the deployment.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetComposeDeploymentUpgradeProgressOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetComposeDeploymentUpgradeProgressResponse>
        description: Promise<Models.GetComposeDeploymentUpgradeProgressResponse>
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getComposeDeploymentUpgradeProgress_1
    name: >-
      getComposeDeploymentUpgradeProgress(string,
      ServiceCallback<ComposeDeploymentUpgradeProgressInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getComposeDeploymentUpgradeProgress(deploymentName: string,
        callback: ServiceCallback<ComposeDeploymentUpgradeProgressInfo>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The identity of the deployment.
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/servicefabric.ComposeDeploymentUpgradeProgressInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getComposeDeploymentUpgradeProgress_2
    name: >-
      getComposeDeploymentUpgradeProgress(string,
      ServiceFabricClientGetComposeDeploymentUpgradeProgressOptionalParams,
      ServiceCallback<ComposeDeploymentUpgradeProgressInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getComposeDeploymentUpgradeProgress(deploymentName: string,
        options:
        ServiceFabricClientGetComposeDeploymentUpgradeProgressOptionalParams,
        callback: ServiceCallback<ComposeDeploymentUpgradeProgressInfo>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The identity of the deployment.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetComposeDeploymentUpgradeProgressOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/servicefabric.ComposeDeploymentUpgradeProgressInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getConfigurationOverrides'
    name: >-
      getConfigurationOverrides(string,
      Models.ServiceFabricClientGetConfigurationOverridesOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This api allows getting all existing configuration overrides on the
      specified node.
    syntax:
      content: >-
        function getConfigurationOverrides(nodeName: string, options?:
        Models.ServiceFabricClientGetConfigurationOverridesOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: options
          type:
            - Models.ServiceFabricClientGetConfigurationOverridesOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetConfigurationOverridesResponse>
        description: Promise<Models.GetConfigurationOverridesResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getConfigurationOverrides_1'
    name: >-
      getConfigurationOverrides(string,
      ServiceCallback<ConfigParameterOverride[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getConfigurationOverrides(nodeName: string, callback:
        ServiceCallback<ConfigParameterOverride[]>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.ConfigParameterOverride[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getConfigurationOverrides_2'
    name: >-
      getConfigurationOverrides(string,
      ServiceFabricClientGetConfigurationOverridesOptionalParams,
      ServiceCallback<ConfigParameterOverride[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getConfigurationOverrides(nodeName: string, options:
        ServiceFabricClientGetConfigurationOverridesOptionalParams, callback:
        ServiceCallback<ConfigParameterOverride[]>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetConfigurationOverridesOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.ConfigParameterOverride[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getContainerLogsDeployedOnNode'
    name: >-
      getContainerLogsDeployedOnNode(string, string, string, string,
      Models.ServiceFabricClientGetContainerLogsDeployedOnNodeOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the container logs for container deployed on a Service Fabric node
      for the given code

      package.
    syntax:
      content: >-
        function getContainerLogsDeployedOnNode(nodeName: string, applicationId:
        string, serviceManifestName: string, codePackageName: string, options?:
        Models.ServiceFabricClientGetContainerLogsDeployedOnNodeOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceManifestName
          type:
            - string
          description: |-
            The name of a service manifest registered as part of an application
            type in a Service Fabric cluster.
        - id: codePackageName
          type:
            - string
          description: >-
            The name of code package specified in service manifest registered as
            part

            of an application type in a Service Fabric cluster.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetContainerLogsDeployedOnNodeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetContainerLogsDeployedOnNodeResponse>
        description: Promise<Models.GetContainerLogsDeployedOnNodeResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getContainerLogsDeployedOnNode_1'
    name: >-
      getContainerLogsDeployedOnNode(string, string, string, string,
      ServiceCallback<ContainerLogs>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getContainerLogsDeployedOnNode(nodeName: string, applicationId:
        string, serviceManifestName: string, codePackageName: string, callback:
        ServiceCallback<ContainerLogs>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceManifestName
          type:
            - string
          description: |-
            The name of a service manifest registered as part of an application
            type in a Service Fabric cluster.
        - id: codePackageName
          type:
            - string
          description: >-
            The name of code package specified in service manifest registered as
            part

            of an application type in a Service Fabric cluster.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ContainerLogs>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getContainerLogsDeployedOnNode_2'
    name: >-
      getContainerLogsDeployedOnNode(string, string, string, string,
      ServiceFabricClientGetContainerLogsDeployedOnNodeOptionalParams,
      ServiceCallback<ContainerLogs>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getContainerLogsDeployedOnNode(nodeName: string, applicationId:
        string, serviceManifestName: string, codePackageName: string, options:
        ServiceFabricClientGetContainerLogsDeployedOnNodeOptionalParams,
        callback: ServiceCallback<ContainerLogs>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceManifestName
          type:
            - string
          description: |-
            The name of a service manifest registered as part of an application
            type in a Service Fabric cluster.
        - id: codePackageName
          type:
            - string
          description: >-
            The name of code package specified in service manifest registered as
            part

            of an application type in a Service Fabric cluster.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetContainerLogsDeployedOnNodeOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ContainerLogs>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getContainersEventList'
    name: >-
      getContainersEventList(string, string,
      Models.ServiceFabricClientGetContainersEventListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: The response is list of ContainerInstanceEvent objects.
    syntax:
      content: >-
        function getContainersEventList(startTimeUtc: string, endTimeUtc:
        string, options?:
        Models.ServiceFabricClientGetContainersEventListOptionalParams)
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: options
          type:
            - Models.ServiceFabricClientGetContainersEventListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetContainersEventListResponse>
        description: Promise<Models.GetContainersEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getContainersEventList_1'
    name: >-
      getContainersEventList(string, string,
      ServiceCallback<ContainerInstanceEvent[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getContainersEventList(startTimeUtc: string, endTimeUtc:
        string, callback: ServiceCallback<ContainerInstanceEvent[]>)
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.ContainerInstanceEvent[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getContainersEventList_2'
    name: >-
      getContainersEventList(string, string,
      ServiceFabricClientGetContainersEventListOptionalParams,
      ServiceCallback<ContainerInstanceEvent[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getContainersEventList(startTimeUtc: string, endTimeUtc:
        string, options:
        ServiceFabricClientGetContainersEventListOptionalParams, callback:
        ServiceCallback<ContainerInstanceEvent[]>)
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetContainersEventListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.ContainerInstanceEvent[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getCorrelatedEventList'
    name: >-
      getCorrelatedEventList(string,
      Models.ServiceFabricClientGetCorrelatedEventListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: The response is list of FabricEvents.
    syntax:
      content: >-
        function getCorrelatedEventList(eventInstanceId: string, options?:
        Models.ServiceFabricClientGetCorrelatedEventListOptionalParams)
      parameters:
        - id: eventInstanceId
          type:
            - string
          description: The EventInstanceId.
        - id: options
          type:
            - Models.ServiceFabricClientGetCorrelatedEventListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetCorrelatedEventListResponse>
        description: Promise<Models.GetCorrelatedEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getCorrelatedEventList_1'
    name: 'getCorrelatedEventList(string, ServiceCallback<Models.FabricEventUnion[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getCorrelatedEventList(eventInstanceId: string, callback:
        ServiceCallback<Models.FabricEventUnion[]>)
      parameters:
        - id: eventInstanceId
          type:
            - string
          description: The EventInstanceId.
        - id: callback
          type:
            - 'ServiceCallback<Models.FabricEventUnion[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getCorrelatedEventList_2'
    name: >-
      getCorrelatedEventList(string,
      ServiceFabricClientGetCorrelatedEventListOptionalParams,
      ServiceCallback<Models.FabricEventUnion[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getCorrelatedEventList(eventInstanceId: string, options:
        ServiceFabricClientGetCorrelatedEventListOptionalParams, callback:
        ServiceCallback<Models.FabricEventUnion[]>)
      parameters:
        - id: eventInstanceId
          type:
            - string
          description: The EventInstanceId.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetCorrelatedEventListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - 'ServiceCallback<Models.FabricEventUnion[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDataLossProgress'
    name: >-
      getDataLossProgress(string, string, string,
      Models.ServiceFabricClientGetDataLossProgressOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the progress of a data loss operation started with StartDataLoss,
      using the OperationId.
    syntax:
      content: >-
        function getDataLossProgress(serviceId: string, partitionId: string,
        operationId: string, options?:
        Models.ServiceFabricClientGetDataLossProgressOptionalParams)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: operationId
          type:
            - string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: options
          type:
            - Models.ServiceFabricClientGetDataLossProgressOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDataLossProgressResponse>
        description: Promise<Models.GetDataLossProgressResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDataLossProgress_1'
    name: >-
      getDataLossProgress(string, string, string,
      ServiceCallback<PartitionDataLossProgress>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDataLossProgress(serviceId: string, partitionId: string,
        operationId: string, callback:
        ServiceCallback<PartitionDataLossProgress>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: operationId
          type:
            - string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PartitionDataLossProgress>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDataLossProgress_2'
    name: >-
      getDataLossProgress(string, string, string,
      ServiceFabricClientGetDataLossProgressOptionalParams,
      ServiceCallback<PartitionDataLossProgress>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDataLossProgress(serviceId: string, partitionId: string,
        operationId: string, options:
        ServiceFabricClientGetDataLossProgressOptionalParams, callback:
        ServiceCallback<PartitionDataLossProgress>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: operationId
          type:
            - string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetDataLossProgressOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PartitionDataLossProgress>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationHealth'
    name: >-
      getDeployedApplicationHealth(string, string,
      Models.ServiceFabricClientGetDeployedApplicationHealthOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the information about health of an application deployed on a Service
      Fabric node. Use

      EventsHealthStateFilter to optionally filter for the collection of
      HealthEvent objects reported

      on the deployed application based on health state. Use
      DeployedServicePackagesHealthStateFilter

      to optionally filter for DeployedServicePackageHealth children based on
      health state.
    syntax:
      content: >-
        function getDeployedApplicationHealth(nodeName: string, applicationId:
        string, options?:
        Models.ServiceFabricClientGetDeployedApplicationHealthOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetDeployedApplicationHealthOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeployedApplicationHealthResponse>
        description: Promise<Models.GetDeployedApplicationHealthResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationHealth_1'
    name: >-
      getDeployedApplicationHealth(string, string,
      ServiceCallback<DeployedApplicationHealth>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeployedApplicationHealth(nodeName: string, applicationId:
        string, callback: ServiceCallback<DeployedApplicationHealth>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.DeployedApplicationHealth>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationHealth_2'
    name: >-
      getDeployedApplicationHealth(string, string,
      ServiceFabricClientGetDeployedApplicationHealthOptionalParams,
      ServiceCallback<DeployedApplicationHealth>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeployedApplicationHealth(nodeName: string, applicationId:
        string, options:
        ServiceFabricClientGetDeployedApplicationHealthOptionalParams, callback:
        ServiceCallback<DeployedApplicationHealth>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetDeployedApplicationHealthOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.DeployedApplicationHealth>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedApplicationHealthUsingPolicy
    name: >-
      getDeployedApplicationHealthUsingPolicy(string, string,
      Models.ServiceFabricClientGetDeployedApplicationHealthUsingPolicyOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the information about health of an application deployed on a Service
      Fabric node using the

      specified policy. Use EventsHealthStateFilter to optionally filter for the
      collection of

      HealthEvent objects reported on the deployed application based on health
      state. Use

      DeployedServicePackagesHealthStateFilter to optionally filter for
      DeployedServicePackageHealth

      children based on health state. Use ApplicationHealthPolicy to optionally
      override the health

      policies used to evaluate the health. This API only uses
      'ConsiderWarningAsError' field of the

      ApplicationHealthPolicy. The rest of the fields are ignored while
      evaluating the health of the

      deployed application.
    syntax:
      content: >-
        function getDeployedApplicationHealthUsingPolicy(nodeName: string,
        applicationId: string, options?:
        Models.ServiceFabricClientGetDeployedApplicationHealthUsingPolicyOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetDeployedApplicationHealthUsingPolicyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeployedApplicationHealthUsingPolicyResponse>
        description: Promise<Models.GetDeployedApplicationHealthUsingPolicyResponse>
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedApplicationHealthUsingPolicy_1
    name: >-
      getDeployedApplicationHealthUsingPolicy(string, string,
      ServiceCallback<DeployedApplicationHealth>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeployedApplicationHealthUsingPolicy(nodeName: string,
        applicationId: string, callback:
        ServiceCallback<DeployedApplicationHealth>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.DeployedApplicationHealth>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedApplicationHealthUsingPolicy_2
    name: >-
      getDeployedApplicationHealthUsingPolicy(string, string,
      ServiceFabricClientGetDeployedApplicationHealthUsingPolicyOptionalParams,
      ServiceCallback<DeployedApplicationHealth>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeployedApplicationHealthUsingPolicy(nodeName: string,
        applicationId: string, options:
        ServiceFabricClientGetDeployedApplicationHealthUsingPolicyOptionalParams,
        callback: ServiceCallback<DeployedApplicationHealth>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetDeployedApplicationHealthUsingPolicyOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.DeployedApplicationHealth>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationInfo'
    name: >-
      getDeployedApplicationInfo(string, string,
      Models.ServiceFabricClientGetDeployedApplicationInfoOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This query returns system application information if the application ID
      provided is for system

      application. Results encompass deployed applications in active,
      activating, and downloading

      states. This query requires that the node name corresponds to a node on
      the cluster. The query

      fails if the provided node name does not point to any active Service
      Fabric nodes on the

      cluster.
    syntax:
      content: >-
        function getDeployedApplicationInfo(nodeName: string, applicationId:
        string, options?:
        Models.ServiceFabricClientGetDeployedApplicationInfoOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - Models.ServiceFabricClientGetDeployedApplicationInfoOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeployedApplicationInfoResponse>
        description: Promise<Models.GetDeployedApplicationInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationInfo_1'
    name: >-
      getDeployedApplicationInfo(string, string,
      ServiceCallback<DeployedApplicationInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeployedApplicationInfo(nodeName: string, applicationId:
        string, callback: ServiceCallback<DeployedApplicationInfo>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.DeployedApplicationInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationInfo_2'
    name: >-
      getDeployedApplicationInfo(string, string,
      ServiceFabricClientGetDeployedApplicationInfoOptionalParams,
      ServiceCallback<DeployedApplicationInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeployedApplicationInfo(nodeName: string, applicationId:
        string, options:
        ServiceFabricClientGetDeployedApplicationInfoOptionalParams, callback:
        ServiceCallback<DeployedApplicationInfo>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetDeployedApplicationInfoOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.DeployedApplicationInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationInfoList'
    name: >-
      getDeployedApplicationInfoList(string,
      Models.ServiceFabricClientGetDeployedApplicationInfoListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the list of applications deployed on a Service Fabric node. The
      results do not include

      information about deployed system applications unless explicitly queried
      for by ID. Results

      encompass deployed applications in active, activating, and downloading
      states. This query

      requires that the node name corresponds to a node on the cluster. The
      query fails if the

      provided node name does not point to any active Service Fabric nodes on
      the cluster.
    syntax:
      content: >-
        function getDeployedApplicationInfoList(nodeName: string, options?:
        Models.ServiceFabricClientGetDeployedApplicationInfoListOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetDeployedApplicationInfoListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeployedApplicationInfoListResponse>
        description: Promise<Models.GetDeployedApplicationInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationInfoList_1'
    name: >-
      getDeployedApplicationInfoList(string,
      ServiceCallback<PagedDeployedApplicationInfoList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeployedApplicationInfoList(nodeName: string, callback:
        ServiceCallback<PagedDeployedApplicationInfoList>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/servicefabric.PagedDeployedApplicationInfoList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationInfoList_2'
    name: >-
      getDeployedApplicationInfoList(string,
      ServiceFabricClientGetDeployedApplicationInfoListOptionalParams,
      ServiceCallback<PagedDeployedApplicationInfoList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeployedApplicationInfoList(nodeName: string, options:
        ServiceFabricClientGetDeployedApplicationInfoListOptionalParams,
        callback: ServiceCallback<PagedDeployedApplicationInfoList>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetDeployedApplicationInfoListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/servicefabric.PagedDeployedApplicationInfoList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedCodePackageInfoList'
    name: >-
      getDeployedCodePackageInfoList(string, string,
      Models.ServiceFabricClientGetDeployedCodePackageInfoListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the list of code packages deployed on a Service Fabric node for the
      given application.
    syntax:
      content: >-
        function getDeployedCodePackageInfoList(nodeName: string, applicationId:
        string, options?:
        Models.ServiceFabricClientGetDeployedCodePackageInfoListOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetDeployedCodePackageInfoListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeployedCodePackageInfoListResponse>
        description: Promise<Models.GetDeployedCodePackageInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedCodePackageInfoList_1'
    name: >-
      getDeployedCodePackageInfoList(string, string,
      ServiceCallback<DeployedCodePackageInfo[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeployedCodePackageInfoList(nodeName: string, applicationId:
        string, callback: ServiceCallback<DeployedCodePackageInfo[]>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.DeployedCodePackageInfo[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedCodePackageInfoList_2'
    name: >-
      getDeployedCodePackageInfoList(string, string,
      ServiceFabricClientGetDeployedCodePackageInfoListOptionalParams,
      ServiceCallback<DeployedCodePackageInfo[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeployedCodePackageInfoList(nodeName: string, applicationId:
        string, options:
        ServiceFabricClientGetDeployedCodePackageInfoListOptionalParams,
        callback: ServiceCallback<DeployedCodePackageInfo[]>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetDeployedCodePackageInfoListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.DeployedCodePackageInfo[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServicePackageHealth'
    name: >-
      getDeployedServicePackageHealth(string, string, string,
      Models.ServiceFabricClientGetDeployedServicePackageHealthOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the information about health of a service package for a specific
      application deployed on a

      Service Fabric node. Use EventsHealthStateFilter to optionally filter for
      the collection of

      HealthEvent objects reported on the deployed service package based on
      health state.
    syntax:
      content: >-
        function getDeployedServicePackageHealth(nodeName: string,
        applicationId: string, servicePackageName: string, options?:
        Models.ServiceFabricClientGetDeployedServicePackageHealthOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: servicePackageName
          type:
            - string
          description: The name of the service package.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetDeployedServicePackageHealthOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeployedServicePackageHealthResponse>
        description: Promise<Models.GetDeployedServicePackageHealthResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServicePackageHealth_1'
    name: >-
      getDeployedServicePackageHealth(string, string, string,
      ServiceCallback<DeployedServicePackageHealth>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeployedServicePackageHealth(nodeName: string,
        applicationId: string, servicePackageName: string, callback:
        ServiceCallback<DeployedServicePackageHealth>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: servicePackageName
          type:
            - string
          description: The name of the service package.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.DeployedServicePackageHealth>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServicePackageHealth_2'
    name: >-
      getDeployedServicePackageHealth(string, string, string,
      ServiceFabricClientGetDeployedServicePackageHealthOptionalParams,
      ServiceCallback<DeployedServicePackageHealth>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeployedServicePackageHealth(nodeName: string,
        applicationId: string, servicePackageName: string, options:
        ServiceFabricClientGetDeployedServicePackageHealthOptionalParams,
        callback: ServiceCallback<DeployedServicePackageHealth>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: servicePackageName
          type:
            - string
          description: The name of the service package.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetDeployedServicePackageHealthOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.DeployedServicePackageHealth>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServicePackageHealthUsingPolicy
    name: >-
      getDeployedServicePackageHealthUsingPolicy(string, string, string,
      Models.ServiceFabricClientGetDeployedServicePackageHealthUsingPolicyOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the information about health of a service package for a specific
      application deployed on a

      Service Fabric node. using the specified policy. Use
      EventsHealthStateFilter to optionally

      filter for the collection of HealthEvent objects reported on the deployed
      service package based

      on health state. Use ApplicationHealthPolicy to optionally override the
      health policies used to

      evaluate the health. This API only uses 'ConsiderWarningAsError' field of
      the

      ApplicationHealthPolicy. The rest of the fields are ignored while
      evaluating the health of the

      deployed service package.
    syntax:
      content: >-
        function getDeployedServicePackageHealthUsingPolicy(nodeName: string,
        applicationId: string, servicePackageName: string, options?:
        Models.ServiceFabricClientGetDeployedServicePackageHealthUsingPolicyOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: servicePackageName
          type:
            - string
          description: The name of the service package.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetDeployedServicePackageHealthUsingPolicyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeployedServicePackageHealthUsingPolicyResponse>
        description: Promise<Models.GetDeployedServicePackageHealthUsingPolicyResponse>
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServicePackageHealthUsingPolicy_1
    name: >-
      getDeployedServicePackageHealthUsingPolicy(string, string, string,
      ServiceCallback<DeployedServicePackageHealth>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeployedServicePackageHealthUsingPolicy(nodeName: string,
        applicationId: string, servicePackageName: string, callback:
        ServiceCallback<DeployedServicePackageHealth>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: servicePackageName
          type:
            - string
          description: The name of the service package.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.DeployedServicePackageHealth>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServicePackageHealthUsingPolicy_2
    name: >-
      getDeployedServicePackageHealthUsingPolicy(string, string, string,
      ServiceFabricClientGetDeployedServicePackageHealthUsingPolicyOptionalParams,
      ServiceCallback<DeployedServicePackageHealth>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeployedServicePackageHealthUsingPolicy(nodeName: string,
        applicationId: string, servicePackageName: string, options:
        ServiceFabricClientGetDeployedServicePackageHealthUsingPolicyOptionalParams,
        callback: ServiceCallback<DeployedServicePackageHealth>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: servicePackageName
          type:
            - string
          description: The name of the service package.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetDeployedServicePackageHealthUsingPolicyOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.DeployedServicePackageHealth>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServicePackageInfoList'
    name: >-
      getDeployedServicePackageInfoList(string, string,
      Models.ServiceFabricClientGetDeployedServicePackageInfoListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns the information about the service packages deployed on a Service
      Fabric node for the

      given application.
    syntax:
      content: >-
        function getDeployedServicePackageInfoList(nodeName: string,
        applicationId: string, options?:
        Models.ServiceFabricClientGetDeployedServicePackageInfoListOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetDeployedServicePackageInfoListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeployedServicePackageInfoListResponse>
        description: Promise<Models.GetDeployedServicePackageInfoListResponse>
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServicePackageInfoList_1
    name: >-
      getDeployedServicePackageInfoList(string, string,
      ServiceCallback<DeployedServicePackageInfo[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeployedServicePackageInfoList(nodeName: string,
        applicationId: string, callback:
        ServiceCallback<DeployedServicePackageInfo[]>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.DeployedServicePackageInfo[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServicePackageInfoList_2
    name: >-
      getDeployedServicePackageInfoList(string, string,
      ServiceFabricClientGetDeployedServicePackageInfoListOptionalParams,
      ServiceCallback<DeployedServicePackageInfo[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeployedServicePackageInfoList(nodeName: string,
        applicationId: string, options:
        ServiceFabricClientGetDeployedServicePackageInfoListOptionalParams,
        callback: ServiceCallback<DeployedServicePackageInfo[]>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetDeployedServicePackageInfoListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.DeployedServicePackageInfo[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServicePackageInfoListByName
    name: >-
      getDeployedServicePackageInfoListByName(string, string, string,
      Models.ServiceFabricClientGetDeployedServicePackageInfoListByNameOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns the information about the service packages deployed on a Service
      Fabric node for the

      given application. These results are of service packages whose name match
      exactly the service

      package name specified as the parameter.
    syntax:
      content: >-
        function getDeployedServicePackageInfoListByName(nodeName: string,
        applicationId: string, servicePackageName: string, options?:
        Models.ServiceFabricClientGetDeployedServicePackageInfoListByNameOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: servicePackageName
          type:
            - string
          description: The name of the service package.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetDeployedServicePackageInfoListByNameOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeployedServicePackageInfoListByNameResponse>
        description: Promise<Models.GetDeployedServicePackageInfoListByNameResponse>
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServicePackageInfoListByName_1
    name: >-
      getDeployedServicePackageInfoListByName(string, string, string,
      ServiceCallback<DeployedServicePackageInfo[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeployedServicePackageInfoListByName(nodeName: string,
        applicationId: string, servicePackageName: string, callback:
        ServiceCallback<DeployedServicePackageInfo[]>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: servicePackageName
          type:
            - string
          description: The name of the service package.
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.DeployedServicePackageInfo[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServicePackageInfoListByName_2
    name: >-
      getDeployedServicePackageInfoListByName(string, string, string,
      ServiceFabricClientGetDeployedServicePackageInfoListByNameOptionalParams,
      ServiceCallback<DeployedServicePackageInfo[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeployedServicePackageInfoListByName(nodeName: string,
        applicationId: string, servicePackageName: string, options:
        ServiceFabricClientGetDeployedServicePackageInfoListByNameOptionalParams,
        callback: ServiceCallback<DeployedServicePackageInfo[]>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: servicePackageName
          type:
            - string
          description: The name of the service package.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetDeployedServicePackageInfoListByNameOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.DeployedServicePackageInfo[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaDetailInfo
    name: >-
      getDeployedServiceReplicaDetailInfo(string, string, string,
      Models.ServiceFabricClientGetDeployedServiceReplicaDetailInfoOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the details of the replica deployed on a Service Fabric node. The
      information includes

      service kind, service name, current service operation, current service
      operation start date

      time, partition ID, replica/instance ID, reported load, and other
      information.
    syntax:
      content: >-
        function getDeployedServiceReplicaDetailInfo(nodeName: string,
        partitionId: string, replicaId: string, options?:
        Models.ServiceFabricClientGetDeployedServiceReplicaDetailInfoOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetDeployedServiceReplicaDetailInfoOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeployedServiceReplicaDetailInfoResponse>
        description: Promise<Models.GetDeployedServiceReplicaDetailInfoResponse>
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaDetailInfo_1
    name: >-
      getDeployedServiceReplicaDetailInfo(string, string, string,
      ServiceCallback<Models.DeployedServiceReplicaDetailInfoUnion>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeployedServiceReplicaDetailInfo(nodeName: string,
        partitionId: string, replicaId: string, callback:
        ServiceCallback<Models.DeployedServiceReplicaDetailInfoUnion>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: callback
          type:
            - ServiceCallback<Models.DeployedServiceReplicaDetailInfoUnion>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaDetailInfo_2
    name: >-
      getDeployedServiceReplicaDetailInfo(string, string, string,
      ServiceFabricClientGetDeployedServiceReplicaDetailInfoOptionalParams,
      ServiceCallback<Models.DeployedServiceReplicaDetailInfoUnion>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeployedServiceReplicaDetailInfo(nodeName: string,
        partitionId: string, replicaId: string, options:
        ServiceFabricClientGetDeployedServiceReplicaDetailInfoOptionalParams,
        callback: ServiceCallback<Models.DeployedServiceReplicaDetailInfoUnion>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetDeployedServiceReplicaDetailInfoOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<Models.DeployedServiceReplicaDetailInfoUnion>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaDetailInfoByPartitionId
    name: >-
      getDeployedServiceReplicaDetailInfoByPartitionId(string, string,
      Models.ServiceFabricClientGetDeployedServiceReplicaDetailInfoByPartitionIdOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the details of the replica deployed on a Service Fabric node. The
      information includes

      service kind, service name, current service operation, current service
      operation start date

      time, partition ID, replica/instance ID, reported load, and other
      information.
    syntax:
      content: >-
        function getDeployedServiceReplicaDetailInfoByPartitionId(nodeName:
        string, partitionId: string, options?:
        Models.ServiceFabricClientGetDeployedServiceReplicaDetailInfoByPartitionIdOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetDeployedServiceReplicaDetailInfoByPartitionIdOptionalParams
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<Models.GetDeployedServiceReplicaDetailInfoByPartitionIdResponse>
        description: >-
          Promise<Models.GetDeployedServiceReplicaDetailInfoByPartitionIdResponse>
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaDetailInfoByPartitionId_1
    name: >-
      getDeployedServiceReplicaDetailInfoByPartitionId(string, string,
      ServiceCallback<Models.DeployedServiceReplicaDetailInfoUnion>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeployedServiceReplicaDetailInfoByPartitionId(nodeName:
        string, partitionId: string, callback:
        ServiceCallback<Models.DeployedServiceReplicaDetailInfoUnion>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: callback
          type:
            - ServiceCallback<Models.DeployedServiceReplicaDetailInfoUnion>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaDetailInfoByPartitionId_2
    name: >-
      getDeployedServiceReplicaDetailInfoByPartitionId(string, string,
      ServiceFabricClientGetDeployedServiceReplicaDetailInfoByPartitionIdOptionalParams,
      ServiceCallback<Models.DeployedServiceReplicaDetailInfoUnion>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeployedServiceReplicaDetailInfoByPartitionId(nodeName:
        string, partitionId: string, options:
        ServiceFabricClientGetDeployedServiceReplicaDetailInfoByPartitionIdOptionalParams,
        callback: ServiceCallback<Models.DeployedServiceReplicaDetailInfoUnion>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetDeployedServiceReplicaDetailInfoByPartitionIdOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<Models.DeployedServiceReplicaDetailInfoUnion>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaInfoList'
    name: >-
      getDeployedServiceReplicaInfoList(string, string,
      Models.ServiceFabricClientGetDeployedServiceReplicaInfoListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the list containing the information about replicas deployed on a
      Service Fabric node. The

      information include partition ID, replica ID, status of the replica, name
      of the service, name

      of the service type, and other information. Use PartitionId or
      ServiceManifestName query

      parameters to return information about the deployed replicas matching the
      specified values for

      those parameters.
    syntax:
      content: >-
        function getDeployedServiceReplicaInfoList(nodeName: string,
        applicationId: string, options?:
        Models.ServiceFabricClientGetDeployedServiceReplicaInfoListOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetDeployedServiceReplicaInfoListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeployedServiceReplicaInfoListResponse>
        description: Promise<Models.GetDeployedServiceReplicaInfoListResponse>
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaInfoList_1
    name: >-
      getDeployedServiceReplicaInfoList(string, string,
      ServiceCallback<Models.DeployedServiceReplicaInfoUnion[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeployedServiceReplicaInfoList(nodeName: string,
        applicationId: string, callback:
        ServiceCallback<Models.DeployedServiceReplicaInfoUnion[]>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type:
            - 'ServiceCallback<Models.DeployedServiceReplicaInfoUnion[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaInfoList_2
    name: >-
      getDeployedServiceReplicaInfoList(string, string,
      ServiceFabricClientGetDeployedServiceReplicaInfoListOptionalParams,
      ServiceCallback<Models.DeployedServiceReplicaInfoUnion[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeployedServiceReplicaInfoList(nodeName: string,
        applicationId: string, options:
        ServiceFabricClientGetDeployedServiceReplicaInfoListOptionalParams,
        callback: ServiceCallback<Models.DeployedServiceReplicaInfoUnion[]>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetDeployedServiceReplicaInfoListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - 'ServiceCallback<Models.DeployedServiceReplicaInfoUnion[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServiceTypeInfoByName'
    name: >-
      getDeployedServiceTypeInfoByName(string, string, string,
      Models.ServiceFabricClientGetDeployedServiceTypeInfoByNameOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the list containing the information about a specific service type
      from the applications

      deployed on a node in a Service Fabric cluster. The response includes the
      name of the service

      type, its registration status, the code package that registered it and
      activation ID of the

      service package. Each entry represents one activation of a service type,
      differentiated by the

      activation ID.
    syntax:
      content: >-
        function getDeployedServiceTypeInfoByName(nodeName: string,
        applicationId: string, serviceTypeName: string, options?:
        Models.ServiceFabricClientGetDeployedServiceTypeInfoByNameOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceTypeName
          type:
            - string
          description: Specifies the name of a Service Fabric service type.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetDeployedServiceTypeInfoByNameOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeployedServiceTypeInfoByNameResponse>
        description: Promise<Models.GetDeployedServiceTypeInfoByNameResponse>
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServiceTypeInfoByName_1
    name: >-
      getDeployedServiceTypeInfoByName(string, string, string,
      ServiceCallback<DeployedServiceTypeInfo[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeployedServiceTypeInfoByName(nodeName: string,
        applicationId: string, serviceTypeName: string, callback:
        ServiceCallback<DeployedServiceTypeInfo[]>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceTypeName
          type:
            - string
          description: Specifies the name of a Service Fabric service type.
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.DeployedServiceTypeInfo[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServiceTypeInfoByName_2
    name: >-
      getDeployedServiceTypeInfoByName(string, string, string,
      ServiceFabricClientGetDeployedServiceTypeInfoByNameOptionalParams,
      ServiceCallback<DeployedServiceTypeInfo[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeployedServiceTypeInfoByName(nodeName: string,
        applicationId: string, serviceTypeName: string, options:
        ServiceFabricClientGetDeployedServiceTypeInfoByNameOptionalParams,
        callback: ServiceCallback<DeployedServiceTypeInfo[]>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceTypeName
          type:
            - string
          description: Specifies the name of a Service Fabric service type.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetDeployedServiceTypeInfoByNameOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.DeployedServiceTypeInfo[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServiceTypeInfoList'
    name: >-
      getDeployedServiceTypeInfoList(string, string,
      Models.ServiceFabricClientGetDeployedServiceTypeInfoListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the list containing the information about service types from the
      applications deployed on a

      node in a Service Fabric cluster. The response includes the name of the
      service type, its

      registration status, the code package that registered it and activation ID
      of the service

      package.
    syntax:
      content: >-
        function getDeployedServiceTypeInfoList(nodeName: string, applicationId:
        string, options?:
        Models.ServiceFabricClientGetDeployedServiceTypeInfoListOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetDeployedServiceTypeInfoListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeployedServiceTypeInfoListResponse>
        description: Promise<Models.GetDeployedServiceTypeInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServiceTypeInfoList_1'
    name: >-
      getDeployedServiceTypeInfoList(string, string,
      ServiceCallback<DeployedServiceTypeInfo[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeployedServiceTypeInfoList(nodeName: string, applicationId:
        string, callback: ServiceCallback<DeployedServiceTypeInfo[]>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.DeployedServiceTypeInfo[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServiceTypeInfoList_2'
    name: >-
      getDeployedServiceTypeInfoList(string, string,
      ServiceFabricClientGetDeployedServiceTypeInfoListOptionalParams,
      ServiceCallback<DeployedServiceTypeInfo[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeployedServiceTypeInfoList(nodeName: string, applicationId:
        string, options:
        ServiceFabricClientGetDeployedServiceTypeInfoListOptionalParams,
        callback: ServiceCallback<DeployedServiceTypeInfo[]>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetDeployedServiceTypeInfoListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.DeployedServiceTypeInfo[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getFaultOperationList'
    name: >-
      getFaultOperationList(number, number,
      Models.ServiceFabricClientGetFaultOperationListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets the list of user-induced fault operations filtered by provided input.
    syntax:
      content: >-
        function getFaultOperationList(typeFilter: number, stateFilter: number,
        options?: Models.ServiceFabricClientGetFaultOperationListOptionalParams)
      parameters:
        - id: typeFilter
          type:
            - number
          description: |-
            Used to filter on OperationType for user-induced operations.

            - 65535 - select all
            - 1 - select PartitionDataLoss.
            - 2 - select PartitionQuorumLoss.
            - 4 - select PartitionRestart.
            - 8 - select NodeTransition.
        - id: stateFilter
          type:
            - number
          description: |-
            Used to filter on OperationState's for user-induced operations.

            - 65535 - select All
            - 1 - select Running
            - 2 - select RollingBack
            - 8 - select Completed
            - 16 - select Faulted
            - 32 - select Cancelled
            - 64 - select ForceCancelled
        - id: options
          type:
            - Models.ServiceFabricClientGetFaultOperationListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetFaultOperationListResponse>
        description: Promise<Models.GetFaultOperationListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getFaultOperationList_1'
    name: 'getFaultOperationList(number, number, ServiceCallback<OperationStatus[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getFaultOperationList(typeFilter: number, stateFilter: number,
        callback: ServiceCallback<OperationStatus[]>)
      parameters:
        - id: typeFilter
          type:
            - number
          description: |-
            Used to filter on OperationType for user-induced operations.

            - 65535 - select all
            - 1 - select PartitionDataLoss.
            - 2 - select PartitionQuorumLoss.
            - 4 - select PartitionRestart.
            - 8 - select NodeTransition.
        - id: stateFilter
          type:
            - number
          description: |-
            Used to filter on OperationState's for user-induced operations.

            - 65535 - select All
            - 1 - select Running
            - 2 - select RollingBack
            - 8 - select Completed
            - 16 - select Faulted
            - 32 - select Cancelled
            - 64 - select ForceCancelled
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.OperationStatus[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getFaultOperationList_2'
    name: >-
      getFaultOperationList(number, number,
      ServiceFabricClientGetFaultOperationListOptionalParams,
      ServiceCallback<OperationStatus[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getFaultOperationList(typeFilter: number, stateFilter: number,
        options: ServiceFabricClientGetFaultOperationListOptionalParams,
        callback: ServiceCallback<OperationStatus[]>)
      parameters:
        - id: typeFilter
          type:
            - number
          description: |-
            Used to filter on OperationType for user-induced operations.

            - 65535 - select all
            - 1 - select PartitionDataLoss.
            - 2 - select PartitionQuorumLoss.
            - 4 - select PartitionRestart.
            - 8 - select NodeTransition.
        - id: stateFilter
          type:
            - number
          description: |-
            Used to filter on OperationState's for user-induced operations.

            - 65535 - select All
            - 1 - select Running
            - 2 - select RollingBack
            - 8 - select Completed
            - 16 - select Faulted
            - 32 - select Cancelled
            - 64 - select ForceCancelled
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetFaultOperationListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.OperationStatus[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreContent'
    name: >-
      getImageStoreContent(string,
      Models.ServiceFabricClientGetImageStoreContentOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns the information about the image store content at the specified
      contentPath. The

      contentPath is relative to the root of the image store.
    syntax:
      content: >-
        function getImageStoreContent(contentPath: string, options?:
        Models.ServiceFabricClientGetImageStoreContentOptionalParams)
      parameters:
        - id: contentPath
          type:
            - string
          description: Relative path to file or folder in the image store from its root.
        - id: options
          type:
            - Models.ServiceFabricClientGetImageStoreContentOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetImageStoreContentResponse>
        description: Promise<Models.GetImageStoreContentResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreContent_1'
    name: 'getImageStoreContent(string, ServiceCallback<ImageStoreContent>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getImageStoreContent(contentPath: string, callback:
        ServiceCallback<ImageStoreContent>)
      parameters:
        - id: contentPath
          type:
            - string
          description: Relative path to file or folder in the image store from its root.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ImageStoreContent>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreContent_2'
    name: >-
      getImageStoreContent(string,
      ServiceFabricClientGetImageStoreContentOptionalParams,
      ServiceCallback<ImageStoreContent>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getImageStoreContent(contentPath: string, options:
        ServiceFabricClientGetImageStoreContentOptionalParams, callback:
        ServiceCallback<ImageStoreContent>)
      parameters:
        - id: contentPath
          type:
            - string
          description: Relative path to file or folder in the image store from its root.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetImageStoreContentOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ImageStoreContent>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreFolderSize'
    name: >-
      getImageStoreFolderSize(string,
      Models.ServiceFabricClientGetImageStoreFolderSizeOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the total size of file under a image store folder, specified by
      contentPath. The

      contentPath is relative to the root of the image store.
    syntax:
      content: >-
        function getImageStoreFolderSize(contentPath: string, options?:
        Models.ServiceFabricClientGetImageStoreFolderSizeOptionalParams)
      parameters:
        - id: contentPath
          type:
            - string
          description: Relative path to file or folder in the image store from its root.
        - id: options
          type:
            - Models.ServiceFabricClientGetImageStoreFolderSizeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetImageStoreFolderSizeResponse>
        description: Promise<Models.GetImageStoreFolderSizeResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreFolderSize_1'
    name: 'getImageStoreFolderSize(string, ServiceCallback<FolderSizeInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getImageStoreFolderSize(contentPath: string, callback:
        ServiceCallback<FolderSizeInfo>)
      parameters:
        - id: contentPath
          type:
            - string
          description: Relative path to file or folder in the image store from its root.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.FolderSizeInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreFolderSize_2'
    name: >-
      getImageStoreFolderSize(string,
      ServiceFabricClientGetImageStoreFolderSizeOptionalParams,
      ServiceCallback<FolderSizeInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getImageStoreFolderSize(contentPath: string, options:
        ServiceFabricClientGetImageStoreFolderSizeOptionalParams, callback:
        ServiceCallback<FolderSizeInfo>)
      parameters:
        - id: contentPath
          type:
            - string
          description: Relative path to file or folder in the image store from its root.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetImageStoreFolderSizeOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.FolderSizeInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreInfo'
    name: >-
      getImageStoreInfo(Models.ServiceFabricClientGetImageStoreInfoOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns information about the primary ImageStore replica, such as disk
      capacity and available

      disk space at the node it is on, and several categories of the
      ImageStore's file system usage.
    syntax:
      content: >-
        function getImageStoreInfo(options?:
        Models.ServiceFabricClientGetImageStoreInfoOptionalParams)
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetImageStoreInfoOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetImageStoreInfoResponse>
        description: Promise<Models.GetImageStoreInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreInfo_1'
    name: getImageStoreInfo(ServiceCallback<ImageStoreInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getImageStoreInfo(callback: ServiceCallback<ImageStoreInfo>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ImageStoreInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreInfo_2'
    name: >-
      getImageStoreInfo(ServiceFabricClientGetImageStoreInfoOptionalParams,
      ServiceCallback<ImageStoreInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getImageStoreInfo(options:
        ServiceFabricClientGetImageStoreInfoOptionalParams, callback:
        ServiceCallback<ImageStoreInfo>)
      parameters:
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetImageStoreInfoOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ImageStoreInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreRootContent'
    name: >-
      getImageStoreRootContent(Models.ServiceFabricClientGetImageStoreRootContentOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns the information about the image store content at the root of the
      image store.
    syntax:
      content: >-
        function getImageStoreRootContent(options?:
        Models.ServiceFabricClientGetImageStoreRootContentOptionalParams)
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetImageStoreRootContentOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetImageStoreRootContentResponse>
        description: Promise<Models.GetImageStoreRootContentResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreRootContent_1'
    name: getImageStoreRootContent(ServiceCallback<ImageStoreContent>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getImageStoreRootContent(callback:
        ServiceCallback<ImageStoreContent>)
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ImageStoreContent>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreRootContent_2'
    name: >-
      getImageStoreRootContent(ServiceFabricClientGetImageStoreRootContentOptionalParams,
      ServiceCallback<ImageStoreContent>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getImageStoreRootContent(options:
        ServiceFabricClientGetImageStoreRootContentOptionalParams, callback:
        ServiceCallback<ImageStoreContent>)
      parameters:
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetImageStoreRootContentOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ImageStoreContent>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreRootFolderSize'
    name: >-
      getImageStoreRootFolderSize(Models.ServiceFabricClientGetImageStoreRootFolderSizeOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns the total size of files at the root and children folders in image
      store.
    syntax:
      content: >-
        function getImageStoreRootFolderSize(options?:
        Models.ServiceFabricClientGetImageStoreRootFolderSizeOptionalParams)
      parameters:
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetImageStoreRootFolderSizeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetImageStoreRootFolderSizeResponse>
        description: Promise<Models.GetImageStoreRootFolderSizeResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreRootFolderSize_1'
    name: getImageStoreRootFolderSize(ServiceCallback<FolderSizeInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getImageStoreRootFolderSize(callback:
        ServiceCallback<FolderSizeInfo>)
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.FolderSizeInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreRootFolderSize_2'
    name: >-
      getImageStoreRootFolderSize(ServiceFabricClientGetImageStoreRootFolderSizeOptionalParams,
      ServiceCallback<FolderSizeInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getImageStoreRootFolderSize(options:
        ServiceFabricClientGetImageStoreRootFolderSizeOptionalParams, callback:
        ServiceCallback<FolderSizeInfo>)
      parameters:
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetImageStoreRootFolderSizeOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.FolderSizeInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreUploadSessionById'
    name: >-
      getImageStoreUploadSessionById(string,
      Models.ServiceFabricClientGetImageStoreUploadSessionByIdOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the image store upload session identified by the given ID. User can
      query the upload

      session at any time during uploading.
    syntax:
      content: >-
        function getImageStoreUploadSessionById(sessionId: string, options?:
        Models.ServiceFabricClientGetImageStoreUploadSessionByIdOptionalParams)
      parameters:
        - id: sessionId
          type:
            - string
          description: >-
            A GUID generated by the user for a file uploading. It identifies an
            image store

            upload session which keeps track of all file chunks until it is
            committed.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetImageStoreUploadSessionByIdOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetImageStoreUploadSessionByIdResponse>
        description: Promise<Models.GetImageStoreUploadSessionByIdResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreUploadSessionById_1'
    name: 'getImageStoreUploadSessionById(string, ServiceCallback<UploadSession>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getImageStoreUploadSessionById(sessionId: string, callback:
        ServiceCallback<UploadSession>)
      parameters:
        - id: sessionId
          type:
            - string
          description: >-
            A GUID generated by the user for a file uploading. It identifies an
            image store

            upload session which keeps track of all file chunks until it is
            committed.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.UploadSession>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreUploadSessionById_2'
    name: >-
      getImageStoreUploadSessionById(string,
      ServiceFabricClientGetImageStoreUploadSessionByIdOptionalParams,
      ServiceCallback<UploadSession>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getImageStoreUploadSessionById(sessionId: string, options:
        ServiceFabricClientGetImageStoreUploadSessionByIdOptionalParams,
        callback: ServiceCallback<UploadSession>)
      parameters:
        - id: sessionId
          type:
            - string
          description: >-
            A GUID generated by the user for a file uploading. It identifies an
            image store

            upload session which keeps track of all file chunks until it is
            committed.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetImageStoreUploadSessionByIdOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.UploadSession>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreUploadSessionByPath'
    name: >-
      getImageStoreUploadSessionByPath(string,
      Models.ServiceFabricClientGetImageStoreUploadSessionByPathOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the image store upload session associated with the given image store
      relative path. User

      can query the upload session at any time during uploading.
    syntax:
      content: >-
        function getImageStoreUploadSessionByPath(contentPath: string, options?:
        Models.ServiceFabricClientGetImageStoreUploadSessionByPathOptionalParams)
      parameters:
        - id: contentPath
          type:
            - string
          description: Relative path to file or folder in the image store from its root.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetImageStoreUploadSessionByPathOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetImageStoreUploadSessionByPathResponse>
        description: Promise<Models.GetImageStoreUploadSessionByPathResponse>
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getImageStoreUploadSessionByPath_1
    name: 'getImageStoreUploadSessionByPath(string, ServiceCallback<UploadSession>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getImageStoreUploadSessionByPath(contentPath: string, callback:
        ServiceCallback<UploadSession>)
      parameters:
        - id: contentPath
          type:
            - string
          description: Relative path to file or folder in the image store from its root.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.UploadSession>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getImageStoreUploadSessionByPath_2
    name: >-
      getImageStoreUploadSessionByPath(string,
      ServiceFabricClientGetImageStoreUploadSessionByPathOptionalParams,
      ServiceCallback<UploadSession>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getImageStoreUploadSessionByPath(contentPath: string, options:
        ServiceFabricClientGetImageStoreUploadSessionByPathOptionalParams,
        callback: ServiceCallback<UploadSession>)
      parameters:
        - id: contentPath
          type:
            - string
          description: Relative path to file or folder in the image store from its root.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetImageStoreUploadSessionByPathOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.UploadSession>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNameExistsInfo'
    name: >-
      getNameExistsInfo(string,
      Models.ServiceFabricClientGetNameExistsInfoOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns whether the specified Service Fabric name exists.
    syntax:
      content: >-
        function getNameExistsInfo(nameId: string, options?:
        Models.ServiceFabricClientGetNameExistsInfoOptionalParams)
      parameters:
        - id: nameId
          type:
            - string
          description: 'The Service Fabric name, without the ''fabric:'' URI scheme.'
        - id: options
          type:
            - Models.ServiceFabricClientGetNameExistsInfoOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNameExistsInfo_1'
    name: 'getNameExistsInfo(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getNameExistsInfo(nameId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: nameId
          type:
            - string
          description: 'The Service Fabric name, without the ''fabric:'' URI scheme.'
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNameExistsInfo_2'
    name: >-
      getNameExistsInfo(string,
      ServiceFabricClientGetNameExistsInfoOptionalParams, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getNameExistsInfo(nameId: string, options:
        ServiceFabricClientGetNameExistsInfoOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: nameId
          type:
            - string
          description: 'The Service Fabric name, without the ''fabric:'' URI scheme.'
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetNameExistsInfoOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeEventList'
    name: >-
      getNodeEventList(string, string, string,
      Models.ServiceFabricClientGetNodeEventListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: The response is list of NodeEvent objects.
    syntax:
      content: >-
        function getNodeEventList(nodeName: string, startTimeUtc: string,
        endTimeUtc: string, options?:
        Models.ServiceFabricClientGetNodeEventListOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: options
          type:
            - Models.ServiceFabricClientGetNodeEventListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetNodeEventListResponse>
        description: Promise<Models.GetNodeEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeEventList_1'
    name: >-
      getNodeEventList(string, string, string,
      ServiceCallback<Models.NodeEventUnion[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getNodeEventList(nodeName: string, startTimeUtc: string,
        endTimeUtc: string, callback: ServiceCallback<Models.NodeEventUnion[]>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: callback
          type:
            - 'ServiceCallback<Models.NodeEventUnion[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeEventList_2'
    name: >-
      getNodeEventList(string, string, string,
      ServiceFabricClientGetNodeEventListOptionalParams,
      ServiceCallback<Models.NodeEventUnion[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getNodeEventList(nodeName: string, startTimeUtc: string,
        endTimeUtc: string, options:
        ServiceFabricClientGetNodeEventListOptionalParams, callback:
        ServiceCallback<Models.NodeEventUnion[]>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetNodeEventListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - 'ServiceCallback<Models.NodeEventUnion[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeHealth'
    name: >-
      getNodeHealth(string,
      Models.ServiceFabricClientGetNodeHealthOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the health of a Service Fabric node. Use EventsHealthStateFilter to
      filter the collection

      of health events reported on the node based on the health state. If the
      node that you specify by

      name does not exist in the health store, this returns an error.
    syntax:
      content: >-
        function getNodeHealth(nodeName: string, options?:
        Models.ServiceFabricClientGetNodeHealthOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: options
          type:
            - Models.ServiceFabricClientGetNodeHealthOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetNodeHealthResponse>
        description: Promise<Models.GetNodeHealthResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeHealth_1'
    name: 'getNodeHealth(string, ServiceCallback<NodeHealth>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getNodeHealth(nodeName: string, callback:
        ServiceCallback<NodeHealth>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.NodeHealth>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeHealth_2'
    name: >-
      getNodeHealth(string, ServiceFabricClientGetNodeHealthOptionalParams,
      ServiceCallback<NodeHealth>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getNodeHealth(nodeName: string, options:
        ServiceFabricClientGetNodeHealthOptionalParams, callback:
        ServiceCallback<NodeHealth>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetNodeHealthOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.NodeHealth>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeHealthUsingPolicy'
    name: >-
      getNodeHealthUsingPolicy(string,
      Models.ServiceFabricClientGetNodeHealthUsingPolicyOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the health of a Service Fabric node. Use EventsHealthStateFilter to
      filter the collection

      of health events reported on the node based on the health state. Use
      ClusterHealthPolicy in the

      POST body to override the health policies used to evaluate the health. If
      the node that you

      specify by name does not exist in the health store, this returns an error.
    syntax:
      content: >-
        function getNodeHealthUsingPolicy(nodeName: string, options?:
        Models.ServiceFabricClientGetNodeHealthUsingPolicyOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: options
          type:
            - Models.ServiceFabricClientGetNodeHealthUsingPolicyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetNodeHealthUsingPolicyResponse>
        description: Promise<Models.GetNodeHealthUsingPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeHealthUsingPolicy_1'
    name: 'getNodeHealthUsingPolicy(string, ServiceCallback<NodeHealth>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getNodeHealthUsingPolicy(nodeName: string, callback:
        ServiceCallback<NodeHealth>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.NodeHealth>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeHealthUsingPolicy_2'
    name: >-
      getNodeHealthUsingPolicy(string,
      ServiceFabricClientGetNodeHealthUsingPolicyOptionalParams,
      ServiceCallback<NodeHealth>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getNodeHealthUsingPolicy(nodeName: string, options:
        ServiceFabricClientGetNodeHealthUsingPolicyOptionalParams, callback:
        ServiceCallback<NodeHealth>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetNodeHealthUsingPolicyOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.NodeHealth>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeInfo'
    name: 'getNodeInfo(string, Models.ServiceFabricClientGetNodeInfoOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The response includes the name, status, ID, health, uptime, and other
      details about the node.
    syntax:
      content: >-
        function getNodeInfo(nodeName: string, options?:
        Models.ServiceFabricClientGetNodeInfoOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: options
          type:
            - Models.ServiceFabricClientGetNodeInfoOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetNodeInfoResponse>
        description: Promise<Models.GetNodeInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeInfo_1'
    name: 'getNodeInfo(string, ServiceCallback<NodeInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getNodeInfo(nodeName: string, callback:
        ServiceCallback<NodeInfo>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.NodeInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeInfo_2'
    name: >-
      getNodeInfo(string, ServiceFabricClientGetNodeInfoOptionalParams,
      ServiceCallback<NodeInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getNodeInfo(nodeName: string, options:
        ServiceFabricClientGetNodeInfoOptionalParams, callback:
        ServiceCallback<NodeInfo>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientGetNodeInfoOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.NodeInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeInfoList'
    name: getNodeInfoList(Models.ServiceFabricClientGetNodeInfoListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The response includes the name, status, ID, health, uptime, and other
      details about the nodes.
    syntax:
      content: >-
        function getNodeInfoList(options?:
        Models.ServiceFabricClientGetNodeInfoListOptionalParams)
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetNodeInfoListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetNodeInfoListResponse>
        description: Promise<Models.GetNodeInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeInfoList_1'
    name: getNodeInfoList(ServiceCallback<PagedNodeInfoList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getNodeInfoList(callback: ServiceCallback<PagedNodeInfoList>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedNodeInfoList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeInfoList_2'
    name: >-
      getNodeInfoList(ServiceFabricClientGetNodeInfoListOptionalParams,
      ServiceCallback<PagedNodeInfoList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getNodeInfoList(options:
        ServiceFabricClientGetNodeInfoListOptionalParams, callback:
        ServiceCallback<PagedNodeInfoList>)
      parameters:
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetNodeInfoListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedNodeInfoList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeLoadInfo'
    name: >-
      getNodeLoadInfo(string,
      Models.ServiceFabricClientGetNodeLoadInfoOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieves the load information of a Service Fabric node for all the
      metrics that have load or

      capacity defined.
    syntax:
      content: >-
        function getNodeLoadInfo(nodeName: string, options?:
        Models.ServiceFabricClientGetNodeLoadInfoOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: options
          type:
            - Models.ServiceFabricClientGetNodeLoadInfoOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetNodeLoadInfoResponse>
        description: Promise<Models.GetNodeLoadInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeLoadInfo_1'
    name: 'getNodeLoadInfo(string, ServiceCallback<NodeLoadInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getNodeLoadInfo(nodeName: string, callback:
        ServiceCallback<NodeLoadInfo>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.NodeLoadInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeLoadInfo_2'
    name: >-
      getNodeLoadInfo(string, ServiceFabricClientGetNodeLoadInfoOptionalParams,
      ServiceCallback<NodeLoadInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getNodeLoadInfo(nodeName: string, options:
        ServiceFabricClientGetNodeLoadInfoOptionalParams, callback:
        ServiceCallback<NodeLoadInfo>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetNodeLoadInfoOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.NodeLoadInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodesEventList'
    name: >-
      getNodesEventList(string, string,
      Models.ServiceFabricClientGetNodesEventListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: The response is list of NodeEvent objects.
    syntax:
      content: >-
        function getNodesEventList(startTimeUtc: string, endTimeUtc: string,
        options?: Models.ServiceFabricClientGetNodesEventListOptionalParams)
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: options
          type:
            - Models.ServiceFabricClientGetNodesEventListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetNodesEventListResponse>
        description: Promise<Models.GetNodesEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodesEventList_1'
    name: >-
      getNodesEventList(string, string,
      ServiceCallback<Models.NodeEventUnion[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getNodesEventList(startTimeUtc: string, endTimeUtc: string,
        callback: ServiceCallback<Models.NodeEventUnion[]>)
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: callback
          type:
            - 'ServiceCallback<Models.NodeEventUnion[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodesEventList_2'
    name: >-
      getNodesEventList(string, string,
      ServiceFabricClientGetNodesEventListOptionalParams,
      ServiceCallback<Models.NodeEventUnion[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getNodesEventList(startTimeUtc: string, endTimeUtc: string,
        options: ServiceFabricClientGetNodesEventListOptionalParams, callback:
        ServiceCallback<Models.NodeEventUnion[]>)
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetNodesEventListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - 'ServiceCallback<Models.NodeEventUnion[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeTransitionProgress'
    name: >-
      getNodeTransitionProgress(string, string,
      Models.ServiceFabricClientGetNodeTransitionProgressOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the progress of an operation started with StartNodeTransition using
      the provided

      OperationId.
    syntax:
      content: >-
        function getNodeTransitionProgress(nodeName: string, operationId:
        string, options?:
        Models.ServiceFabricClientGetNodeTransitionProgressOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: operationId
          type:
            - string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: options
          type:
            - Models.ServiceFabricClientGetNodeTransitionProgressOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetNodeTransitionProgressResponse>
        description: Promise<Models.GetNodeTransitionProgressResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeTransitionProgress_1'
    name: >-
      getNodeTransitionProgress(string, string,
      ServiceCallback<NodeTransitionProgress>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getNodeTransitionProgress(nodeName: string, operationId:
        string, callback: ServiceCallback<NodeTransitionProgress>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: operationId
          type:
            - string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.NodeTransitionProgress>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getNodeTransitionProgress_2'
    name: >-
      getNodeTransitionProgress(string, string,
      ServiceFabricClientGetNodeTransitionProgressOptionalParams,
      ServiceCallback<NodeTransitionProgress>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getNodeTransitionProgress(nodeName: string, operationId:
        string, options:
        ServiceFabricClientGetNodeTransitionProgressOptionalParams, callback:
        ServiceCallback<NodeTransitionProgress>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: operationId
          type:
            - string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetNodeTransitionProgressOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.NodeTransitionProgress>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getPartitionBackupConfigurationInfo
    name: >-
      getPartitionBackupConfigurationInfo(string,
      Models.ServiceFabricClientGetPartitionBackupConfigurationInfoOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the Service Fabric Backup configuration information for the specified
      partition.
    syntax:
      content: >-
        function getPartitionBackupConfigurationInfo(partitionId: string,
        options?:
        Models.ServiceFabricClientGetPartitionBackupConfigurationInfoOptionalParams)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetPartitionBackupConfigurationInfoOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetPartitionBackupConfigurationInfoResponse>
        description: Promise<Models.GetPartitionBackupConfigurationInfoResponse>
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getPartitionBackupConfigurationInfo_1
    name: >-
      getPartitionBackupConfigurationInfo(string,
      ServiceCallback<PartitionBackupConfigurationInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPartitionBackupConfigurationInfo(partitionId: string,
        callback: ServiceCallback<PartitionBackupConfigurationInfo>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/servicefabric.PartitionBackupConfigurationInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getPartitionBackupConfigurationInfo_2
    name: >-
      getPartitionBackupConfigurationInfo(string,
      ServiceFabricClientGetPartitionBackupConfigurationInfoOptionalParams,
      ServiceCallback<PartitionBackupConfigurationInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPartitionBackupConfigurationInfo(partitionId: string,
        options:
        ServiceFabricClientGetPartitionBackupConfigurationInfoOptionalParams,
        callback: ServiceCallback<PartitionBackupConfigurationInfo>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetPartitionBackupConfigurationInfoOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/servicefabric.PartitionBackupConfigurationInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionBackupList'
    name: >-
      getPartitionBackupList(string,
      Models.ServiceFabricClientGetPartitionBackupListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a list of backups available for the specified partition. The
      server enumerates all the

      backups available in the backup store configured in the backup policy. It
      also allows filtering

      of the result based on start and end datetime or just fetching the latest
      available backup for

      the partition.
    syntax:
      content: >-
        function getPartitionBackupList(partitionId: string, options?:
        Models.ServiceFabricClientGetPartitionBackupListOptionalParams)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - Models.ServiceFabricClientGetPartitionBackupListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetPartitionBackupListResponse>
        description: Promise<Models.GetPartitionBackupListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionBackupList_1'
    name: 'getPartitionBackupList(string, ServiceCallback<PagedBackupInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPartitionBackupList(partitionId: string, callback:
        ServiceCallback<PagedBackupInfoList>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedBackupInfoList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionBackupList_2'
    name: >-
      getPartitionBackupList(string,
      ServiceFabricClientGetPartitionBackupListOptionalParams,
      ServiceCallback<PagedBackupInfoList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPartitionBackupList(partitionId: string, options:
        ServiceFabricClientGetPartitionBackupListOptionalParams, callback:
        ServiceCallback<PagedBackupInfoList>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetPartitionBackupListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedBackupInfoList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionBackupProgress'
    name: >-
      getPartitionBackupProgress(string,
      Models.ServiceFabricClientGetPartitionBackupProgressOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns information about the state of the latest backup along with
      details or failure reason in

      case of completion.
    syntax:
      content: >-
        function getPartitionBackupProgress(partitionId: string, options?:
        Models.ServiceFabricClientGetPartitionBackupProgressOptionalParams)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - Models.ServiceFabricClientGetPartitionBackupProgressOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetPartitionBackupProgressResponse>
        description: Promise<Models.GetPartitionBackupProgressResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionBackupProgress_1'
    name: 'getPartitionBackupProgress(string, ServiceCallback<BackupProgressInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPartitionBackupProgress(partitionId: string, callback:
        ServiceCallback<BackupProgressInfo>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.BackupProgressInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionBackupProgress_2'
    name: >-
      getPartitionBackupProgress(string,
      ServiceFabricClientGetPartitionBackupProgressOptionalParams,
      ServiceCallback<BackupProgressInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPartitionBackupProgress(partitionId: string, options:
        ServiceFabricClientGetPartitionBackupProgressOptionalParams, callback:
        ServiceCallback<BackupProgressInfo>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetPartitionBackupProgressOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.BackupProgressInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionEventList'
    name: >-
      getPartitionEventList(string, string, string,
      Models.ServiceFabricClientGetPartitionEventListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: The response is list of PartitionEvent objects.
    syntax:
      content: >-
        function getPartitionEventList(partitionId: string, startTimeUtc:
        string, endTimeUtc: string, options?:
        Models.ServiceFabricClientGetPartitionEventListOptionalParams)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: options
          type:
            - Models.ServiceFabricClientGetPartitionEventListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetPartitionEventListResponse>
        description: Promise<Models.GetPartitionEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionEventList_1'
    name: >-
      getPartitionEventList(string, string, string,
      ServiceCallback<Models.PartitionEventUnion[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPartitionEventList(partitionId: string, startTimeUtc:
        string, endTimeUtc: string, callback:
        ServiceCallback<Models.PartitionEventUnion[]>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: callback
          type:
            - 'ServiceCallback<Models.PartitionEventUnion[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionEventList_2'
    name: >-
      getPartitionEventList(string, string, string,
      ServiceFabricClientGetPartitionEventListOptionalParams,
      ServiceCallback<Models.PartitionEventUnion[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPartitionEventList(partitionId: string, startTimeUtc:
        string, endTimeUtc: string, options:
        ServiceFabricClientGetPartitionEventListOptionalParams, callback:
        ServiceCallback<Models.PartitionEventUnion[]>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetPartitionEventListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - 'ServiceCallback<Models.PartitionEventUnion[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionHealth'
    name: >-
      getPartitionHealth(string,
      Models.ServiceFabricClientGetPartitionHealthOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Use EventsHealthStateFilter to filter the collection of health events
      reported on the service

      based on the health state.

      Use ReplicasHealthStateFilter to filter the collection of
      ReplicaHealthState objects on the

      partition.

      If you specify a partition that does not exist in the health store, this
      request returns an

      error.
    syntax:
      content: >-
        function getPartitionHealth(partitionId: string, options?:
        Models.ServiceFabricClientGetPartitionHealthOptionalParams)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - Models.ServiceFabricClientGetPartitionHealthOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetPartitionHealthResponse>
        description: Promise<Models.GetPartitionHealthResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionHealth_1'
    name: 'getPartitionHealth(string, ServiceCallback<PartitionHealth>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPartitionHealth(partitionId: string, callback:
        ServiceCallback<PartitionHealth>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PartitionHealth>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionHealth_2'
    name: >-
      getPartitionHealth(string,
      ServiceFabricClientGetPartitionHealthOptionalParams,
      ServiceCallback<PartitionHealth>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPartitionHealth(partitionId: string, options:
        ServiceFabricClientGetPartitionHealthOptionalParams, callback:
        ServiceCallback<PartitionHealth>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetPartitionHealthOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PartitionHealth>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionHealthUsingPolicy'
    name: >-
      getPartitionHealthUsingPolicy(string,
      Models.ServiceFabricClientGetPartitionHealthUsingPolicyOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the health information of the specified partition.

      If the application health policy is specified, the health evaluation uses
      it to get the

      aggregated health state.

      If the policy is not specified, the health evaluation uses the application
      health policy defined

      in the application manifest, or the default health policy, if no policy is
      defined in the

      manifest.

      Use EventsHealthStateFilter to filter the collection of health events
      reported on the partition

      based on the health state.

      Use ReplicasHealthStateFilter to filter the collection of
      ReplicaHealthState objects on the

      partition. Use ApplicationHealthPolicy in the POST body to override the
      health policies used to

      evaluate the health.

      If you specify a partition that does not exist in the health store, this
      request returns an

      error.
    syntax:
      content: >-
        function getPartitionHealthUsingPolicy(partitionId: string, options?:
        Models.ServiceFabricClientGetPartitionHealthUsingPolicyOptionalParams)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetPartitionHealthUsingPolicyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetPartitionHealthUsingPolicyResponse>
        description: Promise<Models.GetPartitionHealthUsingPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionHealthUsingPolicy_1'
    name: 'getPartitionHealthUsingPolicy(string, ServiceCallback<PartitionHealth>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPartitionHealthUsingPolicy(partitionId: string, callback:
        ServiceCallback<PartitionHealth>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PartitionHealth>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionHealthUsingPolicy_2'
    name: >-
      getPartitionHealthUsingPolicy(string,
      ServiceFabricClientGetPartitionHealthUsingPolicyOptionalParams,
      ServiceCallback<PartitionHealth>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPartitionHealthUsingPolicy(partitionId: string, options:
        ServiceFabricClientGetPartitionHealthUsingPolicyOptionalParams,
        callback: ServiceCallback<PartitionHealth>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetPartitionHealthUsingPolicyOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PartitionHealth>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionInfo'
    name: >-
      getPartitionInfo(string,
      Models.ServiceFabricClientGetPartitionInfoOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the information about the specified partition. The response includes
      the partition ID,

      partitioning scheme information, keys supported by the partition, status,
      health, and other

      details about the partition.
    syntax:
      content: >-
        function getPartitionInfo(partitionId: string, options?:
        Models.ServiceFabricClientGetPartitionInfoOptionalParams)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - Models.ServiceFabricClientGetPartitionInfoOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetPartitionInfoResponse>
        description: Promise<Models.GetPartitionInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionInfo_1'
    name: >-
      getPartitionInfo(string,
      ServiceCallback<Models.ServicePartitionInfoUnion>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPartitionInfo(partitionId: string, callback:
        ServiceCallback<Models.ServicePartitionInfoUnion>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: callback
          type:
            - ServiceCallback<Models.ServicePartitionInfoUnion>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionInfo_2'
    name: >-
      getPartitionInfo(string,
      ServiceFabricClientGetPartitionInfoOptionalParams,
      ServiceCallback<Models.ServicePartitionInfoUnion>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPartitionInfo(partitionId: string, options:
        ServiceFabricClientGetPartitionInfoOptionalParams, callback:
        ServiceCallback<Models.ServicePartitionInfoUnion>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetPartitionInfoOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<Models.ServicePartitionInfoUnion>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionInfoList'
    name: >-
      getPartitionInfoList(string,
      Models.ServiceFabricClientGetPartitionInfoListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The response includes the partition ID, partitioning scheme information,
      keys supported by the

      partition, status, health, and other details about the partition.
    syntax:
      content: >-
        function getPartitionInfoList(serviceId: string, options?:
        Models.ServiceFabricClientGetPartitionInfoListOptionalParams)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type:
            - Models.ServiceFabricClientGetPartitionInfoListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetPartitionInfoListResponse>
        description: Promise<Models.GetPartitionInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionInfoList_1'
    name: >-
      getPartitionInfoList(string,
      ServiceCallback<PagedServicePartitionInfoList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPartitionInfoList(serviceId: string, callback:
        ServiceCallback<PagedServicePartitionInfoList>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/servicefabric.PagedServicePartitionInfoList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionInfoList_2'
    name: >-
      getPartitionInfoList(string,
      ServiceFabricClientGetPartitionInfoListOptionalParams,
      ServiceCallback<PagedServicePartitionInfoList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPartitionInfoList(serviceId: string, options:
        ServiceFabricClientGetPartitionInfoListOptionalParams, callback:
        ServiceCallback<PagedServicePartitionInfoList>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetPartitionInfoListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/servicefabric.PagedServicePartitionInfoList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionLoadInformation'
    name: >-
      getPartitionLoadInformation(string,
      Models.ServiceFabricClientGetPartitionLoadInformationOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns information about the load of a specified partition.

      The response includes a list of load reports for a Service Fabric
      partition.

      Each report includes the load metric name, value, and last reported time
      in UTC.
    syntax:
      content: >-
        function getPartitionLoadInformation(partitionId: string, options?:
        Models.ServiceFabricClientGetPartitionLoadInformationOptionalParams)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetPartitionLoadInformationOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetPartitionLoadInformationResponse>
        description: Promise<Models.GetPartitionLoadInformationResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionLoadInformation_1'
    name: >-
      getPartitionLoadInformation(string,
      ServiceCallback<PartitionLoadInformation>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPartitionLoadInformation(partitionId: string, callback:
        ServiceCallback<PartitionLoadInformation>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PartitionLoadInformation>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionLoadInformation_2'
    name: >-
      getPartitionLoadInformation(string,
      ServiceFabricClientGetPartitionLoadInformationOptionalParams,
      ServiceCallback<PartitionLoadInformation>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPartitionLoadInformation(partitionId: string, options:
        ServiceFabricClientGetPartitionLoadInformationOptionalParams, callback:
        ServiceCallback<PartitionLoadInformation>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetPartitionLoadInformationOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PartitionLoadInformation>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionReplicaEventList'
    name: >-
      getPartitionReplicaEventList(string, string, string, string,
      Models.ServiceFabricClientGetPartitionReplicaEventListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: The response is list of ReplicaEvent objects.
    syntax:
      content: >-
        function getPartitionReplicaEventList(partitionId: string, replicaId:
        string, startTimeUtc: string, endTimeUtc: string, options?:
        Models.ServiceFabricClientGetPartitionReplicaEventListOptionalParams)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetPartitionReplicaEventListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetPartitionReplicaEventListResponse>
        description: Promise<Models.GetPartitionReplicaEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionReplicaEventList_1'
    name: >-
      getPartitionReplicaEventList(string, string, string, string,
      ServiceCallback<Models.ReplicaEventUnion[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPartitionReplicaEventList(partitionId: string, replicaId:
        string, startTimeUtc: string, endTimeUtc: string, callback:
        ServiceCallback<Models.ReplicaEventUnion[]>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: callback
          type:
            - 'ServiceCallback<Models.ReplicaEventUnion[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionReplicaEventList_2'
    name: >-
      getPartitionReplicaEventList(string, string, string, string,
      ServiceFabricClientGetPartitionReplicaEventListOptionalParams,
      ServiceCallback<Models.ReplicaEventUnion[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPartitionReplicaEventList(partitionId: string, replicaId:
        string, startTimeUtc: string, endTimeUtc: string, options:
        ServiceFabricClientGetPartitionReplicaEventListOptionalParams, callback:
        ServiceCallback<Models.ReplicaEventUnion[]>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetPartitionReplicaEventListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - 'ServiceCallback<Models.ReplicaEventUnion[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionReplicasEventList'
    name: >-
      getPartitionReplicasEventList(string, string, string,
      Models.ServiceFabricClientGetPartitionReplicasEventListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: The response is list of ReplicaEvent objects.
    syntax:
      content: >-
        function getPartitionReplicasEventList(partitionId: string,
        startTimeUtc: string, endTimeUtc: string, options?:
        Models.ServiceFabricClientGetPartitionReplicasEventListOptionalParams)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetPartitionReplicasEventListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetPartitionReplicasEventListResponse>
        description: Promise<Models.GetPartitionReplicasEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionReplicasEventList_1'
    name: >-
      getPartitionReplicasEventList(string, string, string,
      ServiceCallback<Models.ReplicaEventUnion[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPartitionReplicasEventList(partitionId: string,
        startTimeUtc: string, endTimeUtc: string, callback:
        ServiceCallback<Models.ReplicaEventUnion[]>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: callback
          type:
            - 'ServiceCallback<Models.ReplicaEventUnion[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionReplicasEventList_2'
    name: >-
      getPartitionReplicasEventList(string, string, string,
      ServiceFabricClientGetPartitionReplicasEventListOptionalParams,
      ServiceCallback<Models.ReplicaEventUnion[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPartitionReplicasEventList(partitionId: string,
        startTimeUtc: string, endTimeUtc: string, options:
        ServiceFabricClientGetPartitionReplicasEventListOptionalParams,
        callback: ServiceCallback<Models.ReplicaEventUnion[]>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetPartitionReplicasEventListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - 'ServiceCallback<Models.ReplicaEventUnion[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionRestartProgress'
    name: >-
      getPartitionRestartProgress(string, string, string,
      Models.ServiceFabricClientGetPartitionRestartProgressOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the progress of a PartitionRestart started with StartPartitionRestart
      using the provided

      OperationId.
    syntax:
      content: >-
        function getPartitionRestartProgress(serviceId: string, partitionId:
        string, operationId: string, options?:
        Models.ServiceFabricClientGetPartitionRestartProgressOptionalParams)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: operationId
          type:
            - string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetPartitionRestartProgressOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetPartitionRestartProgressResponse>
        description: Promise<Models.GetPartitionRestartProgressResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionRestartProgress_1'
    name: >-
      getPartitionRestartProgress(string, string, string,
      ServiceCallback<PartitionRestartProgress>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPartitionRestartProgress(serviceId: string, partitionId:
        string, operationId: string, callback:
        ServiceCallback<PartitionRestartProgress>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: operationId
          type:
            - string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PartitionRestartProgress>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionRestartProgress_2'
    name: >-
      getPartitionRestartProgress(string, string, string,
      ServiceFabricClientGetPartitionRestartProgressOptionalParams,
      ServiceCallback<PartitionRestartProgress>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPartitionRestartProgress(serviceId: string, partitionId:
        string, operationId: string, options:
        ServiceFabricClientGetPartitionRestartProgressOptionalParams, callback:
        ServiceCallback<PartitionRestartProgress>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: operationId
          type:
            - string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetPartitionRestartProgressOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PartitionRestartProgress>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionRestoreProgress'
    name: >-
      getPartitionRestoreProgress(string,
      Models.ServiceFabricClientGetPartitionRestoreProgressOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns information about the state of the latest restore operation along
      with details or

      failure reason in case of completion.
    syntax:
      content: >-
        function getPartitionRestoreProgress(partitionId: string, options?:
        Models.ServiceFabricClientGetPartitionRestoreProgressOptionalParams)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetPartitionRestoreProgressOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetPartitionRestoreProgressResponse>
        description: Promise<Models.GetPartitionRestoreProgressResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionRestoreProgress_1'
    name: 'getPartitionRestoreProgress(string, ServiceCallback<RestoreProgressInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPartitionRestoreProgress(partitionId: string, callback:
        ServiceCallback<RestoreProgressInfo>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.RestoreProgressInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionRestoreProgress_2'
    name: >-
      getPartitionRestoreProgress(string,
      ServiceFabricClientGetPartitionRestoreProgressOptionalParams,
      ServiceCallback<RestoreProgressInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPartitionRestoreProgress(partitionId: string, options:
        ServiceFabricClientGetPartitionRestoreProgressOptionalParams, callback:
        ServiceCallback<RestoreProgressInfo>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetPartitionRestoreProgressOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.RestoreProgressInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionsEventList'
    name: >-
      getPartitionsEventList(string, string,
      Models.ServiceFabricClientGetPartitionsEventListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: The response is list of PartitionEvent objects.
    syntax:
      content: >-
        function getPartitionsEventList(startTimeUtc: string, endTimeUtc:
        string, options?:
        Models.ServiceFabricClientGetPartitionsEventListOptionalParams)
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: options
          type:
            - Models.ServiceFabricClientGetPartitionsEventListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetPartitionsEventListResponse>
        description: Promise<Models.GetPartitionsEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionsEventList_1'
    name: >-
      getPartitionsEventList(string, string,
      ServiceCallback<Models.PartitionEventUnion[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPartitionsEventList(startTimeUtc: string, endTimeUtc:
        string, callback: ServiceCallback<Models.PartitionEventUnion[]>)
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: callback
          type:
            - 'ServiceCallback<Models.PartitionEventUnion[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPartitionsEventList_2'
    name: >-
      getPartitionsEventList(string, string,
      ServiceFabricClientGetPartitionsEventListOptionalParams,
      ServiceCallback<Models.PartitionEventUnion[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPartitionsEventList(startTimeUtc: string, endTimeUtc:
        string, options:
        ServiceFabricClientGetPartitionsEventListOptionalParams, callback:
        ServiceCallback<Models.PartitionEventUnion[]>)
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetPartitionsEventListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - 'ServiceCallback<Models.PartitionEventUnion[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPropertyInfo'
    name: >-
      getPropertyInfo(string, string,
      Models.ServiceFabricClientGetPropertyInfoOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the specified Service Fabric property under a given name. This will
      always return both

      value and metadata.
    syntax:
      content: >-
        function getPropertyInfo(nameId: string, propertyName: string, options?:
        Models.ServiceFabricClientGetPropertyInfoOptionalParams)
      parameters:
        - id: nameId
          type:
            - string
          description: 'The Service Fabric name, without the ''fabric:'' URI scheme.'
        - id: propertyName
          type:
            - string
          description: Specifies the name of the property to get.
        - id: options
          type:
            - Models.ServiceFabricClientGetPropertyInfoOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetPropertyInfoResponse>
        description: Promise<Models.GetPropertyInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPropertyInfo_1'
    name: 'getPropertyInfo(string, string, ServiceCallback<PropertyInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPropertyInfo(nameId: string, propertyName: string, callback:
        ServiceCallback<PropertyInfo>)
      parameters:
        - id: nameId
          type:
            - string
          description: 'The Service Fabric name, without the ''fabric:'' URI scheme.'
        - id: propertyName
          type:
            - string
          description: Specifies the name of the property to get.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PropertyInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPropertyInfo_2'
    name: >-
      getPropertyInfo(string, string,
      ServiceFabricClientGetPropertyInfoOptionalParams,
      ServiceCallback<PropertyInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPropertyInfo(nameId: string, propertyName: string, options:
        ServiceFabricClientGetPropertyInfoOptionalParams, callback:
        ServiceCallback<PropertyInfo>)
      parameters:
        - id: nameId
          type:
            - string
          description: 'The Service Fabric name, without the ''fabric:'' URI scheme.'
        - id: propertyName
          type:
            - string
          description: Specifies the name of the property to get.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetPropertyInfoOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PropertyInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPropertyInfoList'
    name: >-
      getPropertyInfoList(string,
      Models.ServiceFabricClientGetPropertyInfoListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      A Service Fabric name can have one or more named properties that store
      custom information. This

      operation gets the information about these properties in a paged list. The
      information includes

      name, value, and metadata about each of the properties.
    syntax:
      content: >-
        function getPropertyInfoList(nameId: string, options?:
        Models.ServiceFabricClientGetPropertyInfoListOptionalParams)
      parameters:
        - id: nameId
          type:
            - string
          description: 'The Service Fabric name, without the ''fabric:'' URI scheme.'
        - id: options
          type:
            - Models.ServiceFabricClientGetPropertyInfoListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetPropertyInfoListResponse>
        description: Promise<Models.GetPropertyInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPropertyInfoList_1'
    name: 'getPropertyInfoList(string, ServiceCallback<PagedPropertyInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPropertyInfoList(nameId: string, callback:
        ServiceCallback<PagedPropertyInfoList>)
      parameters:
        - id: nameId
          type:
            - string
          description: 'The Service Fabric name, without the ''fabric:'' URI scheme.'
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedPropertyInfoList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getPropertyInfoList_2'
    name: >-
      getPropertyInfoList(string,
      ServiceFabricClientGetPropertyInfoListOptionalParams,
      ServiceCallback<PagedPropertyInfoList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPropertyInfoList(nameId: string, options:
        ServiceFabricClientGetPropertyInfoListOptionalParams, callback:
        ServiceCallback<PagedPropertyInfoList>)
      parameters:
        - id: nameId
          type:
            - string
          description: 'The Service Fabric name, without the ''fabric:'' URI scheme.'
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetPropertyInfoListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedPropertyInfoList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getProvisionedFabricCodeVersionInfoList
    name: >-
      getProvisionedFabricCodeVersionInfoList(Models.ServiceFabricClientGetProvisionedFabricCodeVersionInfoListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets a list of information about fabric code versions that are provisioned
      in the cluster. The

      parameter CodeVersion can be used to optionally filter the output to only
      that particular

      version.
    syntax:
      content: >-
        function getProvisionedFabricCodeVersionInfoList(options?:
        Models.ServiceFabricClientGetProvisionedFabricCodeVersionInfoListOptionalParams)
      parameters:
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetProvisionedFabricCodeVersionInfoListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetProvisionedFabricCodeVersionInfoListResponse>
        description: Promise<Models.GetProvisionedFabricCodeVersionInfoListResponse>
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getProvisionedFabricCodeVersionInfoList_1
    name: >-
      getProvisionedFabricCodeVersionInfoList(ServiceCallback<FabricCodeVersionInfo[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getProvisionedFabricCodeVersionInfoList(callback:
        ServiceCallback<FabricCodeVersionInfo[]>)
      parameters:
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.FabricCodeVersionInfo[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getProvisionedFabricCodeVersionInfoList_2
    name: >-
      getProvisionedFabricCodeVersionInfoList(ServiceFabricClientGetProvisionedFabricCodeVersionInfoListOptionalParams,
      ServiceCallback<FabricCodeVersionInfo[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getProvisionedFabricCodeVersionInfoList(options:
        ServiceFabricClientGetProvisionedFabricCodeVersionInfoListOptionalParams,
        callback: ServiceCallback<FabricCodeVersionInfo[]>)
      parameters:
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetProvisionedFabricCodeVersionInfoListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.FabricCodeVersionInfo[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getProvisionedFabricConfigVersionInfoList
    name: >-
      getProvisionedFabricConfigVersionInfoList(Models.ServiceFabricClientGetProvisionedFabricConfigVersionInfoListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets a list of information about fabric config versions that are
      provisioned in the cluster. The

      parameter ConfigVersion can be used to optionally filter the output to
      only that particular

      version.
    syntax:
      content: >-
        function getProvisionedFabricConfigVersionInfoList(options?:
        Models.ServiceFabricClientGetProvisionedFabricConfigVersionInfoListOptionalParams)
      parameters:
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetProvisionedFabricConfigVersionInfoListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetProvisionedFabricConfigVersionInfoListResponse>
        description: Promise<Models.GetProvisionedFabricConfigVersionInfoListResponse>
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getProvisionedFabricConfigVersionInfoList_1
    name: >-
      getProvisionedFabricConfigVersionInfoList(ServiceCallback<FabricConfigVersionInfo[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getProvisionedFabricConfigVersionInfoList(callback:
        ServiceCallback<FabricConfigVersionInfo[]>)
      parameters:
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.FabricConfigVersionInfo[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getProvisionedFabricConfigVersionInfoList_2
    name: >-
      getProvisionedFabricConfigVersionInfoList(ServiceFabricClientGetProvisionedFabricConfigVersionInfoListOptionalParams,
      ServiceCallback<FabricConfigVersionInfo[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getProvisionedFabricConfigVersionInfoList(options:
        ServiceFabricClientGetProvisionedFabricConfigVersionInfoListOptionalParams,
        callback: ServiceCallback<FabricConfigVersionInfo[]>)
      parameters:
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetProvisionedFabricConfigVersionInfoListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.FabricConfigVersionInfo[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getQuorumLossProgress'
    name: >-
      getQuorumLossProgress(string, string, string,
      Models.ServiceFabricClientGetQuorumLossProgressOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the progress of a quorum loss operation started with StartQuorumLoss,
      using the provided

      OperationId.
    syntax:
      content: >-
        function getQuorumLossProgress(serviceId: string, partitionId: string,
        operationId: string, options?:
        Models.ServiceFabricClientGetQuorumLossProgressOptionalParams)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: operationId
          type:
            - string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: options
          type:
            - Models.ServiceFabricClientGetQuorumLossProgressOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetQuorumLossProgressResponse>
        description: Promise<Models.GetQuorumLossProgressResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getQuorumLossProgress_1'
    name: >-
      getQuorumLossProgress(string, string, string,
      ServiceCallback<PartitionQuorumLossProgress>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getQuorumLossProgress(serviceId: string, partitionId: string,
        operationId: string, callback:
        ServiceCallback<PartitionQuorumLossProgress>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: operationId
          type:
            - string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PartitionQuorumLossProgress>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getQuorumLossProgress_2'
    name: >-
      getQuorumLossProgress(string, string, string,
      ServiceFabricClientGetQuorumLossProgressOptionalParams,
      ServiceCallback<PartitionQuorumLossProgress>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getQuorumLossProgress(serviceId: string, partitionId: string,
        operationId: string, options:
        ServiceFabricClientGetQuorumLossProgressOptionalParams, callback:
        ServiceCallback<PartitionQuorumLossProgress>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: operationId
          type:
            - string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetQuorumLossProgressOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PartitionQuorumLossProgress>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getRepairTaskList'
    name: >-
      getRepairTaskList(Models.ServiceFabricClientGetRepairTaskListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This API supports the Service Fabric platform; it is not meant to be used
      directly from your

      code.
    syntax:
      content: >-
        function getRepairTaskList(options?:
        Models.ServiceFabricClientGetRepairTaskListOptionalParams)
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientGetRepairTaskListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetRepairTaskListResponse>
        description: Promise<Models.GetRepairTaskListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getRepairTaskList_1'
    name: 'getRepairTaskList(ServiceCallback<RepairTask[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getRepairTaskList(callback: ServiceCallback<RepairTask[]>)'
      parameters:
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.RepairTask[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getRepairTaskList_2'
    name: >-
      getRepairTaskList(ServiceFabricClientGetRepairTaskListOptionalParams,
      ServiceCallback<RepairTask[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getRepairTaskList(options:
        ServiceFabricClientGetRepairTaskListOptionalParams, callback:
        ServiceCallback<RepairTask[]>)
      parameters:
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetRepairTaskListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.RepairTask[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getReplicaHealth'
    name: >-
      getReplicaHealth(string, string,
      Models.ServiceFabricClientGetReplicaHealthOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the health of a Service Fabric replica.

      Use EventsHealthStateFilter to filter the collection of health events
      reported on the replica

      based on the health state.
    syntax:
      content: >-
        function getReplicaHealth(partitionId: string, replicaId: string,
        options?: Models.ServiceFabricClientGetReplicaHealthOptionalParams)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: options
          type:
            - Models.ServiceFabricClientGetReplicaHealthOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetReplicaHealthResponse>
        description: Promise<Models.GetReplicaHealthResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getReplicaHealth_1'
    name: >-
      getReplicaHealth(string, string,
      ServiceCallback<Models.ReplicaHealthUnion>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getReplicaHealth(partitionId: string, replicaId: string,
        callback: ServiceCallback<Models.ReplicaHealthUnion>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: callback
          type:
            - ServiceCallback<Models.ReplicaHealthUnion>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getReplicaHealth_2'
    name: >-
      getReplicaHealth(string, string,
      ServiceFabricClientGetReplicaHealthOptionalParams,
      ServiceCallback<Models.ReplicaHealthUnion>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getReplicaHealth(partitionId: string, replicaId: string,
        options: ServiceFabricClientGetReplicaHealthOptionalParams, callback:
        ServiceCallback<Models.ReplicaHealthUnion>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetReplicaHealthOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<Models.ReplicaHealthUnion>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getReplicaHealthUsingPolicy'
    name: >-
      getReplicaHealthUsingPolicy(string, string,
      Models.ServiceFabricClientGetReplicaHealthUsingPolicyOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the health of a Service Fabric stateful service replica or stateless
      service instance.

      Use EventsHealthStateFilter to filter the collection of health events
      reported on the cluster

      based on the health state.

      Use ApplicationHealthPolicy to optionally override the health policies
      used to evaluate the

      health. This API only uses 'ConsiderWarningAsError' field of the
      ApplicationHealthPolicy. The

      rest of the fields are ignored while evaluating the health of the replica.
    syntax:
      content: >-
        function getReplicaHealthUsingPolicy(partitionId: string, replicaId:
        string, options?:
        Models.ServiceFabricClientGetReplicaHealthUsingPolicyOptionalParams)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetReplicaHealthUsingPolicyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetReplicaHealthUsingPolicyResponse>
        description: Promise<Models.GetReplicaHealthUsingPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getReplicaHealthUsingPolicy_1'
    name: >-
      getReplicaHealthUsingPolicy(string, string,
      ServiceCallback<Models.ReplicaHealthUnion>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getReplicaHealthUsingPolicy(partitionId: string, replicaId:
        string, callback: ServiceCallback<Models.ReplicaHealthUnion>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: callback
          type:
            - ServiceCallback<Models.ReplicaHealthUnion>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getReplicaHealthUsingPolicy_2'
    name: >-
      getReplicaHealthUsingPolicy(string, string,
      ServiceFabricClientGetReplicaHealthUsingPolicyOptionalParams,
      ServiceCallback<Models.ReplicaHealthUnion>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getReplicaHealthUsingPolicy(partitionId: string, replicaId:
        string, options:
        ServiceFabricClientGetReplicaHealthUsingPolicyOptionalParams, callback:
        ServiceCallback<Models.ReplicaHealthUnion>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetReplicaHealthUsingPolicyOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<Models.ReplicaHealthUnion>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getReplicaInfo'
    name: >-
      getReplicaInfo(string, string,
      Models.ServiceFabricClientGetReplicaInfoOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The response includes the ID, role, status, health, node name, uptime, and
      other details about

      the replica.
    syntax:
      content: >-
        function getReplicaInfo(partitionId: string, replicaId: string,
        options?: Models.ServiceFabricClientGetReplicaInfoOptionalParams)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: options
          type:
            - Models.ServiceFabricClientGetReplicaInfoOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetReplicaInfoResponse>
        description: Promise<Models.GetReplicaInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getReplicaInfo_1'
    name: 'getReplicaInfo(string, string, ServiceCallback<Models.ReplicaInfoUnion>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getReplicaInfo(partitionId: string, replicaId: string,
        callback: ServiceCallback<Models.ReplicaInfoUnion>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: callback
          type:
            - ServiceCallback<Models.ReplicaInfoUnion>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getReplicaInfo_2'
    name: >-
      getReplicaInfo(string, string,
      ServiceFabricClientGetReplicaInfoOptionalParams,
      ServiceCallback<Models.ReplicaInfoUnion>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getReplicaInfo(partitionId: string, replicaId: string, options:
        ServiceFabricClientGetReplicaInfoOptionalParams, callback:
        ServiceCallback<Models.ReplicaInfoUnion>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetReplicaInfoOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<Models.ReplicaInfoUnion>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getReplicaInfoList'
    name: >-
      getReplicaInfoList(string,
      Models.ServiceFabricClientGetReplicaInfoListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The GetReplicas endpoint returns information about the replicas of the
      specified partition. The

      response includes the ID, role, status, health, node name, uptime, and
      other details about the

      replica.
    syntax:
      content: >-
        function getReplicaInfoList(partitionId: string, options?:
        Models.ServiceFabricClientGetReplicaInfoListOptionalParams)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - Models.ServiceFabricClientGetReplicaInfoListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetReplicaInfoListResponse>
        description: Promise<Models.GetReplicaInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getReplicaInfoList_1'
    name: 'getReplicaInfoList(string, ServiceCallback<PagedReplicaInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getReplicaInfoList(partitionId: string, callback:
        ServiceCallback<PagedReplicaInfoList>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedReplicaInfoList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getReplicaInfoList_2'
    name: >-
      getReplicaInfoList(string,
      ServiceFabricClientGetReplicaInfoListOptionalParams,
      ServiceCallback<PagedReplicaInfoList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getReplicaInfoList(partitionId: string, options:
        ServiceFabricClientGetReplicaInfoListOptionalParams, callback:
        ServiceCallback<PagedReplicaInfoList>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetReplicaInfoListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedReplicaInfoList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceBackupConfigurationInfo'
    name: >-
      getServiceBackupConfigurationInfo(string,
      Models.ServiceFabricClientGetServiceBackupConfigurationInfoOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the Service Fabric backup configuration information for the service
      and the partitions

      under this service.
    syntax:
      content: >-
        function getServiceBackupConfigurationInfo(serviceId: string, options?:
        Models.ServiceFabricClientGetServiceBackupConfigurationInfoOptionalParams)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetServiceBackupConfigurationInfoOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetServiceBackupConfigurationInfoResponse>
        description: Promise<Models.GetServiceBackupConfigurationInfoResponse>
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getServiceBackupConfigurationInfo_1
    name: >-
      getServiceBackupConfigurationInfo(string,
      ServiceCallback<PagedBackupConfigurationInfoList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getServiceBackupConfigurationInfo(serviceId: string, callback:
        ServiceCallback<PagedBackupConfigurationInfoList>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/servicefabric.PagedBackupConfigurationInfoList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getServiceBackupConfigurationInfo_2
    name: >-
      getServiceBackupConfigurationInfo(string,
      ServiceFabricClientGetServiceBackupConfigurationInfoOptionalParams,
      ServiceCallback<PagedBackupConfigurationInfoList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getServiceBackupConfigurationInfo(serviceId: string, options:
        ServiceFabricClientGetServiceBackupConfigurationInfoOptionalParams,
        callback: ServiceCallback<PagedBackupConfigurationInfoList>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetServiceBackupConfigurationInfoOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/servicefabric.PagedBackupConfigurationInfoList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceBackupList'
    name: >-
      getServiceBackupList(string,
      Models.ServiceFabricClientGetServiceBackupListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a list of backups available for every partition in this Service
      Fabric service. The

      server enumerates all the backups available in the backup store configured
      in the backup policy.

      It also allows filtering of the result based on start and end datetime or
      just fetching the

      latest available backup for every partition.
    syntax:
      content: >-
        function getServiceBackupList(serviceId: string, options?:
        Models.ServiceFabricClientGetServiceBackupListOptionalParams)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type:
            - Models.ServiceFabricClientGetServiceBackupListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetServiceBackupListResponse>
        description: Promise<Models.GetServiceBackupListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceBackupList_1'
    name: 'getServiceBackupList(string, ServiceCallback<PagedBackupInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getServiceBackupList(serviceId: string, callback:
        ServiceCallback<PagedBackupInfoList>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedBackupInfoList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceBackupList_2'
    name: >-
      getServiceBackupList(string,
      ServiceFabricClientGetServiceBackupListOptionalParams,
      ServiceCallback<PagedBackupInfoList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getServiceBackupList(serviceId: string, options:
        ServiceFabricClientGetServiceBackupListOptionalParams, callback:
        ServiceCallback<PagedBackupInfoList>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetServiceBackupListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedBackupInfoList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceDescription'
    name: >-
      getServiceDescription(string,
      Models.ServiceFabricClientGetServiceDescriptionOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the description of an existing Service Fabric service. A service must
      be created before its

      description can be obtained.
    syntax:
      content: >-
        function getServiceDescription(serviceId: string, options?:
        Models.ServiceFabricClientGetServiceDescriptionOptionalParams)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type:
            - Models.ServiceFabricClientGetServiceDescriptionOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetServiceDescriptionResponse>
        description: Promise<Models.GetServiceDescriptionResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceDescription_1'
    name: >-
      getServiceDescription(string,
      ServiceCallback<Models.ServiceDescriptionUnion>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getServiceDescription(serviceId: string, callback:
        ServiceCallback<Models.ServiceDescriptionUnion>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: callback
          type:
            - ServiceCallback<Models.ServiceDescriptionUnion>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceDescription_2'
    name: >-
      getServiceDescription(string,
      ServiceFabricClientGetServiceDescriptionOptionalParams,
      ServiceCallback<Models.ServiceDescriptionUnion>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getServiceDescription(serviceId: string, options:
        ServiceFabricClientGetServiceDescriptionOptionalParams, callback:
        ServiceCallback<Models.ServiceDescriptionUnion>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetServiceDescriptionOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<Models.ServiceDescriptionUnion>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceEventList'
    name: >-
      getServiceEventList(string, string, string,
      Models.ServiceFabricClientGetServiceEventListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: The response is list of ServiceEvent objects.
    syntax:
      content: >-
        function getServiceEventList(serviceId: string, startTimeUtc: string,
        endTimeUtc: string, options?:
        Models.ServiceFabricClientGetServiceEventListOptionalParams)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: options
          type:
            - Models.ServiceFabricClientGetServiceEventListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetServiceEventListResponse>
        description: Promise<Models.GetServiceEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceEventList_1'
    name: >-
      getServiceEventList(string, string, string,
      ServiceCallback<Models.ServiceEventUnion[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getServiceEventList(serviceId: string, startTimeUtc: string,
        endTimeUtc: string, callback:
        ServiceCallback<Models.ServiceEventUnion[]>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: callback
          type:
            - 'ServiceCallback<Models.ServiceEventUnion[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceEventList_2'
    name: >-
      getServiceEventList(string, string, string,
      ServiceFabricClientGetServiceEventListOptionalParams,
      ServiceCallback<Models.ServiceEventUnion[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getServiceEventList(serviceId: string, startTimeUtc: string,
        endTimeUtc: string, options:
        ServiceFabricClientGetServiceEventListOptionalParams, callback:
        ServiceCallback<Models.ServiceEventUnion[]>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetServiceEventListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - 'ServiceCallback<Models.ServiceEventUnion[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceHealth'
    name: >-
      getServiceHealth(string,
      Models.ServiceFabricClientGetServiceHealthOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the health information of the specified service.

      Use EventsHealthStateFilter to filter the collection of health events
      reported on the service

      based on the health state.

      Use PartitionsHealthStateFilter to filter the collection of partitions
      returned.

      If you specify a service that does not exist in the health store, this
      request returns an error.
    syntax:
      content: >-
        function getServiceHealth(serviceId: string, options?:
        Models.ServiceFabricClientGetServiceHealthOptionalParams)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type:
            - Models.ServiceFabricClientGetServiceHealthOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetServiceHealthResponse>
        description: Promise<Models.GetServiceHealthResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceHealth_1'
    name: 'getServiceHealth(string, ServiceCallback<ServiceHealth>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getServiceHealth(serviceId: string, callback:
        ServiceCallback<ServiceHealth>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ServiceHealth>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceHealth_2'
    name: >-
      getServiceHealth(string,
      ServiceFabricClientGetServiceHealthOptionalParams,
      ServiceCallback<ServiceHealth>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getServiceHealth(serviceId: string, options:
        ServiceFabricClientGetServiceHealthOptionalParams, callback:
        ServiceCallback<ServiceHealth>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetServiceHealthOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ServiceHealth>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceHealthUsingPolicy'
    name: >-
      getServiceHealthUsingPolicy(string,
      Models.ServiceFabricClientGetServiceHealthUsingPolicyOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the health information of the specified service.

      If the application health policy is specified, the health evaluation uses
      it to get the

      aggregated health state.

      If the policy is not specified, the health evaluation uses the application
      health policy defined

      in the application manifest, or the default health policy, if no policy is
      defined in the

      manifest.

      Use EventsHealthStateFilter to filter the collection of health events
      reported on the service

      based on the health state.

      Use PartitionsHealthStateFilter to filter the collection of partitions
      returned.

      If you specify a service that does not exist in the health store, this
      request returns an error.
    syntax:
      content: >-
        function getServiceHealthUsingPolicy(serviceId: string, options?:
        Models.ServiceFabricClientGetServiceHealthUsingPolicyOptionalParams)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetServiceHealthUsingPolicyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetServiceHealthUsingPolicyResponse>
        description: Promise<Models.GetServiceHealthUsingPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceHealthUsingPolicy_1'
    name: 'getServiceHealthUsingPolicy(string, ServiceCallback<ServiceHealth>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getServiceHealthUsingPolicy(serviceId: string, callback:
        ServiceCallback<ServiceHealth>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ServiceHealth>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceHealthUsingPolicy_2'
    name: >-
      getServiceHealthUsingPolicy(string,
      ServiceFabricClientGetServiceHealthUsingPolicyOptionalParams,
      ServiceCallback<ServiceHealth>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getServiceHealthUsingPolicy(serviceId: string, options:
        ServiceFabricClientGetServiceHealthUsingPolicyOptionalParams, callback:
        ServiceCallback<ServiceHealth>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetServiceHealthUsingPolicyOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ServiceHealth>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceInfo'
    name: >-
      getServiceInfo(string, string,
      Models.ServiceFabricClientGetServiceInfoOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns the information about the specified service belonging to the
      specified Service Fabric

      application.
    syntax:
      content: >-
        function getServiceInfo(applicationId: string, serviceId: string,
        options?: Models.ServiceFabricClientGetServiceInfoOptionalParams)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type:
            - Models.ServiceFabricClientGetServiceInfoOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetServiceInfoResponse>
        description: Promise<Models.GetServiceInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceInfo_1'
    name: 'getServiceInfo(string, string, ServiceCallback<Models.ServiceInfoUnion>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getServiceInfo(applicationId: string, serviceId: string,
        callback: ServiceCallback<Models.ServiceInfoUnion>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: callback
          type:
            - ServiceCallback<Models.ServiceInfoUnion>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceInfo_2'
    name: >-
      getServiceInfo(string, string,
      ServiceFabricClientGetServiceInfoOptionalParams,
      ServiceCallback<Models.ServiceInfoUnion>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getServiceInfo(applicationId: string, serviceId: string,
        options: ServiceFabricClientGetServiceInfoOptionalParams, callback:
        ServiceCallback<Models.ServiceInfoUnion>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetServiceInfoOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<Models.ServiceInfoUnion>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceInfoList'
    name: >-
      getServiceInfoList(string,
      Models.ServiceFabricClientGetServiceInfoListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns the information about all services belonging to the application
      specified by the

      application ID.
    syntax:
      content: >-
        function getServiceInfoList(applicationId: string, options?:
        Models.ServiceFabricClientGetServiceInfoListOptionalParams)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - Models.ServiceFabricClientGetServiceInfoListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetServiceInfoListResponse>
        description: Promise<Models.GetServiceInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceInfoList_1'
    name: 'getServiceInfoList(string, ServiceCallback<PagedServiceInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getServiceInfoList(applicationId: string, callback:
        ServiceCallback<PagedServiceInfoList>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedServiceInfoList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceInfoList_2'
    name: >-
      getServiceInfoList(string,
      ServiceFabricClientGetServiceInfoListOptionalParams,
      ServiceCallback<PagedServiceInfoList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getServiceInfoList(applicationId: string, options:
        ServiceFabricClientGetServiceInfoListOptionalParams, callback:
        ServiceCallback<PagedServiceInfoList>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetServiceInfoListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedServiceInfoList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceManifest'
    name: >-
      getServiceManifest(string, string, string,
      Models.ServiceFabricClientGetServiceManifestOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the manifest describing a service type. The response contains the
      service manifest XML as a

      string.
    syntax:
      content: >-
        function getServiceManifest(applicationTypeName: string,
        applicationTypeVersion: string, serviceManifestName: string, options?:
        Models.ServiceFabricClientGetServiceManifestOptionalParams)
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: The name of the application type.
        - id: applicationTypeVersion
          type:
            - string
          description: The version of the application type.
        - id: serviceManifestName
          type:
            - string
          description: |-
            The name of a service manifest registered as part of an application
            type in a Service Fabric cluster.
        - id: options
          type:
            - Models.ServiceFabricClientGetServiceManifestOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetServiceManifestResponse>
        description: Promise<Models.GetServiceManifestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceManifest_1'
    name: >-
      getServiceManifest(string, string, string,
      ServiceCallback<ServiceTypeManifest>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getServiceManifest(applicationTypeName: string,
        applicationTypeVersion: string, serviceManifestName: string, callback:
        ServiceCallback<ServiceTypeManifest>)
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: The name of the application type.
        - id: applicationTypeVersion
          type:
            - string
          description: The version of the application type.
        - id: serviceManifestName
          type:
            - string
          description: |-
            The name of a service manifest registered as part of an application
            type in a Service Fabric cluster.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ServiceTypeManifest>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceManifest_2'
    name: >-
      getServiceManifest(string, string, string,
      ServiceFabricClientGetServiceManifestOptionalParams,
      ServiceCallback<ServiceTypeManifest>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getServiceManifest(applicationTypeName: string,
        applicationTypeVersion: string, serviceManifestName: string, options:
        ServiceFabricClientGetServiceManifestOptionalParams, callback:
        ServiceCallback<ServiceTypeManifest>)
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: The name of the application type.
        - id: applicationTypeVersion
          type:
            - string
          description: The version of the application type.
        - id: serviceManifestName
          type:
            - string
          description: |-
            The name of a service manifest registered as part of an application
            type in a Service Fabric cluster.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetServiceManifestOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ServiceTypeManifest>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceNameInfo'
    name: >-
      getServiceNameInfo(string,
      Models.ServiceFabricClientGetServiceNameInfoOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets name of the service for the specified partition. A 404 error is
      returned if the partition

      ID does not exist in the cluster.
    syntax:
      content: >-
        function getServiceNameInfo(partitionId: string, options?:
        Models.ServiceFabricClientGetServiceNameInfoOptionalParams)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - Models.ServiceFabricClientGetServiceNameInfoOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetServiceNameInfoResponse>
        description: Promise<Models.GetServiceNameInfoResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceNameInfo_1'
    name: 'getServiceNameInfo(string, ServiceCallback<ServiceNameInfo>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getServiceNameInfo(partitionId: string, callback:
        ServiceCallback<ServiceNameInfo>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ServiceNameInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceNameInfo_2'
    name: >-
      getServiceNameInfo(string,
      ServiceFabricClientGetServiceNameInfoOptionalParams,
      ServiceCallback<ServiceNameInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getServiceNameInfo(partitionId: string, options:
        ServiceFabricClientGetServiceNameInfoOptionalParams, callback:
        ServiceCallback<ServiceNameInfo>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetServiceNameInfoOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ServiceNameInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServicesEventList'
    name: >-
      getServicesEventList(string, string,
      Models.ServiceFabricClientGetServicesEventListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: The response is list of ServiceEvent objects.
    syntax:
      content: >-
        function getServicesEventList(startTimeUtc: string, endTimeUtc: string,
        options?: Models.ServiceFabricClientGetServicesEventListOptionalParams)
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: options
          type:
            - Models.ServiceFabricClientGetServicesEventListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetServicesEventListResponse>
        description: Promise<Models.GetServicesEventListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServicesEventList_1'
    name: >-
      getServicesEventList(string, string,
      ServiceCallback<Models.ServiceEventUnion[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getServicesEventList(startTimeUtc: string, endTimeUtc: string,
        callback: ServiceCallback<Models.ServiceEventUnion[]>)
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: callback
          type:
            - 'ServiceCallback<Models.ServiceEventUnion[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServicesEventList_2'
    name: >-
      getServicesEventList(string, string,
      ServiceFabricClientGetServicesEventListOptionalParams,
      ServiceCallback<Models.ServiceEventUnion[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getServicesEventList(startTimeUtc: string, endTimeUtc: string,
        options: ServiceFabricClientGetServicesEventListOptionalParams,
        callback: ServiceCallback<Models.ServiceEventUnion[]>)
      parameters:
        - id: startTimeUtc
          type:
            - string
          description: 'The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: endTimeUtc
          type:
            - string
          description: 'The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.'
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetServicesEventListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - 'ServiceCallback<Models.ServiceEventUnion[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceTypeInfoByName'
    name: >-
      getServiceTypeInfoByName(string, string, string,
      Models.ServiceFabricClientGetServiceTypeInfoByNameOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the information about a specific service type that is supported by a
      provisioned

      application type in a Service Fabric cluster. The provided application
      type must exist.

      Otherwise, a 404 status is returned. A 204 response is returned if the
      specified service type is

      not found in the cluster.
    syntax:
      content: >-
        function getServiceTypeInfoByName(applicationTypeName: string,
        applicationTypeVersion: string, serviceTypeName: string, options?:
        Models.ServiceFabricClientGetServiceTypeInfoByNameOptionalParams)
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: The name of the application type.
        - id: applicationTypeVersion
          type:
            - string
          description: The version of the application type.
        - id: serviceTypeName
          type:
            - string
          description: Specifies the name of a Service Fabric service type.
        - id: options
          type:
            - Models.ServiceFabricClientGetServiceTypeInfoByNameOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetServiceTypeInfoByNameResponse>
        description: Promise<Models.GetServiceTypeInfoByNameResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceTypeInfoByName_1'
    name: >-
      getServiceTypeInfoByName(string, string, string,
      ServiceCallback<ServiceTypeInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getServiceTypeInfoByName(applicationTypeName: string,
        applicationTypeVersion: string, serviceTypeName: string, callback:
        ServiceCallback<ServiceTypeInfo>)
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: The name of the application type.
        - id: applicationTypeVersion
          type:
            - string
          description: The version of the application type.
        - id: serviceTypeName
          type:
            - string
          description: Specifies the name of a Service Fabric service type.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ServiceTypeInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceTypeInfoByName_2'
    name: >-
      getServiceTypeInfoByName(string, string, string,
      ServiceFabricClientGetServiceTypeInfoByNameOptionalParams,
      ServiceCallback<ServiceTypeInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getServiceTypeInfoByName(applicationTypeName: string,
        applicationTypeVersion: string, serviceTypeName: string, options:
        ServiceFabricClientGetServiceTypeInfoByNameOptionalParams, callback:
        ServiceCallback<ServiceTypeInfo>)
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: The name of the application type.
        - id: applicationTypeVersion
          type:
            - string
          description: The version of the application type.
        - id: serviceTypeName
          type:
            - string
          description: Specifies the name of a Service Fabric service type.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetServiceTypeInfoByNameOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ServiceTypeInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceTypeInfoList'
    name: >-
      getServiceTypeInfoList(string, string,
      Models.ServiceFabricClientGetServiceTypeInfoListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the list containing the information about service types that are
      supported by a provisioned

      application type in a Service Fabric cluster. The provided application
      type must exist.

      Otherwise, a 404 status is returned.
    syntax:
      content: >-
        function getServiceTypeInfoList(applicationTypeName: string,
        applicationTypeVersion: string, options?:
        Models.ServiceFabricClientGetServiceTypeInfoListOptionalParams)
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: The name of the application type.
        - id: applicationTypeVersion
          type:
            - string
          description: The version of the application type.
        - id: options
          type:
            - Models.ServiceFabricClientGetServiceTypeInfoListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetServiceTypeInfoListResponse>
        description: Promise<Models.GetServiceTypeInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceTypeInfoList_1'
    name: 'getServiceTypeInfoList(string, string, ServiceCallback<ServiceTypeInfo[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getServiceTypeInfoList(applicationTypeName: string,
        applicationTypeVersion: string, callback:
        ServiceCallback<ServiceTypeInfo[]>)
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: The name of the application type.
        - id: applicationTypeVersion
          type:
            - string
          description: The version of the application type.
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.ServiceTypeInfo[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getServiceTypeInfoList_2'
    name: >-
      getServiceTypeInfoList(string, string,
      ServiceFabricClientGetServiceTypeInfoListOptionalParams,
      ServiceCallback<ServiceTypeInfo[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getServiceTypeInfoList(applicationTypeName: string,
        applicationTypeVersion: string, options:
        ServiceFabricClientGetServiceTypeInfoListOptionalParams, callback:
        ServiceCallback<ServiceTypeInfo[]>)
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: The name of the application type.
        - id: applicationTypeVersion
          type:
            - string
          description: The version of the application type.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetServiceTypeInfoListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - 'ServiceCallback<@azure/servicefabric.ServiceTypeInfo[]>'
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getSubNameInfoList'
    name: >-
      getSubNameInfoList(string,
      Models.ServiceFabricClientGetSubNameInfoListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Enumerates all the Service Fabric names under a given name. If the
      subnames do not fit in a

      page, one page of results is returned as well as a continuation token,
      which can be used to get

      the next page. Querying a name that doesn't exist will fail.
    syntax:
      content: >-
        function getSubNameInfoList(nameId: string, options?:
        Models.ServiceFabricClientGetSubNameInfoListOptionalParams)
      parameters:
        - id: nameId
          type:
            - string
          description: 'The Service Fabric name, without the ''fabric:'' URI scheme.'
        - id: options
          type:
            - Models.ServiceFabricClientGetSubNameInfoListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetSubNameInfoListResponse>
        description: Promise<Models.GetSubNameInfoListResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getSubNameInfoList_1'
    name: 'getSubNameInfoList(string, ServiceCallback<PagedSubNameInfoList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getSubNameInfoList(nameId: string, callback:
        ServiceCallback<PagedSubNameInfoList>)
      parameters:
        - id: nameId
          type:
            - string
          description: 'The Service Fabric name, without the ''fabric:'' URI scheme.'
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedSubNameInfoList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getSubNameInfoList_2'
    name: >-
      getSubNameInfoList(string,
      ServiceFabricClientGetSubNameInfoListOptionalParams,
      ServiceCallback<PagedSubNameInfoList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getSubNameInfoList(nameId: string, options:
        ServiceFabricClientGetSubNameInfoListOptionalParams, callback:
        ServiceCallback<PagedSubNameInfoList>)
      parameters:
        - id: nameId
          type:
            - string
          description: 'The Service Fabric name, without the ''fabric:'' URI scheme.'
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetSubNameInfoListOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.PagedSubNameInfoList>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getUnplacedReplicaInformation'
    name: >-
      getUnplacedReplicaInformation(string,
      Models.ServiceFabricClientGetUnplacedReplicaInformationOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns the information about the unplaced replicas of the service.

      If PartitionId is specified, then result will contain information only
      about unplaced replicas

      for that partition.

      If PartitionId is not specified, then result will contain information
      about unplaced replicas

      for all partitions of that service.

      If OnlyQueryPrimaries is set to true, then result will contain information
      only about primary

      replicas, and will ignore unplaced secondary replicas.
    syntax:
      content: >-
        function getUnplacedReplicaInformation(serviceId: string, options?:
        Models.ServiceFabricClientGetUnplacedReplicaInformationOptionalParams)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetUnplacedReplicaInformationOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetUnplacedReplicaInformationResponse>
        description: Promise<Models.GetUnplacedReplicaInformationResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getUnplacedReplicaInformation_1'
    name: >-
      getUnplacedReplicaInformation(string,
      ServiceCallback<UnplacedReplicaInformation>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getUnplacedReplicaInformation(serviceId: string, callback:
        ServiceCallback<UnplacedReplicaInformation>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.UnplacedReplicaInformation>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.getUnplacedReplicaInformation_2'
    name: >-
      getUnplacedReplicaInformation(string,
      ServiceFabricClientGetUnplacedReplicaInformationOptionalParams,
      ServiceCallback<UnplacedReplicaInformation>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getUnplacedReplicaInformation(serviceId: string, options:
        ServiceFabricClientGetUnplacedReplicaInformationOptionalParams,
        callback: ServiceCallback<UnplacedReplicaInformation>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetUnplacedReplicaInformationOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.UnplacedReplicaInformation>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getUpgradeOrchestrationServiceState
    name: >-
      getUpgradeOrchestrationServiceState(Models.ServiceFabricClientGetUpgradeOrchestrationServiceStateOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Get the service state of Service Fabric Upgrade Orchestration Service.
      This API is internally

      used for support purposes.
    syntax:
      content: >-
        function getUpgradeOrchestrationServiceState(options?:
        Models.ServiceFabricClientGetUpgradeOrchestrationServiceStateOptionalParams)
      parameters:
        - id: options
          type:
            - >-
              Models.ServiceFabricClientGetUpgradeOrchestrationServiceStateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetUpgradeOrchestrationServiceStateResponse>
        description: Promise<Models.GetUpgradeOrchestrationServiceStateResponse>
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getUpgradeOrchestrationServiceState_1
    name: >-
      getUpgradeOrchestrationServiceState(ServiceCallback<UpgradeOrchestrationServiceState>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getUpgradeOrchestrationServiceState(callback:
        ServiceCallback<UpgradeOrchestrationServiceState>)
      parameters:
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/servicefabric.UpgradeOrchestrationServiceState>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.getUpgradeOrchestrationServiceState_2
    name: >-
      getUpgradeOrchestrationServiceState(ServiceFabricClientGetUpgradeOrchestrationServiceStateOptionalParams,
      ServiceCallback<UpgradeOrchestrationServiceState>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getUpgradeOrchestrationServiceState(options:
        ServiceFabricClientGetUpgradeOrchestrationServiceStateOptionalParams,
        callback: ServiceCallback<UpgradeOrchestrationServiceState>)
      parameters:
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientGetUpgradeOrchestrationServiceStateOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/servicefabric.UpgradeOrchestrationServiceState>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.invokeContainerApi'
    name: >-
      invokeContainerApi(string, string, string, string, string,
      ContainerApiRequestBody,
      Models.ServiceFabricClientInvokeContainerApiOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Invoke container API on a container deployed on a Service Fabric node for
      the given code

      package.
    syntax:
      content: >-
        function invokeContainerApi(nodeName: string, applicationId: string,
        serviceManifestName: string, codePackageName: string,
        codePackageInstanceId: string, containerApiRequestBody:
        ContainerApiRequestBody, options?:
        Models.ServiceFabricClientInvokeContainerApiOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceManifestName
          type:
            - string
          description: |-
            The name of a service manifest registered as part of an application
            type in a Service Fabric cluster.
        - id: codePackageName
          type:
            - string
          description: >-
            The name of code package specified in service manifest registered as
            part

            of an application type in a Service Fabric cluster.
        - id: codePackageInstanceId
          type:
            - string
          description: |-
            ID that uniquely identifies a code package instance deployed on a
            service fabric node.
        - id: containerApiRequestBody
          type:
            - '@azure/servicefabric.ContainerApiRequestBody'
          description: Parameters for making container API call
        - id: options
          type:
            - Models.ServiceFabricClientInvokeContainerApiOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.InvokeContainerApiResponse>
        description: Promise<Models.InvokeContainerApiResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.invokeContainerApi_1'
    name: >-
      invokeContainerApi(string, string, string, string, string,
      ContainerApiRequestBody, ServiceCallback<ContainerApiResponse>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function invokeContainerApi(nodeName: string, applicationId: string,
        serviceManifestName: string, codePackageName: string,
        codePackageInstanceId: string, containerApiRequestBody:
        ContainerApiRequestBody, callback:
        ServiceCallback<ContainerApiResponse>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceManifestName
          type:
            - string
          description: |-
            The name of a service manifest registered as part of an application
            type in a Service Fabric cluster.
        - id: codePackageName
          type:
            - string
          description: >-
            The name of code package specified in service manifest registered as
            part

            of an application type in a Service Fabric cluster.
        - id: codePackageInstanceId
          type:
            - string
          description: |-
            ID that uniquely identifies a code package instance deployed on a
            service fabric node.
        - id: containerApiRequestBody
          type:
            - '@azure/servicefabric.ContainerApiRequestBody'
          description: Parameters for making container API call
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ContainerApiResponse>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.invokeContainerApi_2'
    name: >-
      invokeContainerApi(string, string, string, string, string,
      ContainerApiRequestBody,
      ServiceFabricClientInvokeContainerApiOptionalParams,
      ServiceCallback<ContainerApiResponse>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function invokeContainerApi(nodeName: string, applicationId: string,
        serviceManifestName: string, codePackageName: string,
        codePackageInstanceId: string, containerApiRequestBody:
        ContainerApiRequestBody, options:
        ServiceFabricClientInvokeContainerApiOptionalParams, callback:
        ServiceCallback<ContainerApiResponse>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceManifestName
          type:
            - string
          description: |-
            The name of a service manifest registered as part of an application
            type in a Service Fabric cluster.
        - id: codePackageName
          type:
            - string
          description: >-
            The name of code package specified in service manifest registered as
            part

            of an application type in a Service Fabric cluster.
        - id: codePackageInstanceId
          type:
            - string
          description: |-
            ID that uniquely identifies a code package instance deployed on a
            service fabric node.
        - id: containerApiRequestBody
          type:
            - '@azure/servicefabric.ContainerApiRequestBody'
          description: Parameters for making container API call
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientInvokeContainerApiOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ContainerApiResponse>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.invokeInfrastructureCommand'
    name: >-
      invokeInfrastructureCommand(string,
      Models.ServiceFabricClientInvokeInfrastructureCommandOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      For clusters that have one or more instances of the Infrastructure Service
      configured,

      this API provides a way to send infrastructure-specific commands to a
      particular

      instance of the Infrastructure Service.

      Available commands and their corresponding response formats vary depending
      upon

      the infrastructure on which the cluster is running.


      This API supports the Service Fabric platform; it is not meant to be used
      directly from your

      code.
    syntax:
      content: >-
        function invokeInfrastructureCommand(command: string, options?:
        Models.ServiceFabricClientInvokeInfrastructureCommandOptionalParams)
      parameters:
        - id: command
          type:
            - string
          description: |-
            The text of the command to be invoked. The content of the command is
            infrastructure-specific.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientInvokeInfrastructureCommandOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.InvokeInfrastructureCommandResponse>
        description: Promise<Models.InvokeInfrastructureCommandResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.invokeInfrastructureCommand_1'
    name: 'invokeInfrastructureCommand(string, ServiceCallback<string>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function invokeInfrastructureCommand(command: string, callback:
        ServiceCallback<string>)
      parameters:
        - id: command
          type:
            - string
          description: |-
            The text of the command to be invoked. The content of the command is
            infrastructure-specific.
        - id: callback
          type:
            - ServiceCallback<string>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.invokeInfrastructureCommand_2'
    name: >-
      invokeInfrastructureCommand(string,
      ServiceFabricClientInvokeInfrastructureCommandOptionalParams,
      ServiceCallback<string>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function invokeInfrastructureCommand(command: string, options:
        ServiceFabricClientInvokeInfrastructureCommandOptionalParams, callback:
        ServiceCallback<string>)
      parameters:
        - id: command
          type:
            - string
          description: |-
            The text of the command to be invoked. The content of the command is
            infrastructure-specific.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientInvokeInfrastructureCommandOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<string>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.invokeInfrastructureQuery'
    name: >-
      invokeInfrastructureQuery(string,
      Models.ServiceFabricClientInvokeInfrastructureQueryOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      For clusters that have one or more instances of the Infrastructure Service
      configured,

      this API provides a way to send infrastructure-specific queries to a
      particular

      instance of the Infrastructure Service.

      Available commands and their corresponding response formats vary depending
      upon

      the infrastructure on which the cluster is running.


      This API supports the Service Fabric platform; it is not meant to be used
      directly from your

      code.
    syntax:
      content: >-
        function invokeInfrastructureQuery(command: string, options?:
        Models.ServiceFabricClientInvokeInfrastructureQueryOptionalParams)
      parameters:
        - id: command
          type:
            - string
          description: |-
            The text of the command to be invoked. The content of the command is
            infrastructure-specific.
        - id: options
          type:
            - Models.ServiceFabricClientInvokeInfrastructureQueryOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.InvokeInfrastructureQueryResponse>
        description: Promise<Models.InvokeInfrastructureQueryResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.invokeInfrastructureQuery_1'
    name: 'invokeInfrastructureQuery(string, ServiceCallback<string>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function invokeInfrastructureQuery(command: string, callback:
        ServiceCallback<string>)
      parameters:
        - id: command
          type:
            - string
          description: |-
            The text of the command to be invoked. The content of the command is
            infrastructure-specific.
        - id: callback
          type:
            - ServiceCallback<string>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.invokeInfrastructureQuery_2'
    name: >-
      invokeInfrastructureQuery(string,
      ServiceFabricClientInvokeInfrastructureQueryOptionalParams,
      ServiceCallback<string>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function invokeInfrastructureQuery(command: string, options:
        ServiceFabricClientInvokeInfrastructureQueryOptionalParams, callback:
        ServiceCallback<string>)
      parameters:
        - id: command
          type:
            - string
          description: |-
            The text of the command to be invoked. The content of the command is
            infrastructure-specific.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientInvokeInfrastructureQueryOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<string>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.meshApplication'
    name: meshApplication
    fullName: meshApplication
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'meshApplication: MeshApplication'
      return:
        type:
          - '@azure/servicefabric.MeshApplication'
        description: ''
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.meshCodePackage'
    name: meshCodePackage
    fullName: meshCodePackage
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'meshCodePackage: MeshCodePackage'
      return:
        type:
          - '@azure/servicefabric.MeshCodePackage'
        description: ''
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.meshGateway'
    name: meshGateway
    fullName: meshGateway
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'meshGateway: MeshGateway'
      return:
        type:
          - '@azure/servicefabric.MeshGateway'
        description: ''
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.meshNetwork'
    name: meshNetwork
    fullName: meshNetwork
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'meshNetwork: MeshNetwork'
      return:
        type:
          - '@azure/servicefabric.MeshNetwork'
        description: ''
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.meshSecret'
    name: meshSecret
    fullName: meshSecret
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'meshSecret: MeshSecret'
      return:
        type:
          - '@azure/servicefabric.MeshSecret'
        description: ''
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.meshSecretValue'
    name: meshSecretValue
    fullName: meshSecretValue
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'meshSecretValue: MeshSecretValue'
      return:
        type:
          - '@azure/servicefabric.MeshSecretValue'
        description: ''
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.meshService'
    name: meshService
    fullName: meshService
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'meshService: MeshService'
      return:
        type:
          - '@azure/servicefabric.MeshService'
        description: ''
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.meshServiceReplica'
    name: meshServiceReplica
    fullName: meshServiceReplica
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'meshServiceReplica: MeshServiceReplica'
      return:
        type:
          - '@azure/servicefabric.MeshServiceReplica'
        description: ''
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.meshVolume'
    name: meshVolume
    fullName: meshVolume
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'meshVolume: MeshVolume'
      return:
        type:
          - '@azure/servicefabric.MeshVolume'
        description: ''
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.movePrimaryReplica'
    name: >-
      movePrimaryReplica(string,
      Models.ServiceFabricClientMovePrimaryReplicaOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This command moves the primary replica of a partition of a stateful
      service, respecting all

      constraints.

      If NodeName parameter is specified, primary will be moved to the specified
      node (if constraints

      allow it).

      If NodeName parameter is not specified, primary replica will be moved to a
      random node in the

      cluster.

      If IgnoreConstraints parameter is specified and set to true, then primary
      will be moved

      regardless of the constraints.
    syntax:
      content: >-
        function movePrimaryReplica(partitionId: string, options?:
        Models.ServiceFabricClientMovePrimaryReplicaOptionalParams)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - Models.ServiceFabricClientMovePrimaryReplicaOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.movePrimaryReplica_1'
    name: 'movePrimaryReplica(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function movePrimaryReplica(partitionId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.movePrimaryReplica_2'
    name: >-
      movePrimaryReplica(string,
      ServiceFabricClientMovePrimaryReplicaOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function movePrimaryReplica(partitionId: string, options:
        ServiceFabricClientMovePrimaryReplicaOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientMovePrimaryReplicaOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.moveSecondaryReplica'
    name: >-
      moveSecondaryReplica(string, string,
      Models.ServiceFabricClientMoveSecondaryReplicaOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This command moves the secondary replica of a partition of a stateful
      service, respecting all

      constraints.

      CurrentNodeName parameter must be specified to identify the replica that
      is moved.

      Source node name must be specified, but new node name can be omitted, and
      in that case replica

      is moved to a random node.

      If IgnoreConstraints parameter is specified and set to true, then
      secondary will be moved

      regardless of the constraints.
    syntax:
      content: >-
        function moveSecondaryReplica(partitionId: string, currentNodeName:
        string, options?:
        Models.ServiceFabricClientMoveSecondaryReplicaOptionalParams)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: currentNodeName
          type:
            - string
          description: The name of the source node for secondary replica move.
        - id: options
          type:
            - Models.ServiceFabricClientMoveSecondaryReplicaOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.moveSecondaryReplica_1'
    name: 'moveSecondaryReplica(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function moveSecondaryReplica(partitionId: string, currentNodeName:
        string, callback: ServiceCallback<void>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: currentNodeName
          type:
            - string
          description: The name of the source node for secondary replica move.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.moveSecondaryReplica_2'
    name: >-
      moveSecondaryReplica(string, string,
      ServiceFabricClientMoveSecondaryReplicaOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function moveSecondaryReplica(partitionId: string, currentNodeName:
        string, options: ServiceFabricClientMoveSecondaryReplicaOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: currentNodeName
          type:
            - string
          description: The name of the source node for secondary replica move.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientMoveSecondaryReplicaOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.postChaosSchedule'
    name: >-
      postChaosSchedule(ChaosScheduleDescription,
      Models.ServiceFabricClientPostChaosScheduleOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Chaos will automatically schedule runs based on the Chaos Schedule.

      The Chaos Schedule will be updated if the provided version matches the
      version on the server.

      When updating the Chaos Schedule, the version on the server is incremented
      by 1.

      The version on the server will wrap back to 0 after reaching a large
      number.

      If Chaos is running when this call is made, the call will fail.
    syntax:
      content: >-
        function postChaosSchedule(chaosSchedule: ChaosScheduleDescription,
        options?: Models.ServiceFabricClientPostChaosScheduleOptionalParams)
      parameters:
        - id: chaosSchedule
          type:
            - '@azure/servicefabric.ChaosScheduleDescription'
          description: Describes the schedule used by Chaos.
        - id: options
          type:
            - Models.ServiceFabricClientPostChaosScheduleOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.postChaosSchedule_1'
    name: 'postChaosSchedule(ChaosScheduleDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function postChaosSchedule(chaosSchedule: ChaosScheduleDescription,
        callback: ServiceCallback<void>)
      parameters:
        - id: chaosSchedule
          type:
            - '@azure/servicefabric.ChaosScheduleDescription'
          description: Describes the schedule used by Chaos.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.postChaosSchedule_2'
    name: >-
      postChaosSchedule(ChaosScheduleDescription,
      ServiceFabricClientPostChaosScheduleOptionalParams, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function postChaosSchedule(chaosSchedule: ChaosScheduleDescription,
        options: ServiceFabricClientPostChaosScheduleOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: chaosSchedule
          type:
            - '@azure/servicefabric.ChaosScheduleDescription'
          description: Describes the schedule used by Chaos.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientPostChaosScheduleOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.provisionApplicationType'
    name: >-
      provisionApplicationType(Models.ProvisionApplicationTypeDescriptionBaseUnion,
      Models.ServiceFabricClientProvisionApplicationTypeOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Provisions a Service Fabric application type with the cluster. The
      provision is required before

      any new applications can be instantiated.

      The provision operation can be performed either on the application package
      specified by the

      relativePathInImageStore, or by using the URI of the external '.sfpkg'.
    syntax:
      content: >-
        function
        provisionApplicationType(provisionApplicationTypeDescriptionBaseRequiredBodyParam:
        Models.ProvisionApplicationTypeDescriptionBaseUnion, options?:
        Models.ServiceFabricClientProvisionApplicationTypeOptionalParams)
      parameters:
        - id: provisionApplicationTypeDescriptionBaseRequiredBodyParam
          type:
            - Models.ProvisionApplicationTypeDescriptionBaseUnion
          description: >-
            The base type of provision

            application type description which supports either image store-based
            provision or external

            store-based provision.
        - id: options
          type:
            - Models.ServiceFabricClientProvisionApplicationTypeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.provisionApplicationType_1'
    name: >-
      provisionApplicationType(Models.ProvisionApplicationTypeDescriptionBaseUnion,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function
        provisionApplicationType(provisionApplicationTypeDescriptionBaseRequiredBodyParam:
        Models.ProvisionApplicationTypeDescriptionBaseUnion, callback:
        ServiceCallback<void>)
      parameters:
        - id: provisionApplicationTypeDescriptionBaseRequiredBodyParam
          type:
            - Models.ProvisionApplicationTypeDescriptionBaseUnion
          description: >-
            The base type of provision

            application type description which supports either image store-based
            provision or external

            store-based provision.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.provisionApplicationType_2'
    name: >-
      provisionApplicationType(Models.ProvisionApplicationTypeDescriptionBaseUnion,
      ServiceFabricClientProvisionApplicationTypeOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function
        provisionApplicationType(provisionApplicationTypeDescriptionBaseRequiredBodyParam:
        Models.ProvisionApplicationTypeDescriptionBaseUnion, options:
        ServiceFabricClientProvisionApplicationTypeOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: provisionApplicationTypeDescriptionBaseRequiredBodyParam
          type:
            - Models.ProvisionApplicationTypeDescriptionBaseUnion
          description: >-
            The base type of provision

            application type description which supports either image store-based
            provision or external

            store-based provision.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientProvisionApplicationTypeOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.provisionCluster'
    name: >-
      provisionCluster(ProvisionFabricDescription,
      Models.ServiceFabricClientProvisionClusterOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Validate and provision the code or configuration packages of a Service
      Fabric cluster.
    syntax:
      content: >-
        function provisionCluster(provisionFabricDescription:
        ProvisionFabricDescription, options?:
        Models.ServiceFabricClientProvisionClusterOptionalParams)
      parameters:
        - id: provisionFabricDescription
          type:
            - '@azure/servicefabric.ProvisionFabricDescription'
          description: Describes the parameters for provisioning a cluster.
        - id: options
          type:
            - Models.ServiceFabricClientProvisionClusterOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.provisionCluster_1'
    name: 'provisionCluster(ProvisionFabricDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function provisionCluster(provisionFabricDescription:
        ProvisionFabricDescription, callback: ServiceCallback<void>)
      parameters:
        - id: provisionFabricDescription
          type:
            - '@azure/servicefabric.ProvisionFabricDescription'
          description: Describes the parameters for provisioning a cluster.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.provisionCluster_2'
    name: >-
      provisionCluster(ProvisionFabricDescription,
      ServiceFabricClientProvisionClusterOptionalParams, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function provisionCluster(provisionFabricDescription:
        ProvisionFabricDescription, options:
        ServiceFabricClientProvisionClusterOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: provisionFabricDescription
          type:
            - '@azure/servicefabric.ProvisionFabricDescription'
          description: Describes the parameters for provisioning a cluster.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientProvisionClusterOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.putProperty'
    name: >-
      putProperty(string, PropertyDescription,
      Models.ServiceFabricClientPutPropertyOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates or updates the specified Service Fabric property under a given
      name.
    syntax:
      content: >-
        function putProperty(nameId: string, propertyDescription:
        PropertyDescription, options?:
        Models.ServiceFabricClientPutPropertyOptionalParams)
      parameters:
        - id: nameId
          type:
            - string
          description: 'The Service Fabric name, without the ''fabric:'' URI scheme.'
        - id: propertyDescription
          type:
            - '@azure/servicefabric.PropertyDescription'
          description: Describes the Service Fabric property to be created.
        - id: options
          type:
            - Models.ServiceFabricClientPutPropertyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.putProperty_1'
    name: 'putProperty(string, PropertyDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function putProperty(nameId: string, propertyDescription:
        PropertyDescription, callback: ServiceCallback<void>)
      parameters:
        - id: nameId
          type:
            - string
          description: 'The Service Fabric name, without the ''fabric:'' URI scheme.'
        - id: propertyDescription
          type:
            - '@azure/servicefabric.PropertyDescription'
          description: Describes the Service Fabric property to be created.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.putProperty_2'
    name: >-
      putProperty(string, PropertyDescription,
      ServiceFabricClientPutPropertyOptionalParams, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function putProperty(nameId: string, propertyDescription:
        PropertyDescription, options:
        ServiceFabricClientPutPropertyOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: nameId
          type:
            - string
          description: 'The Service Fabric name, without the ''fabric:'' URI scheme.'
        - id: propertyDescription
          type:
            - '@azure/servicefabric.PropertyDescription'
          description: Describes the Service Fabric property to be created.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientPutPropertyOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.recoverAllPartitions'
    name: >-
      recoverAllPartitions(Models.ServiceFabricClientRecoverAllPartitionsOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This operation should only be performed if it is known that the replicas
      that are down cannot be

      recovered. Incorrect use of this API can cause potential data loss.
    syntax:
      content: >-
        function recoverAllPartitions(options?:
        Models.ServiceFabricClientRecoverAllPartitionsOptionalParams)
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientRecoverAllPartitionsOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.recoverAllPartitions_1'
    name: recoverAllPartitions(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function recoverAllPartitions(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.recoverAllPartitions_2'
    name: >-
      recoverAllPartitions(ServiceFabricClientRecoverAllPartitionsOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function recoverAllPartitions(options:
        ServiceFabricClientRecoverAllPartitionsOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientRecoverAllPartitionsOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.recoverPartition'
    name: >-
      recoverPartition(string,
      Models.ServiceFabricClientRecoverPartitionOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This operation should only be performed if it is known that the replicas
      that are down cannot be

      recovered. Incorrect use of this API can cause potential data loss.
    syntax:
      content: >-
        function recoverPartition(partitionId: string, options?:
        Models.ServiceFabricClientRecoverPartitionOptionalParams)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - Models.ServiceFabricClientRecoverPartitionOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.recoverPartition_1'
    name: 'recoverPartition(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function recoverPartition(partitionId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.recoverPartition_2'
    name: >-
      recoverPartition(string,
      ServiceFabricClientRecoverPartitionOptionalParams, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function recoverPartition(partitionId: string, options:
        ServiceFabricClientRecoverPartitionOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientRecoverPartitionOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.recoverServicePartitions'
    name: >-
      recoverServicePartitions(string,
      Models.ServiceFabricClientRecoverServicePartitionsOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Indicates to the Service Fabric cluster that it should attempt to recover
      the specified service

      that is currently stuck in quorum loss. This operation should only be
      performed if it is known

      that the replicas that are down cannot be recovered. Incorrect use of this
      API can cause

      potential data loss.
    syntax:
      content: >-
        function recoverServicePartitions(serviceId: string, options?:
        Models.ServiceFabricClientRecoverServicePartitionsOptionalParams)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type:
            - Models.ServiceFabricClientRecoverServicePartitionsOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.recoverServicePartitions_1'
    name: 'recoverServicePartitions(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function recoverServicePartitions(serviceId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.recoverServicePartitions_2'
    name: >-
      recoverServicePartitions(string,
      ServiceFabricClientRecoverServicePartitionsOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function recoverServicePartitions(serviceId: string, options:
        ServiceFabricClientRecoverServicePartitionsOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientRecoverServicePartitionsOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.recoverSystemPartitions'
    name: >-
      recoverSystemPartitions(Models.ServiceFabricClientRecoverSystemPartitionsOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Indicates to the Service Fabric cluster that it should attempt to recover
      the system services

      that are currently stuck in quorum loss. This operation should only be
      performed if it is known

      that the replicas that are down cannot be recovered. Incorrect use of this
      API can cause

      potential data loss.
    syntax:
      content: >-
        function recoverSystemPartitions(options?:
        Models.ServiceFabricClientRecoverSystemPartitionsOptionalParams)
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientRecoverSystemPartitionsOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.recoverSystemPartitions_1'
    name: recoverSystemPartitions(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function recoverSystemPartitions(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.recoverSystemPartitions_2'
    name: >-
      recoverSystemPartitions(ServiceFabricClientRecoverSystemPartitionsOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function recoverSystemPartitions(options:
        ServiceFabricClientRecoverSystemPartitionsOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientRecoverSystemPartitionsOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.removeComposeDeployment'
    name: >-
      removeComposeDeployment(string,
      Models.ServiceFabricClientRemoveComposeDeploymentOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes an existing Service Fabric compose deployment.
    syntax:
      content: >-
        function removeComposeDeployment(deploymentName: string, options?:
        Models.ServiceFabricClientRemoveComposeDeploymentOptionalParams)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The identity of the deployment.
        - id: options
          type:
            - Models.ServiceFabricClientRemoveComposeDeploymentOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.removeComposeDeployment_1'
    name: 'removeComposeDeployment(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function removeComposeDeployment(deploymentName: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The identity of the deployment.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.removeComposeDeployment_2'
    name: >-
      removeComposeDeployment(string,
      ServiceFabricClientRemoveComposeDeploymentOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function removeComposeDeployment(deploymentName: string, options:
        ServiceFabricClientRemoveComposeDeploymentOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The identity of the deployment.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientRemoveComposeDeploymentOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.removeConfigurationOverrides'
    name: >-
      removeConfigurationOverrides(string,
      Models.ServiceFabricClientRemoveConfigurationOverridesOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This api allows removing all existing configuration overrides on specified
      node.
    syntax:
      content: >-
        function removeConfigurationOverrides(nodeName: string, options?:
        Models.ServiceFabricClientRemoveConfigurationOverridesOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientRemoveConfigurationOverridesOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.removeConfigurationOverrides_1'
    name: 'removeConfigurationOverrides(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function removeConfigurationOverrides(nodeName: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.removeConfigurationOverrides_2'
    name: >-
      removeConfigurationOverrides(string,
      ServiceFabricClientRemoveConfigurationOverridesOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function removeConfigurationOverrides(nodeName: string, options:
        ServiceFabricClientRemoveConfigurationOverridesOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientRemoveConfigurationOverridesOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.removeNodeState'
    name: >-
      removeNodeState(string,
      Models.ServiceFabricClientRemoveNodeStateOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This implies that it is not possible to recover the persisted state of
      that node. This generally

      happens if a hard disk has been wiped clean, or if a hard disk crashes.
      The node has to be down

      for this operation to be successful. This operation lets Service Fabric
      know that the replicas

      on that node no longer exist, and that Service Fabric should stop waiting
      for those replicas to

      come back up. Do not run this cmdlet if the state on the node has not been
      removed and the node

      can come back up with its state intact. Starting from Service Fabric 6.5,
      in order to use this

      API for seed nodes, please change the seed nodes to regular (non-seed)
      nodes and then invoke

      this API to remove the node state. If the cluster is running on Azure,
      after the seed node goes

      down, Service Fabric will try to change it to a non-seed node
      automatically. To make this

      happen, make sure the number of non-seed nodes in the primary node type is
      no less than the

      number of Down seed nodes. If necessary, add more nodes to the primary
      node type to achieve

      this. For standalone cluster, if the Down seed node is not expected to
      come back up with its

      state intact, please remove the node from the cluster, see

      https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-windows-server-add-remove-nodes
    syntax:
      content: >-
        function removeNodeState(nodeName: string, options?:
        Models.ServiceFabricClientRemoveNodeStateOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: options
          type:
            - Models.ServiceFabricClientRemoveNodeStateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.removeNodeState_1'
    name: 'removeNodeState(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function removeNodeState(nodeName: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.removeNodeState_2'
    name: >-
      removeNodeState(string, ServiceFabricClientRemoveNodeStateOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function removeNodeState(nodeName: string, options:
        ServiceFabricClientRemoveNodeStateOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientRemoveNodeStateOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.removeReplica'
    name: >-
      removeReplica(string, string, string,
      Models.ServiceFabricClientRemoveReplicaOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This API simulates a Service Fabric replica failure by removing a replica
      from a Service Fabric

      cluster. The removal closes the replica, transitions the replica to the
      role None, and then

      removes all of the state information of the replica from the cluster. This
      API tests the replica

      state removal path, and simulates the report fault permanent path through
      client APIs. Warning -

      There are no safety checks performed when this API is used. Incorrect use
      of this API can lead

      to data loss for stateful services. In addition, the forceRemove flag
      impacts all other replicas

      hosted in the same process.
    syntax:
      content: >-
        function removeReplica(nodeName: string, partitionId: string, replicaId:
        string, options?: Models.ServiceFabricClientRemoveReplicaOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: options
          type:
            - Models.ServiceFabricClientRemoveReplicaOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.removeReplica_1'
    name: 'removeReplica(string, string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function removeReplica(nodeName: string, partitionId: string, replicaId:
        string, callback: ServiceCallback<void>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.removeReplica_2'
    name: >-
      removeReplica(string, string, string,
      ServiceFabricClientRemoveReplicaOptionalParams, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function removeReplica(nodeName: string, partitionId: string, replicaId:
        string, options: ServiceFabricClientRemoveReplicaOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientRemoveReplicaOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportApplicationHealth'
    name: >-
      reportApplicationHealth(string, HealthInformation,
      Models.ServiceFabricClientReportApplicationHealthOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Reports health state of the specified Service Fabric application. The
      report must contain the

      information about the source of the health report and property on which it
      is reported.

      The report is sent to a Service Fabric gateway Application, which forwards
      to the health store.

      The report may be accepted by the gateway, but rejected by the health
      store after extra

      validation.

      For example, the health store may reject the report because of an invalid
      parameter, like a

      stale sequence number.

      To see whether the report was applied in the health store, get application
      health and check that

      the report appears in the HealthEvents section.
    syntax:
      content: >-
        function reportApplicationHealth(applicationId: string,
        healthInformation: HealthInformation, options?:
        Models.ServiceFabricClientReportApplicationHealthOptionalParams)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: options
          type:
            - Models.ServiceFabricClientReportApplicationHealthOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportApplicationHealth_1'
    name: 'reportApplicationHealth(string, HealthInformation, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function reportApplicationHealth(applicationId: string,
        healthInformation: HealthInformation, callback: ServiceCallback<void>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportApplicationHealth_2'
    name: >-
      reportApplicationHealth(string, HealthInformation,
      ServiceFabricClientReportApplicationHealthOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function reportApplicationHealth(applicationId: string,
        healthInformation: HealthInformation, options:
        ServiceFabricClientReportApplicationHealthOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientReportApplicationHealthOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportClusterHealth'
    name: >-
      reportClusterHealth(HealthInformation,
      Models.ServiceFabricClientReportClusterHealthOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sends a health report on a Service Fabric cluster. The report must contain
      the information about

      the source of the health report and property on which it is reported.

      The report is sent to a Service Fabric gateway node, which forwards to the
      health store.

      The report may be accepted by the gateway, but rejected by the health
      store after extra

      validation.

      For example, the health store may reject the report because of an invalid
      parameter, like a

      stale sequence number.

      To see whether the report was applied in the health store, run
      GetClusterHealth and check that

      the report appears in the HealthEvents section.
    syntax:
      content: >-
        function reportClusterHealth(healthInformation: HealthInformation,
        options?: Models.ServiceFabricClientReportClusterHealthOptionalParams)
      parameters:
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: options
          type:
            - Models.ServiceFabricClientReportClusterHealthOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportClusterHealth_1'
    name: 'reportClusterHealth(HealthInformation, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function reportClusterHealth(healthInformation: HealthInformation,
        callback: ServiceCallback<void>)
      parameters:
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportClusterHealth_2'
    name: >-
      reportClusterHealth(HealthInformation,
      ServiceFabricClientReportClusterHealthOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function reportClusterHealth(healthInformation: HealthInformation,
        options: ServiceFabricClientReportClusterHealthOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientReportClusterHealthOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportDeployedApplicationHealth'
    name: >-
      reportDeployedApplicationHealth(string, string, HealthInformation,
      Models.ServiceFabricClientReportDeployedApplicationHealthOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Reports health state of the application deployed on a Service Fabric node.
      The report must

      contain the information about the source of the health report and property
      on which it is

      reported.

      The report is sent to a Service Fabric gateway Service, which forwards to
      the health store.

      The report may be accepted by the gateway, but rejected by the health
      store after extra

      validation.

      For example, the health store may reject the report because of an invalid
      parameter, like a

      stale sequence number.

      To see whether the report was applied in the health store, get deployed
      application health and

      check that the report appears in the HealthEvents section.
    syntax:
      content: >-
        function reportDeployedApplicationHealth(nodeName: string,
        applicationId: string, healthInformation: HealthInformation, options?:
        Models.ServiceFabricClientReportDeployedApplicationHealthOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientReportDeployedApplicationHealthOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportDeployedApplicationHealth_1'
    name: >-
      reportDeployedApplicationHealth(string, string, HealthInformation,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function reportDeployedApplicationHealth(nodeName: string,
        applicationId: string, healthInformation: HealthInformation, callback:
        ServiceCallback<void>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportDeployedApplicationHealth_2'
    name: >-
      reportDeployedApplicationHealth(string, string, HealthInformation,
      ServiceFabricClientReportDeployedApplicationHealthOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function reportDeployedApplicationHealth(nodeName: string,
        applicationId: string, healthInformation: HealthInformation, options:
        ServiceFabricClientReportDeployedApplicationHealthOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientReportDeployedApplicationHealthOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.reportDeployedServicePackageHealth
    name: >-
      reportDeployedServicePackageHealth(string, string, string,
      HealthInformation,
      Models.ServiceFabricClientReportDeployedServicePackageHealthOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Reports health state of the service package of the application deployed on
      a Service Fabric

      node. The report must contain the information about the source of the
      health report and property

      on which it is reported.

      The report is sent to a Service Fabric gateway Service, which forwards to
      the health store.

      The report may be accepted by the gateway, but rejected by the health
      store after extra

      validation.

      For example, the health store may reject the report because of an invalid
      parameter, like a

      stale sequence number.

      To see whether the report was applied in the health store, get deployed
      service package health

      and check that the report appears in the HealthEvents section.
    syntax:
      content: >-
        function reportDeployedServicePackageHealth(nodeName: string,
        applicationId: string, servicePackageName: string, healthInformation:
        HealthInformation, options?:
        Models.ServiceFabricClientReportDeployedServicePackageHealthOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: servicePackageName
          type:
            - string
          description: The name of the service package.
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientReportDeployedServicePackageHealthOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.reportDeployedServicePackageHealth_1
    name: >-
      reportDeployedServicePackageHealth(string, string, string,
      HealthInformation, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function reportDeployedServicePackageHealth(nodeName: string,
        applicationId: string, servicePackageName: string, healthInformation:
        HealthInformation, callback: ServiceCallback<void>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: servicePackageName
          type:
            - string
          description: The name of the service package.
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.reportDeployedServicePackageHealth_2
    name: >-
      reportDeployedServicePackageHealth(string, string, string,
      HealthInformation,
      ServiceFabricClientReportDeployedServicePackageHealthOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function reportDeployedServicePackageHealth(nodeName: string,
        applicationId: string, servicePackageName: string, healthInformation:
        HealthInformation, options:
        ServiceFabricClientReportDeployedServicePackageHealthOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: servicePackageName
          type:
            - string
          description: The name of the service package.
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientReportDeployedServicePackageHealthOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportNodeHealth'
    name: >-
      reportNodeHealth(string, HealthInformation,
      Models.ServiceFabricClientReportNodeHealthOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Reports health state of the specified Service Fabric node. The report must
      contain the

      information about the source of the health report and property on which it
      is reported.

      The report is sent to a Service Fabric gateway node, which forwards to the
      health store.

      The report may be accepted by the gateway, but rejected by the health
      store after extra

      validation.

      For example, the health store may reject the report because of an invalid
      parameter, like a

      stale sequence number.

      To see whether the report was applied in the health store, run
      GetNodeHealth and check that the

      report appears in the HealthEvents section.
    syntax:
      content: >-
        function reportNodeHealth(nodeName: string, healthInformation:
        HealthInformation, options?:
        Models.ServiceFabricClientReportNodeHealthOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: options
          type:
            - Models.ServiceFabricClientReportNodeHealthOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportNodeHealth_1'
    name: 'reportNodeHealth(string, HealthInformation, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function reportNodeHealth(nodeName: string, healthInformation:
        HealthInformation, callback: ServiceCallback<void>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportNodeHealth_2'
    name: >-
      reportNodeHealth(string, HealthInformation,
      ServiceFabricClientReportNodeHealthOptionalParams, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function reportNodeHealth(nodeName: string, healthInformation:
        HealthInformation, options:
        ServiceFabricClientReportNodeHealthOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientReportNodeHealthOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportPartitionHealth'
    name: >-
      reportPartitionHealth(string, HealthInformation,
      Models.ServiceFabricClientReportPartitionHealthOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Reports health state of the specified Service Fabric partition. The report
      must contain the

      information about the source of the health report and property on which it
      is reported.

      The report is sent to a Service Fabric gateway Partition, which forwards
      to the health store.

      The report may be accepted by the gateway, but rejected by the health
      store after extra

      validation.

      For example, the health store may reject the report because of an invalid
      parameter, like a

      stale sequence number.

      To see whether the report was applied in the health store, run
      GetPartitionHealth and check that

      the report appears in the HealthEvents section.
    syntax:
      content: >-
        function reportPartitionHealth(partitionId: string, healthInformation:
        HealthInformation, options?:
        Models.ServiceFabricClientReportPartitionHealthOptionalParams)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: options
          type:
            - Models.ServiceFabricClientReportPartitionHealthOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportPartitionHealth_1'
    name: 'reportPartitionHealth(string, HealthInformation, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function reportPartitionHealth(partitionId: string, healthInformation:
        HealthInformation, callback: ServiceCallback<void>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportPartitionHealth_2'
    name: >-
      reportPartitionHealth(string, HealthInformation,
      ServiceFabricClientReportPartitionHealthOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function reportPartitionHealth(partitionId: string, healthInformation:
        HealthInformation, options:
        ServiceFabricClientReportPartitionHealthOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientReportPartitionHealthOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportReplicaHealth'
    name: >-
      reportReplicaHealth(string, string, Models.ReplicaHealthReportServiceKind,
      HealthInformation,
      Models.ServiceFabricClientReportReplicaHealthOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Reports health state of the specified Service Fabric replica. The report
      must contain the

      information about the source of the health report and property on which it
      is reported.

      The report is sent to a Service Fabric gateway Replica, which forwards to
      the health store.

      The report may be accepted by the gateway, but rejected by the health
      store after extra

      validation.

      For example, the health store may reject the report because of an invalid
      parameter, like a

      stale sequence number.

      To see whether the report was applied in the health store, run
      GetReplicaHealth and check that

      the report appears in the HealthEvents section.
    syntax:
      content: >-
        function reportReplicaHealth(partitionId: string, replicaId: string,
        serviceKind: Models.ReplicaHealthReportServiceKind, healthInformation:
        HealthInformation, options?:
        Models.ServiceFabricClientReportReplicaHealthOptionalParams)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: serviceKind
          type:
            - Models.ReplicaHealthReportServiceKind
          description: >-
            The kind of service replica (Stateless or Stateful) for which the
            health is

            being reported. Following are the possible values. Possible values
            include: 'Stateless',

            'Stateful'
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: options
          type:
            - Models.ServiceFabricClientReportReplicaHealthOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportReplicaHealth_1'
    name: >-
      reportReplicaHealth(string, string, Models.ReplicaHealthReportServiceKind,
      HealthInformation, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function reportReplicaHealth(partitionId: string, replicaId: string,
        serviceKind: Models.ReplicaHealthReportServiceKind, healthInformation:
        HealthInformation, callback: ServiceCallback<void>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: serviceKind
          type:
            - Models.ReplicaHealthReportServiceKind
          description: >-
            The kind of service replica (Stateless or Stateful) for which the
            health is

            being reported. Following are the possible values. Possible values
            include: 'Stateless',

            'Stateful'
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportReplicaHealth_2'
    name: >-
      reportReplicaHealth(string, string, Models.ReplicaHealthReportServiceKind,
      HealthInformation, ServiceFabricClientReportReplicaHealthOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function reportReplicaHealth(partitionId: string, replicaId: string,
        serviceKind: Models.ReplicaHealthReportServiceKind, healthInformation:
        HealthInformation, options:
        ServiceFabricClientReportReplicaHealthOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: serviceKind
          type:
            - Models.ReplicaHealthReportServiceKind
          description: >-
            The kind of service replica (Stateless or Stateful) for which the
            health is

            being reported. Following are the possible values. Possible values
            include: 'Stateless',

            'Stateful'
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientReportReplicaHealthOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportServiceHealth'
    name: >-
      reportServiceHealth(string, HealthInformation,
      Models.ServiceFabricClientReportServiceHealthOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Reports health state of the specified Service Fabric service. The report
      must contain the

      information about the source of the health report and property on which it
      is reported.

      The report is sent to a Service Fabric gateway Service, which forwards to
      the health store.

      The report may be accepted by the gateway, but rejected by the health
      store after extra

      validation.

      For example, the health store may reject the report because of an invalid
      parameter, like a

      stale sequence number.

      To see whether the report was applied in the health store, run
      GetServiceHealth and check that

      the report appears in the HealthEvents section.
    syntax:
      content: >-
        function reportServiceHealth(serviceId: string, healthInformation:
        HealthInformation, options?:
        Models.ServiceFabricClientReportServiceHealthOptionalParams)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: options
          type:
            - Models.ServiceFabricClientReportServiceHealthOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportServiceHealth_1'
    name: 'reportServiceHealth(string, HealthInformation, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function reportServiceHealth(serviceId: string, healthInformation:
        HealthInformation, callback: ServiceCallback<void>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.reportServiceHealth_2'
    name: >-
      reportServiceHealth(string, HealthInformation,
      ServiceFabricClientReportServiceHealthOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function reportServiceHealth(serviceId: string, healthInformation:
        HealthInformation, options:
        ServiceFabricClientReportServiceHealthOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: healthInformation
          type:
            - '@azure/servicefabric.HealthInformation'
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientReportServiceHealthOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resetPartitionLoad'
    name: >-
      resetPartitionLoad(string,
      Models.ServiceFabricClientResetPartitionLoadOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Resets the current load of a Service Fabric partition to the default load
      for the service.
    syntax:
      content: >-
        function resetPartitionLoad(partitionId: string, options?:
        Models.ServiceFabricClientResetPartitionLoadOptionalParams)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - Models.ServiceFabricClientResetPartitionLoadOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resetPartitionLoad_1'
    name: 'resetPartitionLoad(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function resetPartitionLoad(partitionId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resetPartitionLoad_2'
    name: >-
      resetPartitionLoad(string,
      ServiceFabricClientResetPartitionLoadOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function resetPartitionLoad(partitionId: string, options:
        ServiceFabricClientResetPartitionLoadOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientResetPartitionLoadOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resolveService'
    name: >-
      resolveService(string,
      Models.ServiceFabricClientResolveServiceOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Resolve a Service Fabric service partition to get the endpoints of the
      service replicas.
    syntax:
      content: >-
        function resolveService(serviceId: string, options?:
        Models.ServiceFabricClientResolveServiceOptionalParams)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type:
            - Models.ServiceFabricClientResolveServiceOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.ResolveServiceResponse>
        description: Promise<Models.ResolveServiceResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resolveService_1'
    name: 'resolveService(string, ServiceCallback<ResolvedServicePartition>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function resolveService(serviceId: string, callback:
        ServiceCallback<ResolvedServicePartition>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ResolvedServicePartition>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resolveService_2'
    name: >-
      resolveService(string, ServiceFabricClientResolveServiceOptionalParams,
      ServiceCallback<ResolvedServicePartition>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function resolveService(serviceId: string, options:
        ServiceFabricClientResolveServiceOptionalParams, callback:
        ServiceCallback<ResolvedServicePartition>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientResolveServiceOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.ResolvedServicePartition>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.restartDeployedCodePackage'
    name: >-
      restartDeployedCodePackage(string, string,
      RestartDeployedCodePackageDescription,
      Models.ServiceFabricClientRestartDeployedCodePackageOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Restarts a code package deployed on a Service Fabric node in a cluster.
      This aborts the code

      package process, which will restart all the user service replicas hosted
      in that process.
    syntax:
      content: >-
        function restartDeployedCodePackage(nodeName: string, applicationId:
        string, restartDeployedCodePackageDescription:
        RestartDeployedCodePackageDescription, options?:
        Models.ServiceFabricClientRestartDeployedCodePackageOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: restartDeployedCodePackageDescription
          type:
            - '@azure/servicefabric.RestartDeployedCodePackageDescription'
          description: |-
            Describes the deployed code package on Service
            Fabric node to restart.
        - id: options
          type:
            - Models.ServiceFabricClientRestartDeployedCodePackageOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.restartDeployedCodePackage_1'
    name: >-
      restartDeployedCodePackage(string, string,
      RestartDeployedCodePackageDescription, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function restartDeployedCodePackage(nodeName: string, applicationId:
        string, restartDeployedCodePackageDescription:
        RestartDeployedCodePackageDescription, callback: ServiceCallback<void>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: restartDeployedCodePackageDescription
          type:
            - '@azure/servicefabric.RestartDeployedCodePackageDescription'
          description: |-
            Describes the deployed code package on Service
            Fabric node to restart.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.restartDeployedCodePackage_2'
    name: >-
      restartDeployedCodePackage(string, string,
      RestartDeployedCodePackageDescription,
      ServiceFabricClientRestartDeployedCodePackageOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function restartDeployedCodePackage(nodeName: string, applicationId:
        string, restartDeployedCodePackageDescription:
        RestartDeployedCodePackageDescription, options:
        ServiceFabricClientRestartDeployedCodePackageOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: restartDeployedCodePackageDescription
          type:
            - '@azure/servicefabric.RestartDeployedCodePackageDescription'
          description: |-
            Describes the deployed code package on Service
            Fabric node to restart.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientRestartDeployedCodePackageOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.restartNode'
    name: >-
      restartNode(string, RestartNodeDescription,
      Models.ServiceFabricClientRestartNodeOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Restarts a Service Fabric cluster node that is already started.
    syntax:
      content: >-
        function restartNode(nodeName: string, restartNodeDescription:
        RestartNodeDescription, options?:
        Models.ServiceFabricClientRestartNodeOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: restartNodeDescription
          type:
            - '@azure/servicefabric.RestartNodeDescription'
          description: |-
            The instance of the node to be restarted and a flag indicating the
            need to take dump of the fabric process.
        - id: options
          type:
            - Models.ServiceFabricClientRestartNodeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.restartNode_1'
    name: 'restartNode(string, RestartNodeDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function restartNode(nodeName: string, restartNodeDescription:
        RestartNodeDescription, callback: ServiceCallback<void>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: restartNodeDescription
          type:
            - '@azure/servicefabric.RestartNodeDescription'
          description: |-
            The instance of the node to be restarted and a flag indicating the
            need to take dump of the fabric process.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.restartNode_2'
    name: >-
      restartNode(string, RestartNodeDescription,
      ServiceFabricClientRestartNodeOptionalParams, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function restartNode(nodeName: string, restartNodeDescription:
        RestartNodeDescription, options:
        ServiceFabricClientRestartNodeOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: restartNodeDescription
          type:
            - '@azure/servicefabric.RestartNodeDescription'
          description: |-
            The instance of the node to be restarted and a flag indicating the
            need to take dump of the fabric process.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientRestartNodeOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.restartReplica'
    name: >-
      restartReplica(string, string, string,
      Models.ServiceFabricClientRestartReplicaOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Restarts a service replica of a persisted service running on a node.
      Warning - There are no

      safety checks performed when this API is used. Incorrect use of this API
      can lead to

      availability loss for stateful services.
    syntax:
      content: >-
        function restartReplica(nodeName: string, partitionId: string,
        replicaId: string, options?:
        Models.ServiceFabricClientRestartReplicaOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: options
          type:
            - Models.ServiceFabricClientRestartReplicaOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.restartReplica_1'
    name: 'restartReplica(string, string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function restartReplica(nodeName: string, partitionId: string,
        replicaId: string, callback: ServiceCallback<void>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.restartReplica_2'
    name: >-
      restartReplica(string, string, string,
      ServiceFabricClientRestartReplicaOptionalParams, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function restartReplica(nodeName: string, partitionId: string,
        replicaId: string, options:
        ServiceFabricClientRestartReplicaOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientRestartReplicaOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.restorePartition'
    name: >-
      restorePartition(string, RestorePartitionDescription,
      Models.ServiceFabricClientRestorePartitionOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Restores the state of a of the stateful persisted partition using the
      specified backup point. In

      case the partition is already being periodically backed up, then by
      default the backup point is

      looked for in the storage specified in backup policy. One can also
      override the same by

      specifying the backup storage details as part of the restore partition
      description in body. Once

      the restore is initiated, its progress can be tracked using the
      GetRestoreProgress operation.

      In case, the operation times out, specify a greater restore timeout value
      in the query

      parameter.
    syntax:
      content: >-
        function restorePartition(partitionId: string,
        restorePartitionDescription: RestorePartitionDescription, options?:
        Models.ServiceFabricClientRestorePartitionOptionalParams)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: restorePartitionDescription
          type:
            - '@azure/servicefabric.RestorePartitionDescription'
          description: Describes the parameters to restore the partition.
        - id: options
          type:
            - Models.ServiceFabricClientRestorePartitionOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.restorePartition_1'
    name: >-
      restorePartition(string, RestorePartitionDescription,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function restorePartition(partitionId: string,
        restorePartitionDescription: RestorePartitionDescription, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: restorePartitionDescription
          type:
            - '@azure/servicefabric.RestorePartitionDescription'
          description: Describes the parameters to restore the partition.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.restorePartition_2'
    name: >-
      restorePartition(string, RestorePartitionDescription,
      ServiceFabricClientRestorePartitionOptionalParams, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function restorePartition(partitionId: string,
        restorePartitionDescription: RestorePartitionDescription, options:
        ServiceFabricClientRestorePartitionOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: restorePartitionDescription
          type:
            - '@azure/servicefabric.RestorePartitionDescription'
          description: Describes the parameters to restore the partition.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientRestorePartitionOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resumeApplicationBackup'
    name: >-
      resumeApplicationBackup(string,
      Models.ServiceFabricClientResumeApplicationBackupOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The previously suspended Service Fabric application resumes taking
      periodic backup as per the

      backup policy currently configured for the same.
    syntax:
      content: >-
        function resumeApplicationBackup(applicationId: string, options?:
        Models.ServiceFabricClientResumeApplicationBackupOptionalParams)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - Models.ServiceFabricClientResumeApplicationBackupOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resumeApplicationBackup_1'
    name: 'resumeApplicationBackup(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function resumeApplicationBackup(applicationId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resumeApplicationBackup_2'
    name: >-
      resumeApplicationBackup(string,
      ServiceFabricClientResumeApplicationBackupOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function resumeApplicationBackup(applicationId: string, options:
        ServiceFabricClientResumeApplicationBackupOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientResumeApplicationBackupOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resumeApplicationUpgrade'
    name: >-
      resumeApplicationUpgrade(string, ResumeApplicationUpgradeDescription,
      Models.ServiceFabricClientResumeApplicationUpgradeOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Resumes an unmonitored manual Service Fabric application upgrade. Service
      Fabric upgrades one

      upgrade domain at a time. For unmonitored manual upgrades, after Service
      Fabric finishes an

      upgrade domain, it waits for you to call this API before proceeding to the
      next upgrade domain.
    syntax:
      content: >-
        function resumeApplicationUpgrade(applicationId: string,
        resumeApplicationUpgradeDescription:
        ResumeApplicationUpgradeDescription, options?:
        Models.ServiceFabricClientResumeApplicationUpgradeOptionalParams)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: resumeApplicationUpgradeDescription
          type:
            - '@azure/servicefabric.ResumeApplicationUpgradeDescription'
          description: |-
            Describes the parameters for resuming an application
            upgrade.
        - id: options
          type:
            - Models.ServiceFabricClientResumeApplicationUpgradeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resumeApplicationUpgrade_1'
    name: >-
      resumeApplicationUpgrade(string, ResumeApplicationUpgradeDescription,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function resumeApplicationUpgrade(applicationId: string,
        resumeApplicationUpgradeDescription:
        ResumeApplicationUpgradeDescription, callback: ServiceCallback<void>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: resumeApplicationUpgradeDescription
          type:
            - '@azure/servicefabric.ResumeApplicationUpgradeDescription'
          description: |-
            Describes the parameters for resuming an application
            upgrade.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resumeApplicationUpgrade_2'
    name: >-
      resumeApplicationUpgrade(string, ResumeApplicationUpgradeDescription,
      ServiceFabricClientResumeApplicationUpgradeOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function resumeApplicationUpgrade(applicationId: string,
        resumeApplicationUpgradeDescription:
        ResumeApplicationUpgradeDescription, options:
        ServiceFabricClientResumeApplicationUpgradeOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: resumeApplicationUpgradeDescription
          type:
            - '@azure/servicefabric.ResumeApplicationUpgradeDescription'
          description: |-
            Describes the parameters for resuming an application
            upgrade.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientResumeApplicationUpgradeOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resumeClusterUpgrade'
    name: >-
      resumeClusterUpgrade(ResumeClusterUpgradeDescription,
      Models.ServiceFabricClientResumeClusterUpgradeOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Make the cluster code or configuration upgrade move on to the next upgrade
      domain if

      appropriate.
    syntax:
      content: >-
        function resumeClusterUpgrade(resumeClusterUpgradeDescription:
        ResumeClusterUpgradeDescription, options?:
        Models.ServiceFabricClientResumeClusterUpgradeOptionalParams)
      parameters:
        - id: resumeClusterUpgradeDescription
          type:
            - '@azure/servicefabric.ResumeClusterUpgradeDescription'
          description: Describes the parameters for resuming a cluster upgrade.
        - id: options
          type:
            - Models.ServiceFabricClientResumeClusterUpgradeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resumeClusterUpgrade_1'
    name: >-
      resumeClusterUpgrade(ResumeClusterUpgradeDescription,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function resumeClusterUpgrade(resumeClusterUpgradeDescription:
        ResumeClusterUpgradeDescription, callback: ServiceCallback<void>)
      parameters:
        - id: resumeClusterUpgradeDescription
          type:
            - '@azure/servicefabric.ResumeClusterUpgradeDescription'
          description: Describes the parameters for resuming a cluster upgrade.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resumeClusterUpgrade_2'
    name: >-
      resumeClusterUpgrade(ResumeClusterUpgradeDescription,
      ServiceFabricClientResumeClusterUpgradeOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function resumeClusterUpgrade(resumeClusterUpgradeDescription:
        ResumeClusterUpgradeDescription, options:
        ServiceFabricClientResumeClusterUpgradeOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: resumeClusterUpgradeDescription
          type:
            - '@azure/servicefabric.ResumeClusterUpgradeDescription'
          description: Describes the parameters for resuming a cluster upgrade.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientResumeClusterUpgradeOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resumePartitionBackup'
    name: >-
      resumePartitionBackup(string,
      Models.ServiceFabricClientResumePartitionBackupOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The previously suspended partition resumes taking periodic backup as per
      the backup policy

      currently configured for the same.
    syntax:
      content: >-
        function resumePartitionBackup(partitionId: string, options?:
        Models.ServiceFabricClientResumePartitionBackupOptionalParams)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - Models.ServiceFabricClientResumePartitionBackupOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resumePartitionBackup_1'
    name: 'resumePartitionBackup(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function resumePartitionBackup(partitionId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resumePartitionBackup_2'
    name: >-
      resumePartitionBackup(string,
      ServiceFabricClientResumePartitionBackupOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function resumePartitionBackup(partitionId: string, options:
        ServiceFabricClientResumePartitionBackupOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientResumePartitionBackupOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resumeServiceBackup'
    name: >-
      resumeServiceBackup(string,
      Models.ServiceFabricClientResumeServiceBackupOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The previously suspended Service Fabric service resumes taking periodic
      backup as per the backup

      policy currently configured for the same.
    syntax:
      content: >-
        function resumeServiceBackup(serviceId: string, options?:
        Models.ServiceFabricClientResumeServiceBackupOptionalParams)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type:
            - Models.ServiceFabricClientResumeServiceBackupOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resumeServiceBackup_1'
    name: 'resumeServiceBackup(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function resumeServiceBackup(serviceId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.resumeServiceBackup_2'
    name: >-
      resumeServiceBackup(string,
      ServiceFabricClientResumeServiceBackupOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function resumeServiceBackup(serviceId: string, options:
        ServiceFabricClientResumeServiceBackupOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientResumeServiceBackupOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.rollbackApplicationUpgrade'
    name: >-
      rollbackApplicationUpgrade(string,
      Models.ServiceFabricClientRollbackApplicationUpgradeOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Starts rolling back the current application upgrade to the previous
      version. This API can only

      be used to roll back the current in-progress upgrade that is rolling
      forward to new version. If

      the application is not currently being upgraded use
      StartApplicationUpgrade API to upgrade it to

      desired version, including rolling back to a previous version.
    syntax:
      content: >-
        function rollbackApplicationUpgrade(applicationId: string, options?:
        Models.ServiceFabricClientRollbackApplicationUpgradeOptionalParams)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - Models.ServiceFabricClientRollbackApplicationUpgradeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.rollbackApplicationUpgrade_1'
    name: 'rollbackApplicationUpgrade(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function rollbackApplicationUpgrade(applicationId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.rollbackApplicationUpgrade_2'
    name: >-
      rollbackApplicationUpgrade(string,
      ServiceFabricClientRollbackApplicationUpgradeOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function rollbackApplicationUpgrade(applicationId: string, options:
        ServiceFabricClientRollbackApplicationUpgradeOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientRollbackApplicationUpgradeOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.rollbackClusterUpgrade'
    name: >-
      rollbackClusterUpgrade(Models.ServiceFabricClientRollbackClusterUpgradeOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Roll back the code or configuration upgrade of a Service Fabric cluster.
    syntax:
      content: >-
        function rollbackClusterUpgrade(options?:
        Models.ServiceFabricClientRollbackClusterUpgradeOptionalParams)
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientRollbackClusterUpgradeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.rollbackClusterUpgrade_1'
    name: rollbackClusterUpgrade(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function rollbackClusterUpgrade(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.rollbackClusterUpgrade_2'
    name: >-
      rollbackClusterUpgrade(ServiceFabricClientRollbackClusterUpgradeOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function rollbackClusterUpgrade(options:
        ServiceFabricClientRollbackClusterUpgradeOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientRollbackClusterUpgradeOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.sendOperationRequest'
    name: >-
      sendOperationRequest(OperationArguments, OperationSpec,
      ServiceCallback<any>)
    children: []
    type: method
    langs:
      - typeScript
    summary: Send an HTTP request that is populated using the provided OperationSpec.
    syntax:
      content: >-
        function sendOperationRequest(operationArguments: OperationArguments,
        operationSpec: OperationSpec, callback?: ServiceCallback<any>)
      parameters:
        - id: operationArguments
          type:
            - OperationArguments
          description: >-
            The arguments that the HTTP request's templated values will be
            populated from.
        - id: operationSpec
          type:
            - OperationSpec
          description: The OperationSpec to use to populate the httpRequest.
        - id: callback
          type:
            - ServiceCallback<any>
          description: |
            The callback to call when the response is received.
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: ''
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.sendRequest'
    name: sendRequest(RequestPrepareOptions | WebResource)
    children: []
    type: method
    langs:
      - typeScript
    summary: Send the provided httpRequest.
    syntax:
      content: 'function sendRequest(options: RequestPrepareOptions | WebResource)'
      parameters:
        - id: options
          type:
            - RequestPrepareOptions | WebResource
          description: ''
      return:
        type:
          - Promise<HttpOperationResponse>
        description: ''
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.constructor'
    name: ServiceFabricClient(Models.ServiceFabricClientOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Initializes a new instance of the ServiceFabricClient class.
    syntax:
      content: 'new ServiceFabricClient(options?: Models.ServiceFabricClientOptions)'
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientOptions
          description: ''
          optional: true
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.setUpgradeOrchestrationServiceState
    name: >-
      setUpgradeOrchestrationServiceState(UpgradeOrchestrationServiceState,
      Models.ServiceFabricClientSetUpgradeOrchestrationServiceStateOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Update the service state of Service Fabric Upgrade Orchestration Service.
      This API is internally

      used for support purposes.
    syntax:
      content: >-
        function
        setUpgradeOrchestrationServiceState(upgradeOrchestrationServiceState:
        UpgradeOrchestrationServiceState, options?:
        Models.ServiceFabricClientSetUpgradeOrchestrationServiceStateOptionalParams)
      parameters:
        - id: upgradeOrchestrationServiceState
          type:
            - '@azure/servicefabric.UpgradeOrchestrationServiceState'
          description: |-
            Service state of Service Fabric Upgrade Orchestration
            Service.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientSetUpgradeOrchestrationServiceStateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.SetUpgradeOrchestrationServiceStateResponse>
        description: Promise<Models.SetUpgradeOrchestrationServiceStateResponse>
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.setUpgradeOrchestrationServiceState_1
    name: >-
      setUpgradeOrchestrationServiceState(UpgradeOrchestrationServiceState,
      ServiceCallback<UpgradeOrchestrationServiceStateSummary>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function
        setUpgradeOrchestrationServiceState(upgradeOrchestrationServiceState:
        UpgradeOrchestrationServiceState, callback:
        ServiceCallback<UpgradeOrchestrationServiceStateSummary>)
      parameters:
        - id: upgradeOrchestrationServiceState
          type:
            - '@azure/servicefabric.UpgradeOrchestrationServiceState'
          description: |-
            Service state of Service Fabric Upgrade Orchestration
            Service.
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/servicefabric.UpgradeOrchestrationServiceStateSummary>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.setUpgradeOrchestrationServiceState_2
    name: >-
      setUpgradeOrchestrationServiceState(UpgradeOrchestrationServiceState,
      ServiceFabricClientSetUpgradeOrchestrationServiceStateOptionalParams,
      ServiceCallback<UpgradeOrchestrationServiceStateSummary>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function
        setUpgradeOrchestrationServiceState(upgradeOrchestrationServiceState:
        UpgradeOrchestrationServiceState, options:
        ServiceFabricClientSetUpgradeOrchestrationServiceStateOptionalParams,
        callback: ServiceCallback<UpgradeOrchestrationServiceStateSummary>)
      parameters:
        - id: upgradeOrchestrationServiceState
          type:
            - '@azure/servicefabric.UpgradeOrchestrationServiceState'
          description: |-
            Service state of Service Fabric Upgrade Orchestration
            Service.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientSetUpgradeOrchestrationServiceStateOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/servicefabric.UpgradeOrchestrationServiceStateSummary>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startApplicationUpgrade'
    name: >-
      startApplicationUpgrade(string, ApplicationUpgradeDescription,
      Models.ServiceFabricClientStartApplicationUpgradeOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Validates the supplied application upgrade parameters and starts upgrading
      the application if

      the parameters are valid.
    syntax:
      content: >-
        function startApplicationUpgrade(applicationId: string,
        applicationUpgradeDescription: ApplicationUpgradeDescription, options?:
        Models.ServiceFabricClientStartApplicationUpgradeOptionalParams)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: applicationUpgradeDescription
          type:
            - '@azure/servicefabric.ApplicationUpgradeDescription'
          description: Parameters for an application upgrade.
        - id: options
          type:
            - Models.ServiceFabricClientStartApplicationUpgradeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startApplicationUpgrade_1'
    name: >-
      startApplicationUpgrade(string, ApplicationUpgradeDescription,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function startApplicationUpgrade(applicationId: string,
        applicationUpgradeDescription: ApplicationUpgradeDescription, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: applicationUpgradeDescription
          type:
            - '@azure/servicefabric.ApplicationUpgradeDescription'
          description: Parameters for an application upgrade.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startApplicationUpgrade_2'
    name: >-
      startApplicationUpgrade(string, ApplicationUpgradeDescription,
      ServiceFabricClientStartApplicationUpgradeOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function startApplicationUpgrade(applicationId: string,
        applicationUpgradeDescription: ApplicationUpgradeDescription, options:
        ServiceFabricClientStartApplicationUpgradeOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: applicationUpgradeDescription
          type:
            - '@azure/servicefabric.ApplicationUpgradeDescription'
          description: Parameters for an application upgrade.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientStartApplicationUpgradeOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startChaos'
    name: >-
      startChaos(ChaosParameters,
      Models.ServiceFabricClientStartChaosOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      If Chaos is not already running in the cluster, it starts Chaos with the
      passed in Chaos

      parameters.

      If Chaos is already running when this call is made, the call fails with
      the error code

      FABRIC_E_CHAOS_ALREADY_RUNNING.

      Refer to the article [Induce controlled Chaos in Service Fabric

      clusters](https://docs.microsoft.com/azure/service-fabric/service-fabric-controlled-chaos)
      for

      more details.
    syntax:
      content: >-
        function startChaos(chaosParameters: ChaosParameters, options?:
        Models.ServiceFabricClientStartChaosOptionalParams)
      parameters:
        - id: chaosParameters
          type:
            - '@azure/servicefabric.ChaosParameters'
          description: Describes all the parameters to configure a Chaos run.
        - id: options
          type:
            - Models.ServiceFabricClientStartChaosOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startChaos_1'
    name: 'startChaos(ChaosParameters, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function startChaos(chaosParameters: ChaosParameters, callback:
        ServiceCallback<void>)
      parameters:
        - id: chaosParameters
          type:
            - '@azure/servicefabric.ChaosParameters'
          description: Describes all the parameters to configure a Chaos run.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startChaos_2'
    name: >-
      startChaos(ChaosParameters, ServiceFabricClientStartChaosOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function startChaos(chaosParameters: ChaosParameters, options:
        ServiceFabricClientStartChaosOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: chaosParameters
          type:
            - '@azure/servicefabric.ChaosParameters'
          description: Describes all the parameters to configure a Chaos run.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientStartChaosOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startClusterConfigurationUpgrade'
    name: >-
      startClusterConfigurationUpgrade(ClusterConfigurationUpgradeDescription,
      Models.ServiceFabricClientStartClusterConfigurationUpgradeOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Validate the supplied configuration upgrade parameters and start upgrading
      the cluster

      configuration if the parameters are valid.
    syntax:
      content: >-
        function
        startClusterConfigurationUpgrade(clusterConfigurationUpgradeDescription:
        ClusterConfigurationUpgradeDescription, options?:
        Models.ServiceFabricClientStartClusterConfigurationUpgradeOptionalParams)
      parameters:
        - id: clusterConfigurationUpgradeDescription
          type:
            - '@azure/servicefabric.ClusterConfigurationUpgradeDescription'
          description: |-
            Parameters for a standalone cluster configuration
            upgrade.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientStartClusterConfigurationUpgradeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.startClusterConfigurationUpgrade_1
    name: >-
      startClusterConfigurationUpgrade(ClusterConfigurationUpgradeDescription,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function
        startClusterConfigurationUpgrade(clusterConfigurationUpgradeDescription:
        ClusterConfigurationUpgradeDescription, callback: ServiceCallback<void>)
      parameters:
        - id: clusterConfigurationUpgradeDescription
          type:
            - '@azure/servicefabric.ClusterConfigurationUpgradeDescription'
          description: |-
            Parameters for a standalone cluster configuration
            upgrade.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.startClusterConfigurationUpgrade_2
    name: >-
      startClusterConfigurationUpgrade(ClusterConfigurationUpgradeDescription,
      ServiceFabricClientStartClusterConfigurationUpgradeOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function
        startClusterConfigurationUpgrade(clusterConfigurationUpgradeDescription:
        ClusterConfigurationUpgradeDescription, options:
        ServiceFabricClientStartClusterConfigurationUpgradeOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: clusterConfigurationUpgradeDescription
          type:
            - '@azure/servicefabric.ClusterConfigurationUpgradeDescription'
          description: |-
            Parameters for a standalone cluster configuration
            upgrade.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientStartClusterConfigurationUpgradeOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startClusterUpgrade'
    name: >-
      startClusterUpgrade(StartClusterUpgradeDescription,
      Models.ServiceFabricClientStartClusterUpgradeOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Validate the supplied upgrade parameters and start upgrading the code or
      configuration version

      of a Service Fabric cluster if the parameters are valid.
    syntax:
      content: >-
        function startClusterUpgrade(startClusterUpgradeDescription:
        StartClusterUpgradeDescription, options?:
        Models.ServiceFabricClientStartClusterUpgradeOptionalParams)
      parameters:
        - id: startClusterUpgradeDescription
          type:
            - '@azure/servicefabric.StartClusterUpgradeDescription'
          description: Describes the parameters for starting a cluster upgrade.
        - id: options
          type:
            - Models.ServiceFabricClientStartClusterUpgradeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startClusterUpgrade_1'
    name: 'startClusterUpgrade(StartClusterUpgradeDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function startClusterUpgrade(startClusterUpgradeDescription:
        StartClusterUpgradeDescription, callback: ServiceCallback<void>)
      parameters:
        - id: startClusterUpgradeDescription
          type:
            - '@azure/servicefabric.StartClusterUpgradeDescription'
          description: Describes the parameters for starting a cluster upgrade.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startClusterUpgrade_2'
    name: >-
      startClusterUpgrade(StartClusterUpgradeDescription,
      ServiceFabricClientStartClusterUpgradeOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function startClusterUpgrade(startClusterUpgradeDescription:
        StartClusterUpgradeDescription, options:
        ServiceFabricClientStartClusterUpgradeOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: startClusterUpgradeDescription
          type:
            - '@azure/servicefabric.StartClusterUpgradeDescription'
          description: Describes the parameters for starting a cluster upgrade.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientStartClusterUpgradeOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startComposeDeploymentUpgrade'
    name: >-
      startComposeDeploymentUpgrade(string, ComposeDeploymentUpgradeDescription,
      Models.ServiceFabricClientStartComposeDeploymentUpgradeOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Validates the supplied upgrade parameters and starts upgrading the
      deployment if the parameters

      are valid.
    syntax:
      content: >-
        function startComposeDeploymentUpgrade(deploymentName: string,
        composeDeploymentUpgradeDescription:
        ComposeDeploymentUpgradeDescription, options?:
        Models.ServiceFabricClientStartComposeDeploymentUpgradeOptionalParams)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The identity of the deployment.
        - id: composeDeploymentUpgradeDescription
          type:
            - '@azure/servicefabric.ComposeDeploymentUpgradeDescription'
          description: Parameters for upgrading compose deployment.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientStartComposeDeploymentUpgradeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startComposeDeploymentUpgrade_1'
    name: >-
      startComposeDeploymentUpgrade(string, ComposeDeploymentUpgradeDescription,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function startComposeDeploymentUpgrade(deploymentName: string,
        composeDeploymentUpgradeDescription:
        ComposeDeploymentUpgradeDescription, callback: ServiceCallback<void>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The identity of the deployment.
        - id: composeDeploymentUpgradeDescription
          type:
            - '@azure/servicefabric.ComposeDeploymentUpgradeDescription'
          description: Parameters for upgrading compose deployment.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startComposeDeploymentUpgrade_2'
    name: >-
      startComposeDeploymentUpgrade(string, ComposeDeploymentUpgradeDescription,
      ServiceFabricClientStartComposeDeploymentUpgradeOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function startComposeDeploymentUpgrade(deploymentName: string,
        composeDeploymentUpgradeDescription:
        ComposeDeploymentUpgradeDescription, options:
        ServiceFabricClientStartComposeDeploymentUpgradeOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The identity of the deployment.
        - id: composeDeploymentUpgradeDescription
          type:
            - '@azure/servicefabric.ComposeDeploymentUpgradeDescription'
          description: Parameters for upgrading compose deployment.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientStartComposeDeploymentUpgradeOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startDataLoss'
    name: >-
      startDataLoss(string, string, string, Models.DataLossMode,
      Models.ServiceFabricClientStartDataLossOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This API will induce data loss for the specified partition. It will
      trigger a call to the

      OnDataLoss API of the partition.

      Actual data loss will depend on the specified DataLossMode.

      - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss
      is triggered for the

      partition but actual data loss depends on the presence of in-flight
      replication.

      - FullDataLoss - All replicas are removed hence all data is lost and
      OnDataLoss is triggered.


      This API should only be called with a stateful service as the target.


      Calling this API with a system service as the target is not advised.


      Note:  Once this API has been called, it cannot be reversed. Calling
      CancelOperation will only

      stop execution and clean up internal system state.

      It will not restore data if the command has progressed far enough to cause
      data loss.


      Call the GetDataLossProgress API with the same OperationId to return
      information on the

      operation started with this API.
    syntax:
      content: >-
        function startDataLoss(serviceId: string, partitionId: string,
        operationId: string, dataLossMode: Models.DataLossMode, options?:
        Models.ServiceFabricClientStartDataLossOptionalParams)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: operationId
          type:
            - string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: dataLossMode
          type:
            - Models.DataLossMode
          description: >-
            This enum is passed to the StartDataLoss API to indicate what type
            of data

            loss to induce. Possible values include: 'Invalid',
            'PartialDataLoss', 'FullDataLoss'
        - id: options
          type:
            - Models.ServiceFabricClientStartDataLossOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startDataLoss_1'
    name: >-
      startDataLoss(string, string, string, Models.DataLossMode,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function startDataLoss(serviceId: string, partitionId: string,
        operationId: string, dataLossMode: Models.DataLossMode, callback:
        ServiceCallback<void>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: operationId
          type:
            - string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: dataLossMode
          type:
            - Models.DataLossMode
          description: >-
            This enum is passed to the StartDataLoss API to indicate what type
            of data

            loss to induce. Possible values include: 'Invalid',
            'PartialDataLoss', 'FullDataLoss'
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startDataLoss_2'
    name: >-
      startDataLoss(string, string, string, Models.DataLossMode,
      ServiceFabricClientStartDataLossOptionalParams, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function startDataLoss(serviceId: string, partitionId: string,
        operationId: string, dataLossMode: Models.DataLossMode, options:
        ServiceFabricClientStartDataLossOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: operationId
          type:
            - string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: dataLossMode
          type:
            - Models.DataLossMode
          description: >-
            This enum is passed to the StartDataLoss API to indicate what type
            of data

            loss to induce. Possible values include: 'Invalid',
            'PartialDataLoss', 'FullDataLoss'
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientStartDataLossOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startNodeTransition'
    name: >-
      startNodeTransition(string, string, Models.NodeTransitionType, string,
      number, Models.ServiceFabricClientStartNodeTransitionOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Starts or stops a cluster node.  A cluster node is a process, not the OS
      instance itself.  To

      start a node, pass in "Start" for the NodeTransitionType parameter.

      To stop a node, pass in "Stop" for the NodeTransitionType parameter.  This
      API starts the

      operation - when the API returns the node may not have finished
      transitioning yet.

      Call GetNodeTransitionProgress with the same OperationId to get the
      progress of the operation.
    syntax:
      content: >-
        function startNodeTransition(nodeName: string, operationId: string,
        nodeTransitionType: Models.NodeTransitionType, nodeInstanceId: string,
        stopDurationInSeconds: number, options?:
        Models.ServiceFabricClientStartNodeTransitionOptionalParams)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: operationId
          type:
            - string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: nodeTransitionType
          type:
            - Models.NodeTransitionType
          description: >-
            Indicates the type of transition to perform. 
            NodeTransitionType.Start

            will start a stopped node.  NodeTransitionType.Stop will stop a node
            that is up. Possible values

            include: 'Invalid', 'Start', 'Stop'
        - id: nodeInstanceId
          type:
            - string
          description: >-
            The node instance ID of the target node.  This can be determined
            through

            GetNodeInfo API.
        - id: stopDurationInSeconds
          type:
            - number
          description: >-
            The duration, in seconds, to keep the node stopped.  The minimum

            value is 600, the maximum is 14400.  After this time expires, the
            node will automatically come

            back up.
        - id: options
          type:
            - Models.ServiceFabricClientStartNodeTransitionOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startNodeTransition_1'
    name: >-
      startNodeTransition(string, string, Models.NodeTransitionType, string,
      number, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function startNodeTransition(nodeName: string, operationId: string,
        nodeTransitionType: Models.NodeTransitionType, nodeInstanceId: string,
        stopDurationInSeconds: number, callback: ServiceCallback<void>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: operationId
          type:
            - string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: nodeTransitionType
          type:
            - Models.NodeTransitionType
          description: >-
            Indicates the type of transition to perform. 
            NodeTransitionType.Start

            will start a stopped node.  NodeTransitionType.Stop will stop a node
            that is up. Possible values

            include: 'Invalid', 'Start', 'Stop'
        - id: nodeInstanceId
          type:
            - string
          description: >-
            The node instance ID of the target node.  This can be determined
            through

            GetNodeInfo API.
        - id: stopDurationInSeconds
          type:
            - number
          description: >-
            The duration, in seconds, to keep the node stopped.  The minimum

            value is 600, the maximum is 14400.  After this time expires, the
            node will automatically come

            back up.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startNodeTransition_2'
    name: >-
      startNodeTransition(string, string, Models.NodeTransitionType, string,
      number, ServiceFabricClientStartNodeTransitionOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function startNodeTransition(nodeName: string, operationId: string,
        nodeTransitionType: Models.NodeTransitionType, nodeInstanceId: string,
        stopDurationInSeconds: number, options:
        ServiceFabricClientStartNodeTransitionOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: operationId
          type:
            - string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: nodeTransitionType
          type:
            - Models.NodeTransitionType
          description: >-
            Indicates the type of transition to perform. 
            NodeTransitionType.Start

            will start a stopped node.  NodeTransitionType.Stop will stop a node
            that is up. Possible values

            include: 'Invalid', 'Start', 'Stop'
        - id: nodeInstanceId
          type:
            - string
          description: >-
            The node instance ID of the target node.  This can be determined
            through

            GetNodeInfo API.
        - id: stopDurationInSeconds
          type:
            - number
          description: >-
            The duration, in seconds, to keep the node stopped.  The minimum

            value is 600, the maximum is 14400.  After this time expires, the
            node will automatically come

            back up.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientStartNodeTransitionOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startPartitionRestart'
    name: >-
      startPartitionRestart(string, string, string, Models.RestartPartitionMode,
      Models.ServiceFabricClientStartPartitionRestartOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This API is useful for testing failover.

      If used to target a stateless service partition, RestartPartitionMode must
      be

      AllReplicasOrInstances.


      Call the GetPartitionRestartProgress API using the same OperationId to get
      the progress.
    syntax:
      content: >-
        function startPartitionRestart(serviceId: string, partitionId: string,
        operationId: string, restartPartitionMode: Models.RestartPartitionMode,
        options?: Models.ServiceFabricClientStartPartitionRestartOptionalParams)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: operationId
          type:
            - string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: restartPartitionMode
          type:
            - Models.RestartPartitionMode
          description: |-
            Describe which partitions to restart. Possible values include:
            'Invalid', 'AllReplicasOrInstances', 'OnlyActiveSecondaries'
        - id: options
          type:
            - Models.ServiceFabricClientStartPartitionRestartOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startPartitionRestart_1'
    name: >-
      startPartitionRestart(string, string, string, Models.RestartPartitionMode,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function startPartitionRestart(serviceId: string, partitionId: string,
        operationId: string, restartPartitionMode: Models.RestartPartitionMode,
        callback: ServiceCallback<void>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: operationId
          type:
            - string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: restartPartitionMode
          type:
            - Models.RestartPartitionMode
          description: |-
            Describe which partitions to restart. Possible values include:
            'Invalid', 'AllReplicasOrInstances', 'OnlyActiveSecondaries'
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startPartitionRestart_2'
    name: >-
      startPartitionRestart(string, string, string, Models.RestartPartitionMode,
      ServiceFabricClientStartPartitionRestartOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function startPartitionRestart(serviceId: string, partitionId: string,
        operationId: string, restartPartitionMode: Models.RestartPartitionMode,
        options: ServiceFabricClientStartPartitionRestartOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: operationId
          type:
            - string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: restartPartitionMode
          type:
            - Models.RestartPartitionMode
          description: |-
            Describe which partitions to restart. Possible values include:
            'Invalid', 'AllReplicasOrInstances', 'OnlyActiveSecondaries'
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientStartPartitionRestartOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startQuorumLoss'
    name: >-
      startQuorumLoss(string, string, string, Models.QuorumLossMode, number,
      Models.ServiceFabricClientStartQuorumLossOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This API is useful for a temporary quorum loss situation on your service.

      Call the GetQuorumLossProgress API with the same OperationId to return
      information on the

      operation started with this API.


      This can only be called on stateful persisted (HasPersistedState==true)
      services.  Do not use

      this API on stateless services or stateful in-memory only services.
    syntax:
      content: >-
        function startQuorumLoss(serviceId: string, partitionId: string,
        operationId: string, quorumLossMode: Models.QuorumLossMode,
        quorumLossDuration: number, options?:
        Models.ServiceFabricClientStartQuorumLossOptionalParams)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: operationId
          type:
            - string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: quorumLossMode
          type:
            - Models.QuorumLossMode
          description: >-
            This enum is passed to the StartQuorumLoss API to indicate what type
            of

            quorum loss to induce. Possible values include: 'Invalid',
            'QuorumReplicas', 'AllReplicas'
        - id: quorumLossDuration
          type:
            - number
          description: |-
            The amount of time for which the partition will be kept in quorum
            loss.  This must be specified in seconds.
        - id: options
          type:
            - Models.ServiceFabricClientStartQuorumLossOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startQuorumLoss_1'
    name: >-
      startQuorumLoss(string, string, string, Models.QuorumLossMode, number,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function startQuorumLoss(serviceId: string, partitionId: string,
        operationId: string, quorumLossMode: Models.QuorumLossMode,
        quorumLossDuration: number, callback: ServiceCallback<void>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: operationId
          type:
            - string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: quorumLossMode
          type:
            - Models.QuorumLossMode
          description: >-
            This enum is passed to the StartQuorumLoss API to indicate what type
            of

            quorum loss to induce. Possible values include: 'Invalid',
            'QuorumReplicas', 'AllReplicas'
        - id: quorumLossDuration
          type:
            - number
          description: |-
            The amount of time for which the partition will be kept in quorum
            loss.  This must be specified in seconds.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.startQuorumLoss_2'
    name: >-
      startQuorumLoss(string, string, string, Models.QuorumLossMode, number,
      ServiceFabricClientStartQuorumLossOptionalParams, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function startQuorumLoss(serviceId: string, partitionId: string,
        operationId: string, quorumLossMode: Models.QuorumLossMode,
        quorumLossDuration: number, options:
        ServiceFabricClientStartQuorumLossOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: operationId
          type:
            - string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: quorumLossMode
          type:
            - Models.QuorumLossMode
          description: >-
            This enum is passed to the StartQuorumLoss API to indicate what type
            of

            quorum loss to induce. Possible values include: 'Invalid',
            'QuorumReplicas', 'AllReplicas'
        - id: quorumLossDuration
          type:
            - number
          description: |-
            The amount of time for which the partition will be kept in quorum
            loss.  This must be specified in seconds.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientStartQuorumLossOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.startRollbackComposeDeploymentUpgrade
    name: >-
      startRollbackComposeDeploymentUpgrade(string,
      Models.ServiceFabricClientStartRollbackComposeDeploymentUpgradeOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Rollback a service fabric compose deployment upgrade.
    syntax:
      content: >-
        function startRollbackComposeDeploymentUpgrade(deploymentName: string,
        options?:
        Models.ServiceFabricClientStartRollbackComposeDeploymentUpgradeOptionalParams)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The identity of the deployment.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientStartRollbackComposeDeploymentUpgradeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.startRollbackComposeDeploymentUpgrade_1
    name: 'startRollbackComposeDeploymentUpgrade(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function startRollbackComposeDeploymentUpgrade(deploymentName: string,
        callback: ServiceCallback<void>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The identity of the deployment.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.startRollbackComposeDeploymentUpgrade_2
    name: >-
      startRollbackComposeDeploymentUpgrade(string,
      ServiceFabricClientStartRollbackComposeDeploymentUpgradeOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function startRollbackComposeDeploymentUpgrade(deploymentName: string,
        options:
        ServiceFabricClientStartRollbackComposeDeploymentUpgradeOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The identity of the deployment.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientStartRollbackComposeDeploymentUpgradeOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.stopChaos'
    name: stopChaos(Models.ServiceFabricClientStopChaosOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Stops Chaos from executing new faults. In-flight faults will continue to
      execute until they are

      complete. The current Chaos Schedule is put into a stopped state.

      Once a schedule is stopped, it will stay in the stopped state and not be
      used to Chaos Schedule

      new runs of Chaos. A new Chaos Schedule must be set in order to resume
      scheduling.
    syntax:
      content: >-
        function stopChaos(options?:
        Models.ServiceFabricClientStopChaosOptionalParams)
      parameters:
        - id: options
          type:
            - Models.ServiceFabricClientStopChaosOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.stopChaos_1'
    name: stopChaos(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function stopChaos(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.stopChaos_2'
    name: >-
      stopChaos(ServiceFabricClientStopChaosOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function stopChaos(options: ServiceFabricClientStopChaosOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientStopChaosOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.submitPropertyBatch'
    name: >-
      submitPropertyBatch(string, PropertyBatchDescriptionList,
      Models.ServiceFabricClientSubmitPropertyBatchOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Submits a batch of property operations. Either all or none of the
      operations will be committed.
    syntax:
      content: >-
        function submitPropertyBatch(nameId: string,
        propertyBatchDescriptionList: PropertyBatchDescriptionList, options?:
        Models.ServiceFabricClientSubmitPropertyBatchOptionalParams)
      parameters:
        - id: nameId
          type:
            - string
          description: 'The Service Fabric name, without the ''fabric:'' URI scheme.'
        - id: propertyBatchDescriptionList
          type:
            - '@azure/servicefabric.PropertyBatchDescriptionList'
          description: Describes the property batch operations to be submitted.
        - id: options
          type:
            - Models.ServiceFabricClientSubmitPropertyBatchOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.SubmitPropertyBatchResponse>
        description: Promise<Models.SubmitPropertyBatchResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.submitPropertyBatch_1'
    name: >-
      submitPropertyBatch(string, PropertyBatchDescriptionList,
      ServiceCallback<Models.PropertyBatchInfoUnion>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function submitPropertyBatch(nameId: string,
        propertyBatchDescriptionList: PropertyBatchDescriptionList, callback:
        ServiceCallback<Models.PropertyBatchInfoUnion>)
      parameters:
        - id: nameId
          type:
            - string
          description: 'The Service Fabric name, without the ''fabric:'' URI scheme.'
        - id: propertyBatchDescriptionList
          type:
            - '@azure/servicefabric.PropertyBatchDescriptionList'
          description: Describes the property batch operations to be submitted.
        - id: callback
          type:
            - ServiceCallback<Models.PropertyBatchInfoUnion>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.submitPropertyBatch_2'
    name: >-
      submitPropertyBatch(string, PropertyBatchDescriptionList,
      ServiceFabricClientSubmitPropertyBatchOptionalParams,
      ServiceCallback<Models.PropertyBatchInfoUnion>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function submitPropertyBatch(nameId: string,
        propertyBatchDescriptionList: PropertyBatchDescriptionList, options:
        ServiceFabricClientSubmitPropertyBatchOptionalParams, callback:
        ServiceCallback<Models.PropertyBatchInfoUnion>)
      parameters:
        - id: nameId
          type:
            - string
          description: 'The Service Fabric name, without the ''fabric:'' URI scheme.'
        - id: propertyBatchDescriptionList
          type:
            - '@azure/servicefabric.PropertyBatchDescriptionList'
          description: Describes the property batch operations to be submitted.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientSubmitPropertyBatchOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<Models.PropertyBatchInfoUnion>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.suspendApplicationBackup'
    name: >-
      suspendApplicationBackup(string,
      Models.ServiceFabricClientSuspendApplicationBackupOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The application which is configured to take periodic backups, is suspended
      for taking further

      backups till it is resumed again. This operation applies to the entire
      application's hierarchy.

      It means all the services and partitions under this application are now
      suspended for backup.
    syntax:
      content: >-
        function suspendApplicationBackup(applicationId: string, options?:
        Models.ServiceFabricClientSuspendApplicationBackupOptionalParams)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - Models.ServiceFabricClientSuspendApplicationBackupOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.suspendApplicationBackup_1'
    name: 'suspendApplicationBackup(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function suspendApplicationBackup(applicationId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.suspendApplicationBackup_2'
    name: >-
      suspendApplicationBackup(string,
      ServiceFabricClientSuspendApplicationBackupOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function suspendApplicationBackup(applicationId: string, options:
        ServiceFabricClientSuspendApplicationBackupOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientSuspendApplicationBackupOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.suspendPartitionBackup'
    name: >-
      suspendPartitionBackup(string,
      Models.ServiceFabricClientSuspendPartitionBackupOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The partition which is configured to take periodic backups, is suspended
      for taking further

      backups till it is resumed again.
    syntax:
      content: >-
        function suspendPartitionBackup(partitionId: string, options?:
        Models.ServiceFabricClientSuspendPartitionBackupOptionalParams)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - Models.ServiceFabricClientSuspendPartitionBackupOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.suspendPartitionBackup_1'
    name: 'suspendPartitionBackup(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function suspendPartitionBackup(partitionId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.suspendPartitionBackup_2'
    name: >-
      suspendPartitionBackup(string,
      ServiceFabricClientSuspendPartitionBackupOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function suspendPartitionBackup(partitionId: string, options:
        ServiceFabricClientSuspendPartitionBackupOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type:
            - string
          description: The identity of the partition.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientSuspendPartitionBackupOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.suspendServiceBackup'
    name: >-
      suspendServiceBackup(string,
      Models.ServiceFabricClientSuspendServiceBackupOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The service which is configured to take periodic backups, is suspended for
      taking further

      backups till it is resumed again. This operation applies to the entire
      service's hierarchy. It

      means all the partitions under this service are now suspended for backup.
    syntax:
      content: >-
        function suspendServiceBackup(serviceId: string, options?:
        Models.ServiceFabricClientSuspendServiceBackupOptionalParams)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type:
            - Models.ServiceFabricClientSuspendServiceBackupOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.suspendServiceBackup_1'
    name: 'suspendServiceBackup(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function suspendServiceBackup(serviceId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.suspendServiceBackup_2'
    name: >-
      suspendServiceBackup(string,
      ServiceFabricClientSuspendServiceBackupOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function suspendServiceBackup(serviceId: string, options:
        ServiceFabricClientSuspendServiceBackupOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientSuspendServiceBackupOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.toggleVerboseServicePlacementHealthReporting
    name: >-
      toggleVerboseServicePlacementHealthReporting(boolean,
      Models.ServiceFabricClientToggleVerboseServicePlacementHealthReportingOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      If verbosity is set to true, then detailed health reports will be
      generated when replicas cannot

      be placed or dropped.

      If verbosity is set to false, then no health reports will be generated
      when replicas cannot be

      placed or dropped.
    syntax:
      content: >-
        function toggleVerboseServicePlacementHealthReporting(enabled: boolean,
        options?:
        Models.ServiceFabricClientToggleVerboseServicePlacementHealthReportingOptionalParams)
      parameters:
        - id: enabled
          type:
            - boolean
          description: The verbosity of service placement health reporting.
        - id: options
          type:
            - >-
              Models.ServiceFabricClientToggleVerboseServicePlacementHealthReportingOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.toggleVerboseServicePlacementHealthReporting_1
    name: >-
      toggleVerboseServicePlacementHealthReporting(boolean,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function toggleVerboseServicePlacementHealthReporting(enabled: boolean,
        callback: ServiceCallback<void>)
      parameters:
        - id: enabled
          type:
            - boolean
          description: The verbosity of service placement health reporting.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: >-
      @azure/servicefabric.ServiceFabricClient.toggleVerboseServicePlacementHealthReporting_2
    name: >-
      toggleVerboseServicePlacementHealthReporting(boolean,
      ServiceFabricClientToggleVerboseServicePlacementHealthReportingOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function toggleVerboseServicePlacementHealthReporting(enabled: boolean,
        options:
        ServiceFabricClientToggleVerboseServicePlacementHealthReportingOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: enabled
          type:
            - boolean
          description: The verbosity of service placement health reporting.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientToggleVerboseServicePlacementHealthReportingOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.unprovisionApplicationType'
    name: >-
      unprovisionApplicationType(string,
      UnprovisionApplicationTypeDescriptionInfo,
      Models.ServiceFabricClientUnprovisionApplicationTypeOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This operation can only be performed if all application instances of the
      application type have

      been deleted. Once the application type is unregistered, no new
      application instances can be

      created for this particular application type.
    syntax:
      content: >-
        function unprovisionApplicationType(applicationTypeName: string,
        unprovisionApplicationTypeDescriptionInfo:
        UnprovisionApplicationTypeDescriptionInfo, options?:
        Models.ServiceFabricClientUnprovisionApplicationTypeOptionalParams)
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: The name of the application type.
        - id: unprovisionApplicationTypeDescriptionInfo
          type:
            - '@azure/servicefabric.UnprovisionApplicationTypeDescriptionInfo'
          description: |-
            The relative path for the application package
            in the image store specified during the prior copy operation.
        - id: options
          type:
            - Models.ServiceFabricClientUnprovisionApplicationTypeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.unprovisionApplicationType_1'
    name: >-
      unprovisionApplicationType(string,
      UnprovisionApplicationTypeDescriptionInfo, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function unprovisionApplicationType(applicationTypeName: string,
        unprovisionApplicationTypeDescriptionInfo:
        UnprovisionApplicationTypeDescriptionInfo, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: The name of the application type.
        - id: unprovisionApplicationTypeDescriptionInfo
          type:
            - '@azure/servicefabric.UnprovisionApplicationTypeDescriptionInfo'
          description: |-
            The relative path for the application package
            in the image store specified during the prior copy operation.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.unprovisionApplicationType_2'
    name: >-
      unprovisionApplicationType(string,
      UnprovisionApplicationTypeDescriptionInfo,
      ServiceFabricClientUnprovisionApplicationTypeOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function unprovisionApplicationType(applicationTypeName: string,
        unprovisionApplicationTypeDescriptionInfo:
        UnprovisionApplicationTypeDescriptionInfo, options:
        ServiceFabricClientUnprovisionApplicationTypeOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: The name of the application type.
        - id: unprovisionApplicationTypeDescriptionInfo
          type:
            - '@azure/servicefabric.UnprovisionApplicationTypeDescriptionInfo'
          description: |-
            The relative path for the application package
            in the image store specified during the prior copy operation.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientUnprovisionApplicationTypeOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.unprovisionCluster'
    name: >-
      unprovisionCluster(UnprovisionFabricDescription,
      Models.ServiceFabricClientUnprovisionClusterOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: It is supported to unprovision code and configuration separately.
    syntax:
      content: >-
        function unprovisionCluster(unprovisionFabricDescription:
        UnprovisionFabricDescription, options?:
        Models.ServiceFabricClientUnprovisionClusterOptionalParams)
      parameters:
        - id: unprovisionFabricDescription
          type:
            - '@azure/servicefabric.UnprovisionFabricDescription'
          description: Describes the parameters for unprovisioning a cluster.
        - id: options
          type:
            - Models.ServiceFabricClientUnprovisionClusterOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.unprovisionCluster_1'
    name: 'unprovisionCluster(UnprovisionFabricDescription, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function unprovisionCluster(unprovisionFabricDescription:
        UnprovisionFabricDescription, callback: ServiceCallback<void>)
      parameters:
        - id: unprovisionFabricDescription
          type:
            - '@azure/servicefabric.UnprovisionFabricDescription'
          description: Describes the parameters for unprovisioning a cluster.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.unprovisionCluster_2'
    name: >-
      unprovisionCluster(UnprovisionFabricDescription,
      ServiceFabricClientUnprovisionClusterOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function unprovisionCluster(unprovisionFabricDescription:
        UnprovisionFabricDescription, options:
        ServiceFabricClientUnprovisionClusterOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: unprovisionFabricDescription
          type:
            - '@azure/servicefabric.UnprovisionFabricDescription'
          description: Describes the parameters for unprovisioning a cluster.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientUnprovisionClusterOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateApplicationUpgrade'
    name: >-
      updateApplicationUpgrade(string, ApplicationUpgradeUpdateDescription,
      Models.ServiceFabricClientUpdateApplicationUpgradeOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Updates the parameters of an ongoing application upgrade from the ones
      specified at the time of

      starting the application upgrade. This may be required to mitigate stuck
      application upgrades

      due to incorrect parameters or issues in the application to make progress.
    syntax:
      content: >-
        function updateApplicationUpgrade(applicationId: string,
        applicationUpgradeUpdateDescription:
        ApplicationUpgradeUpdateDescription, options?:
        Models.ServiceFabricClientUpdateApplicationUpgradeOptionalParams)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: applicationUpgradeUpdateDescription
          type:
            - '@azure/servicefabric.ApplicationUpgradeUpdateDescription'
          description: |-
            Parameters for updating an existing application
            upgrade.
        - id: options
          type:
            - Models.ServiceFabricClientUpdateApplicationUpgradeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateApplicationUpgrade_1'
    name: >-
      updateApplicationUpgrade(string, ApplicationUpgradeUpdateDescription,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function updateApplicationUpgrade(applicationId: string,
        applicationUpgradeUpdateDescription:
        ApplicationUpgradeUpdateDescription, callback: ServiceCallback<void>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: applicationUpgradeUpdateDescription
          type:
            - '@azure/servicefabric.ApplicationUpgradeUpdateDescription'
          description: |-
            Parameters for updating an existing application
            upgrade.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateApplicationUpgrade_2'
    name: >-
      updateApplicationUpgrade(string, ApplicationUpgradeUpdateDescription,
      ServiceFabricClientUpdateApplicationUpgradeOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function updateApplicationUpgrade(applicationId: string,
        applicationUpgradeUpdateDescription:
        ApplicationUpgradeUpdateDescription, options:
        ServiceFabricClientUpdateApplicationUpgradeOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: applicationUpgradeUpdateDescription
          type:
            - '@azure/servicefabric.ApplicationUpgradeUpdateDescription'
          description: |-
            Parameters for updating an existing application
            upgrade.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientUpdateApplicationUpgradeOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateBackupPolicy'
    name: >-
      updateBackupPolicy(BackupPolicyDescription, string,
      Models.ServiceFabricClientUpdateBackupPolicyOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Updates the backup policy identified by {backupPolicyName}'
    syntax:
      content: >-
        function updateBackupPolicy(backupPolicyDescription:
        BackupPolicyDescription, backupPolicyName: string, options?:
        Models.ServiceFabricClientUpdateBackupPolicyOptionalParams)
      parameters:
        - id: backupPolicyDescription
          type:
            - '@azure/servicefabric.BackupPolicyDescription'
          description: Describes the backup policy.
        - id: backupPolicyName
          type:
            - string
          description: The name of the backup policy.
        - id: options
          type:
            - Models.ServiceFabricClientUpdateBackupPolicyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateBackupPolicy_1'
    name: 'updateBackupPolicy(BackupPolicyDescription, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function updateBackupPolicy(backupPolicyDescription:
        BackupPolicyDescription, backupPolicyName: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: backupPolicyDescription
          type:
            - '@azure/servicefabric.BackupPolicyDescription'
          description: Describes the backup policy.
        - id: backupPolicyName
          type:
            - string
          description: The name of the backup policy.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateBackupPolicy_2'
    name: >-
      updateBackupPolicy(BackupPolicyDescription, string,
      ServiceFabricClientUpdateBackupPolicyOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function updateBackupPolicy(backupPolicyDescription:
        BackupPolicyDescription, backupPolicyName: string, options:
        ServiceFabricClientUpdateBackupPolicyOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: backupPolicyDescription
          type:
            - '@azure/servicefabric.BackupPolicyDescription'
          description: Describes the backup policy.
        - id: backupPolicyName
          type:
            - string
          description: The name of the backup policy.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientUpdateBackupPolicyOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateClusterUpgrade'
    name: >-
      updateClusterUpgrade(UpdateClusterUpgradeDescription,
      Models.ServiceFabricClientUpdateClusterUpgradeOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Update the upgrade parameters used during a Service Fabric cluster
      upgrade.
    syntax:
      content: >-
        function updateClusterUpgrade(updateClusterUpgradeDescription:
        UpdateClusterUpgradeDescription, options?:
        Models.ServiceFabricClientUpdateClusterUpgradeOptionalParams)
      parameters:
        - id: updateClusterUpgradeDescription
          type:
            - '@azure/servicefabric.UpdateClusterUpgradeDescription'
          description: Parameters for updating a cluster upgrade.
        - id: options
          type:
            - Models.ServiceFabricClientUpdateClusterUpgradeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateClusterUpgrade_1'
    name: >-
      updateClusterUpgrade(UpdateClusterUpgradeDescription,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function updateClusterUpgrade(updateClusterUpgradeDescription:
        UpdateClusterUpgradeDescription, callback: ServiceCallback<void>)
      parameters:
        - id: updateClusterUpgradeDescription
          type:
            - '@azure/servicefabric.UpdateClusterUpgradeDescription'
          description: Parameters for updating a cluster upgrade.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateClusterUpgrade_2'
    name: >-
      updateClusterUpgrade(UpdateClusterUpgradeDescription,
      ServiceFabricClientUpdateClusterUpgradeOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function updateClusterUpgrade(updateClusterUpgradeDescription:
        UpdateClusterUpgradeDescription, options:
        ServiceFabricClientUpdateClusterUpgradeOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: updateClusterUpgradeDescription
          type:
            - '@azure/servicefabric.UpdateClusterUpgradeDescription'
          description: Parameters for updating a cluster upgrade.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientUpdateClusterUpgradeOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateRepairExecutionState'
    name: 'updateRepairExecutionState(RepairTask, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This API supports the Service Fabric platform; it is not meant to be used
      directly from your

      code.
    syntax:
      content: >-
        function updateRepairExecutionState(repairTask: RepairTask, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: repairTask
          type:
            - '@azure/servicefabric.RepairTask'
          description: Describes the repair task to be created or updated.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.UpdateRepairExecutionStateResponse>
        description: Promise<Models.UpdateRepairExecutionStateResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateRepairExecutionState_2'
    name: >-
      updateRepairExecutionState(RepairTask, RequestOptionsBase,
      ServiceCallback<RepairTaskUpdateInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function updateRepairExecutionState(repairTask: RepairTask, options:
        RequestOptionsBase, callback: ServiceCallback<RepairTaskUpdateInfo>)
      parameters:
        - id: repairTask
          type:
            - '@azure/servicefabric.RepairTask'
          description: Describes the repair task to be created or updated.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.RepairTaskUpdateInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateRepairExecutionState_1'
    name: >-
      updateRepairExecutionState(RepairTask,
      ServiceCallback<RepairTaskUpdateInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function updateRepairExecutionState(repairTask: RepairTask, callback:
        ServiceCallback<RepairTaskUpdateInfo>)
      parameters:
        - id: repairTask
          type:
            - '@azure/servicefabric.RepairTask'
          description: Describes the repair task to be created or updated.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.RepairTaskUpdateInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateRepairTaskHealthPolicy'
    name: >-
      updateRepairTaskHealthPolicy(RepairTaskUpdateHealthPolicyDescription,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This API supports the Service Fabric platform; it is not meant to be used
      directly from your

      code.
    syntax:
      content: >-
        function
        updateRepairTaskHealthPolicy(repairTaskUpdateHealthPolicyDescription:
        RepairTaskUpdateHealthPolicyDescription, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: repairTaskUpdateHealthPolicyDescription
          type:
            - '@azure/servicefabric.RepairTaskUpdateHealthPolicyDescription'
          description: |-
            Describes the repair task healthy policy to be
            updated.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.UpdateRepairTaskHealthPolicyResponse>
        description: Promise<Models.UpdateRepairTaskHealthPolicyResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateRepairTaskHealthPolicy_2'
    name: >-
      updateRepairTaskHealthPolicy(RepairTaskUpdateHealthPolicyDescription,
      RequestOptionsBase, ServiceCallback<RepairTaskUpdateInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function
        updateRepairTaskHealthPolicy(repairTaskUpdateHealthPolicyDescription:
        RepairTaskUpdateHealthPolicyDescription, options: RequestOptionsBase,
        callback: ServiceCallback<RepairTaskUpdateInfo>)
      parameters:
        - id: repairTaskUpdateHealthPolicyDescription
          type:
            - '@azure/servicefabric.RepairTaskUpdateHealthPolicyDescription'
          description: |-
            Describes the repair task healthy policy to be
            updated.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.RepairTaskUpdateInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateRepairTaskHealthPolicy_1'
    name: >-
      updateRepairTaskHealthPolicy(RepairTaskUpdateHealthPolicyDescription,
      ServiceCallback<RepairTaskUpdateInfo>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function
        updateRepairTaskHealthPolicy(repairTaskUpdateHealthPolicyDescription:
        RepairTaskUpdateHealthPolicyDescription, callback:
        ServiceCallback<RepairTaskUpdateInfo>)
      parameters:
        - id: repairTaskUpdateHealthPolicyDescription
          type:
            - '@azure/servicefabric.RepairTaskUpdateHealthPolicyDescription'
          description: |-
            Describes the repair task healthy policy to be
            updated.
        - id: callback
          type:
            - ServiceCallback<@azure/servicefabric.RepairTaskUpdateInfo>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateService'
    name: >-
      updateService(string, Models.ServiceUpdateDescriptionUnion,
      Models.ServiceFabricClientUpdateServiceOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This API allows updating properties of a running Service Fabric service.
      The set of properties

      that can be updated are a subset of the properties that were specified at
      the time of creating

      the service. The current set of properties can be obtained using
      `GetServiceDescription` API.

      Note that updating the properties of a running service is different than
      upgrading your

      application using `StartApplicationUpgrade` API. The upgrade is a long
      running background

      operation that involves moving the application from one version to
      another, one upgrade domain

      at a time, whereas update applies the new properties immediately to the
      service.
    syntax:
      content: >-
        function updateService(serviceId: string, serviceUpdateDescription:
        Models.ServiceUpdateDescriptionUnion, options?:
        Models.ServiceFabricClientUpdateServiceOptionalParams)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: serviceUpdateDescription
          type:
            - Models.ServiceUpdateDescriptionUnion
          description: The information necessary to update a service.
        - id: options
          type:
            - Models.ServiceFabricClientUpdateServiceOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateService_1'
    name: >-
      updateService(string, Models.ServiceUpdateDescriptionUnion,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function updateService(serviceId: string, serviceUpdateDescription:
        Models.ServiceUpdateDescriptionUnion, callback: ServiceCallback<void>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: serviceUpdateDescription
          type:
            - Models.ServiceUpdateDescriptionUnion
          description: The information necessary to update a service.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.updateService_2'
    name: >-
      updateService(string, Models.ServiceUpdateDescriptionUnion,
      ServiceFabricClientUpdateServiceOptionalParams, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function updateService(serviceId: string, serviceUpdateDescription:
        Models.ServiceUpdateDescriptionUnion, options:
        ServiceFabricClientUpdateServiceOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: serviceUpdateDescription
          type:
            - Models.ServiceUpdateDescriptionUnion
          description: The information necessary to update a service.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientUpdateServiceOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.uploadFile'
    name: 'uploadFile(string, Models.ServiceFabricClientUploadFileOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Uploads contents of the file to the image store. Use this API if the file
      is small enough to

      upload again if the connection fails. The file's data needs to be added to
      the request body. The

      contents will be uploaded to the specified path. Image store service uses
      a mark file to

      indicate the availability of the folder. The mark file is an empty file
      named "_.dir". The mark

      file is generated by the image store service when all files in a folder
      are uploaded. When using

      File-by-File approach to upload application package in REST, the image
      store service isn't aware

      of the file hierarchy of the application package; you need to create a
      mark file per folder and

      upload it last, to let the image store service know that the folder is
      complete.
    syntax:
      content: >-
        function uploadFile(contentPath: string, options?:
        Models.ServiceFabricClientUploadFileOptionalParams)
      parameters:
        - id: contentPath
          type:
            - string
          description: Relative path to file or folder in the image store from its root.
        - id: options
          type:
            - Models.ServiceFabricClientUploadFileOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.uploadFile_1'
    name: 'uploadFile(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function uploadFile(contentPath: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: contentPath
          type:
            - string
          description: Relative path to file or folder in the image store from its root.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.uploadFile_2'
    name: >-
      uploadFile(string, ServiceFabricClientUploadFileOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function uploadFile(contentPath: string, options:
        ServiceFabricClientUploadFileOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: contentPath
          type:
            - string
          description: Relative path to file or folder in the image store from its root.
        - id: options
          type:
            - '@azure/servicefabric.ServiceFabricClientUploadFileOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.uploadFileChunk'
    name: >-
      uploadFileChunk(string, string, string,
      Models.ServiceFabricClientUploadFileChunkOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Uploads a file chunk to the image store with the specified upload session
      ID and image store

      relative path. This API allows user to resume the file upload operation.
      user doesn't have to

      restart the file upload from scratch whenever there is a network
      interruption. Use this option

      if the file size is large.

      To perform a resumable file upload, user need to break the file into
      multiple chunks and upload

      these chunks to the image store one-by-one. Chunks don't have to be
      uploaded in order. If the

      file represented by the image store relative path already exists, it will
      be overwritten when

      the upload session commits.
    syntax:
      content: >-
        function uploadFileChunk(contentPath: string, sessionId: string,
        contentRange: string, options?:
        Models.ServiceFabricClientUploadFileChunkOptionalParams)
      parameters:
        - id: contentPath
          type:
            - string
          description: Relative path to file or folder in the image store from its root.
        - id: sessionId
          type:
            - string
          description: >-
            A GUID generated by the user for a file uploading. It identifies an
            image store

            upload session which keeps track of all file chunks until it is
            committed.
        - id: contentRange
          type:
            - string
          description: >-
            When uploading file chunks to the image store, the Content-Range
            header

            field need to be configured and sent with a request. The format
            should looks like "bytes

            {First-Byte-Position}-{Last-Byte-Position}/{File-Length}". For
            example, Content-Range:bytes

            300-5000/20000 indicates that user is sending bytes 300 through
            5,000 and the total file length

            is 20,000 bytes.
        - id: options
          type:
            - Models.ServiceFabricClientUploadFileChunkOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.uploadFileChunk_1'
    name: 'uploadFileChunk(string, string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function uploadFileChunk(contentPath: string, sessionId: string,
        contentRange: string, callback: ServiceCallback<void>)
      parameters:
        - id: contentPath
          type:
            - string
          description: Relative path to file or folder in the image store from its root.
        - id: sessionId
          type:
            - string
          description: >-
            A GUID generated by the user for a file uploading. It identifies an
            image store

            upload session which keeps track of all file chunks until it is
            committed.
        - id: contentRange
          type:
            - string
          description: >-
            When uploading file chunks to the image store, the Content-Range
            header

            field need to be configured and sent with a request. The format
            should looks like "bytes

            {First-Byte-Position}-{Last-Byte-Position}/{File-Length}". For
            example, Content-Range:bytes

            300-5000/20000 indicates that user is sending bytes 300 through
            5,000 and the total file length

            is 20,000 bytes.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
  - uid: '@azure/servicefabric.ServiceFabricClient.uploadFileChunk_2'
    name: >-
      uploadFileChunk(string, string, string,
      ServiceFabricClientUploadFileChunkOptionalParams, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function uploadFileChunk(contentPath: string, sessionId: string,
        contentRange: string, options:
        ServiceFabricClientUploadFileChunkOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: contentPath
          type:
            - string
          description: Relative path to file or folder in the image store from its root.
        - id: sessionId
          type:
            - string
          description: >-
            A GUID generated by the user for a file uploading. It identifies an
            image store

            upload session which keeps track of all file chunks until it is
            committed.
        - id: contentRange
          type:
            - string
          description: >-
            When uploading file chunks to the image store, the Content-Range
            header

            field need to be configured and sent with a request. The format
            should looks like "bytes

            {First-Byte-Position}-{Last-Byte-Position}/{File-Length}". For
            example, Content-Range:bytes

            300-5000/20000 indicates that user is sending bytes 300 through
            5,000 and the total file length

            is 20,000 bytes.
        - id: options
          type:
            - >-
              @azure/servicefabric.ServiceFabricClientUploadFileChunkOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/servicefabric'
references:
  - uid: '@azure/servicefabric.ServiceFabricClientContext'
    name: ServiceFabricClientContext
    spec.typeScript:
      - name: ServiceFabricClientContext
        fullName: ServiceFabricClientContext
        uid: '@azure/servicefabric.ServiceFabricClientContext'
  - uid: '@azure/servicefabric.MeshApplication'
    name: MeshApplication
    spec.typeScript:
      - name: MeshApplication
        fullName: MeshApplication
        uid: '@azure/servicefabric.MeshApplication'
  - uid: '@azure/servicefabric.MeshCodePackage'
    name: MeshCodePackage
    spec.typeScript:
      - name: MeshCodePackage
        fullName: MeshCodePackage
        uid: '@azure/servicefabric.MeshCodePackage'
  - uid: '@azure/servicefabric.MeshGateway'
    name: MeshGateway
    spec.typeScript:
      - name: MeshGateway
        fullName: MeshGateway
        uid: '@azure/servicefabric.MeshGateway'
  - uid: '@azure/servicefabric.MeshNetwork'
    name: MeshNetwork
    spec.typeScript:
      - name: MeshNetwork
        fullName: MeshNetwork
        uid: '@azure/servicefabric.MeshNetwork'
  - uid: '@azure/servicefabric.MeshSecret'
    name: MeshSecret
    spec.typeScript:
      - name: MeshSecret
        fullName: MeshSecret
        uid: '@azure/servicefabric.MeshSecret'
  - uid: '@azure/servicefabric.MeshSecretValue'
    name: MeshSecretValue
    spec.typeScript:
      - name: MeshSecretValue
        fullName: MeshSecretValue
        uid: '@azure/servicefabric.MeshSecretValue'
  - uid: '@azure/servicefabric.MeshService'
    name: MeshService
    spec.typeScript:
      - name: MeshService
        fullName: MeshService
        uid: '@azure/servicefabric.MeshService'
  - uid: '@azure/servicefabric.MeshServiceReplica'
    name: MeshServiceReplica
    spec.typeScript:
      - name: MeshServiceReplica
        fullName: MeshServiceReplica
        uid: '@azure/servicefabric.MeshServiceReplica'
  - uid: '@azure/servicefabric.MeshVolume'
    name: MeshVolume
    spec.typeScript:
      - name: MeshVolume
        fullName: MeshVolume
        uid: '@azure/servicefabric.MeshVolume'
  - uid: '@azure/servicefabric.ConfigParameterOverride[]'
    name: 'ConfigParameterOverride[]'
    spec.typeScript:
      - name: ConfigParameterOverride
        fullName: ConfigParameterOverride
        uid: '@azure/servicefabric.ConfigParameterOverride'
      - name: '[]'
        fullName: '[]'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientAddConfigurationParameterOverridesOptionalParams
    name: ServiceFabricClientAddConfigurationParameterOverridesOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientAddConfigurationParameterOverridesOptionalParams
        fullName: ServiceFabricClientAddConfigurationParameterOverridesOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientAddConfigurationParameterOverridesOptionalParams
  - uid: '@azure/servicefabric.ServiceFabricClientBackupPartitionOptionalParams'
    name: ServiceFabricClientBackupPartitionOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientBackupPartitionOptionalParams
        fullName: ServiceFabricClientBackupPartitionOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientBackupPartitionOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientCancelOperationOptionalParams'
    name: ServiceFabricClientCancelOperationOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientCancelOperationOptionalParams
        fullName: ServiceFabricClientCancelOperationOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientCancelOperationOptionalParams'
  - uid: '@azure/servicefabric.RepairTaskCancelDescription'
    name: RepairTaskCancelDescription
    spec.typeScript:
      - name: RepairTaskCancelDescription
        fullName: RepairTaskCancelDescription
        uid: '@azure/servicefabric.RepairTaskCancelDescription'
  - uid: ServiceCallback<@azure/servicefabric.RepairTaskUpdateInfo>
    name: RepairTaskUpdateInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: RepairTaskUpdateInfo
        fullName: RepairTaskUpdateInfo
        uid: '@azure/servicefabric.RepairTaskUpdateInfo'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientCommitImageStoreUploadSessionOptionalParams
    name: ServiceFabricClientCommitImageStoreUploadSessionOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientCommitImageStoreUploadSessionOptionalParams
        fullName: ServiceFabricClientCommitImageStoreUploadSessionOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientCommitImageStoreUploadSessionOptionalParams
  - uid: '@azure/servicefabric.ImageStoreCopyDescription'
    name: ImageStoreCopyDescription
    spec.typeScript:
      - name: ImageStoreCopyDescription
        fullName: ImageStoreCopyDescription
        uid: '@azure/servicefabric.ImageStoreCopyDescription'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientCopyImageStoreContentOptionalParams
    name: ServiceFabricClientCopyImageStoreContentOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientCopyImageStoreContentOptionalParams
        fullName: ServiceFabricClientCopyImageStoreContentOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientCopyImageStoreContentOptionalParams
  - uid: '@azure/servicefabric.ApplicationDescription'
    name: ApplicationDescription
    spec.typeScript:
      - name: ApplicationDescription
        fullName: ApplicationDescription
        uid: '@azure/servicefabric.ApplicationDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientCreateApplicationOptionalParams'
    name: ServiceFabricClientCreateApplicationOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientCreateApplicationOptionalParams
        fullName: ServiceFabricClientCreateApplicationOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientCreateApplicationOptionalParams
  - uid: '@azure/servicefabric.BackupPolicyDescription'
    name: BackupPolicyDescription
    spec.typeScript:
      - name: BackupPolicyDescription
        fullName: BackupPolicyDescription
        uid: '@azure/servicefabric.BackupPolicyDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientCreateBackupPolicyOptionalParams'
    name: ServiceFabricClientCreateBackupPolicyOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientCreateBackupPolicyOptionalParams
        fullName: ServiceFabricClientCreateBackupPolicyOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientCreateBackupPolicyOptionalParams
  - uid: '@azure/servicefabric.CreateComposeDeploymentDescription'
    name: CreateComposeDeploymentDescription
    spec.typeScript:
      - name: CreateComposeDeploymentDescription
        fullName: CreateComposeDeploymentDescription
        uid: '@azure/servicefabric.CreateComposeDeploymentDescription'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientCreateComposeDeploymentOptionalParams
    name: ServiceFabricClientCreateComposeDeploymentOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientCreateComposeDeploymentOptionalParams
        fullName: ServiceFabricClientCreateComposeDeploymentOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientCreateComposeDeploymentOptionalParams
  - uid: '@azure/servicefabric.NameDescription'
    name: NameDescription
    spec.typeScript:
      - name: NameDescription
        fullName: NameDescription
        uid: '@azure/servicefabric.NameDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientCreateNameOptionalParams'
    name: ServiceFabricClientCreateNameOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientCreateNameOptionalParams
        fullName: ServiceFabricClientCreateNameOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientCreateNameOptionalParams'
  - uid: '@azure/servicefabric.RepairTask'
    name: RepairTask
    spec.typeScript:
      - name: RepairTask
        fullName: RepairTask
        uid: '@azure/servicefabric.RepairTask'
  - uid: '@azure/servicefabric.ServiceFabricClientCreateServiceOptionalParams'
    name: ServiceFabricClientCreateServiceOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientCreateServiceOptionalParams
        fullName: ServiceFabricClientCreateServiceOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientCreateServiceOptionalParams'
  - uid: '@azure/servicefabric.ServiceFromTemplateDescription'
    name: ServiceFromTemplateDescription
    spec.typeScript:
      - name: ServiceFromTemplateDescription
        fullName: ServiceFromTemplateDescription
        uid: '@azure/servicefabric.ServiceFromTemplateDescription'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientCreateServiceFromTemplateOptionalParams
    name: ServiceFabricClientCreateServiceFromTemplateOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientCreateServiceFromTemplateOptionalParams
        fullName: ServiceFabricClientCreateServiceFromTemplateOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientCreateServiceFromTemplateOptionalParams
  - uid: '@azure/servicefabric.ServiceFabricClientDeleteApplicationOptionalParams'
    name: ServiceFabricClientDeleteApplicationOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientDeleteApplicationOptionalParams
        fullName: ServiceFabricClientDeleteApplicationOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientDeleteApplicationOptionalParams
  - uid: '@azure/servicefabric.ServiceFabricClientDeleteBackupPolicyOptionalParams'
    name: ServiceFabricClientDeleteBackupPolicyOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientDeleteBackupPolicyOptionalParams
        fullName: ServiceFabricClientDeleteBackupPolicyOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientDeleteBackupPolicyOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientDeleteImageStoreContentOptionalParams
    name: ServiceFabricClientDeleteImageStoreContentOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientDeleteImageStoreContentOptionalParams
        fullName: ServiceFabricClientDeleteImageStoreContentOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientDeleteImageStoreContentOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientDeleteImageStoreUploadSessionOptionalParams
    name: ServiceFabricClientDeleteImageStoreUploadSessionOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientDeleteImageStoreUploadSessionOptionalParams
        fullName: ServiceFabricClientDeleteImageStoreUploadSessionOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientDeleteImageStoreUploadSessionOptionalParams
  - uid: '@azure/servicefabric.ServiceFabricClientDeleteNameOptionalParams'
    name: ServiceFabricClientDeleteNameOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientDeleteNameOptionalParams
        fullName: ServiceFabricClientDeleteNameOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientDeleteNameOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientDeletePropertyOptionalParams'
    name: ServiceFabricClientDeletePropertyOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientDeletePropertyOptionalParams
        fullName: ServiceFabricClientDeletePropertyOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientDeletePropertyOptionalParams'
  - uid: '@azure/servicefabric.RepairTaskDeleteDescription'
    name: RepairTaskDeleteDescription
    spec.typeScript:
      - name: RepairTaskDeleteDescription
        fullName: RepairTaskDeleteDescription
        uid: '@azure/servicefabric.RepairTaskDeleteDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientDeleteServiceOptionalParams'
    name: ServiceFabricClientDeleteServiceOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientDeleteServiceOptionalParams
        fullName: ServiceFabricClientDeleteServiceOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientDeleteServiceOptionalParams'
  - uid: '@azure/servicefabric.DeployServicePackageToNodeDescription'
    name: DeployServicePackageToNodeDescription
    spec.typeScript:
      - name: DeployServicePackageToNodeDescription
        fullName: DeployServicePackageToNodeDescription
        uid: '@azure/servicefabric.DeployServicePackageToNodeDescription'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientDeployServicePackageToNodeOptionalParams
    name: ServiceFabricClientDeployServicePackageToNodeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientDeployServicePackageToNodeOptionalParams
        fullName: ServiceFabricClientDeployServicePackageToNodeOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientDeployServicePackageToNodeOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientDisableApplicationBackupOptionalParams
    name: ServiceFabricClientDisableApplicationBackupOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientDisableApplicationBackupOptionalParams
        fullName: ServiceFabricClientDisableApplicationBackupOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientDisableApplicationBackupOptionalParams
  - uid: '@azure/servicefabric.DeactivationIntentDescription'
    name: DeactivationIntentDescription
    spec.typeScript:
      - name: DeactivationIntentDescription
        fullName: DeactivationIntentDescription
        uid: '@azure/servicefabric.DeactivationIntentDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientDisableNodeOptionalParams'
    name: ServiceFabricClientDisableNodeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientDisableNodeOptionalParams
        fullName: ServiceFabricClientDisableNodeOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientDisableNodeOptionalParams'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientDisablePartitionBackupOptionalParams
    name: ServiceFabricClientDisablePartitionBackupOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientDisablePartitionBackupOptionalParams
        fullName: ServiceFabricClientDisablePartitionBackupOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientDisablePartitionBackupOptionalParams
  - uid: '@azure/servicefabric.ServiceFabricClientDisableServiceBackupOptionalParams'
    name: ServiceFabricClientDisableServiceBackupOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientDisableServiceBackupOptionalParams
        fullName: ServiceFabricClientDisableServiceBackupOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientDisableServiceBackupOptionalParams
  - uid: '@azure/servicefabric.EnableBackupDescription'
    name: EnableBackupDescription
    spec.typeScript:
      - name: EnableBackupDescription
        fullName: EnableBackupDescription
        uid: '@azure/servicefabric.EnableBackupDescription'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientEnableApplicationBackupOptionalParams
    name: ServiceFabricClientEnableApplicationBackupOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientEnableApplicationBackupOptionalParams
        fullName: ServiceFabricClientEnableApplicationBackupOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientEnableApplicationBackupOptionalParams
  - uid: '@azure/servicefabric.ServiceFabricClientEnableNodeOptionalParams'
    name: ServiceFabricClientEnableNodeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientEnableNodeOptionalParams
        fullName: ServiceFabricClientEnableNodeOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientEnableNodeOptionalParams'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientEnablePartitionBackupOptionalParams
    name: ServiceFabricClientEnablePartitionBackupOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientEnablePartitionBackupOptionalParams
        fullName: ServiceFabricClientEnablePartitionBackupOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientEnablePartitionBackupOptionalParams
  - uid: '@azure/servicefabric.ServiceFabricClientEnableServiceBackupOptionalParams'
    name: ServiceFabricClientEnableServiceBackupOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientEnableServiceBackupOptionalParams
        fullName: ServiceFabricClientEnableServiceBackupOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientEnableServiceBackupOptionalParams
  - uid: '@azure/servicefabric.RepairTaskApproveDescription'
    name: RepairTaskApproveDescription
    spec.typeScript:
      - name: RepairTaskApproveDescription
        fullName: RepairTaskApproveDescription
        uid: '@azure/servicefabric.RepairTaskApproveDescription'
  - uid: ServiceCallback<@azure/servicefabric.AadMetadataObject>
    name: AadMetadataObject>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: AadMetadataObject
        fullName: AadMetadataObject
        uid: '@azure/servicefabric.AadMetadataObject'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetAadMetadataOptionalParams'
    name: ServiceFabricClientGetAadMetadataOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetAadMetadataOptionalParams
        fullName: ServiceFabricClientGetAadMetadataOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetAadMetadataOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.PagedBackupEntityList>
    name: PagedBackupEntityList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PagedBackupEntityList
        fullName: PagedBackupEntityList
        uid: '@azure/servicefabric.PagedBackupEntityList'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetAllEntitiesBackedUpByPolicyOptionalParams
    name: ServiceFabricClientGetAllEntitiesBackedUpByPolicyOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetAllEntitiesBackedUpByPolicyOptionalParams
        fullName: ServiceFabricClientGetAllEntitiesBackedUpByPolicyOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetAllEntitiesBackedUpByPolicyOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.PagedBackupConfigurationInfoList>
    name: PagedBackupConfigurationInfoList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PagedBackupConfigurationInfoList
        fullName: PagedBackupConfigurationInfoList
        uid: '@azure/servicefabric.PagedBackupConfigurationInfoList'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetApplicationBackupConfigurationInfoOptionalParams
    name: ServiceFabricClientGetApplicationBackupConfigurationInfoOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetApplicationBackupConfigurationInfoOptionalParams
        fullName: ServiceFabricClientGetApplicationBackupConfigurationInfoOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetApplicationBackupConfigurationInfoOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.PagedBackupInfoList>
    name: PagedBackupInfoList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PagedBackupInfoList
        fullName: PagedBackupInfoList
        uid: '@azure/servicefabric.PagedBackupInfoList'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetApplicationBackupListOptionalParams
    name: ServiceFabricClientGetApplicationBackupListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetApplicationBackupListOptionalParams
        fullName: ServiceFabricClientGetApplicationBackupListOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetApplicationBackupListOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetApplicationEventListOptionalParams
    name: ServiceFabricClientGetApplicationEventListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetApplicationEventListOptionalParams
        fullName: ServiceFabricClientGetApplicationEventListOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetApplicationEventListOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.ApplicationHealth>
    name: ApplicationHealth>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ApplicationHealth
        fullName: ApplicationHealth
        uid: '@azure/servicefabric.ApplicationHealth'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetApplicationHealthOptionalParams'
    name: ServiceFabricClientGetApplicationHealthOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetApplicationHealthOptionalParams
        fullName: ServiceFabricClientGetApplicationHealthOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetApplicationHealthOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetApplicationHealthUsingPolicyOptionalParams
    name: ServiceFabricClientGetApplicationHealthUsingPolicyOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetApplicationHealthUsingPolicyOptionalParams
        fullName: ServiceFabricClientGetApplicationHealthUsingPolicyOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetApplicationHealthUsingPolicyOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.ApplicationInfo>
    name: ApplicationInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ApplicationInfo
        fullName: ApplicationInfo
        uid: '@azure/servicefabric.ApplicationInfo'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetApplicationInfoOptionalParams'
    name: ServiceFabricClientGetApplicationInfoOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetApplicationInfoOptionalParams
        fullName: ServiceFabricClientGetApplicationInfoOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetApplicationInfoOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.PagedApplicationInfoList>
    name: PagedApplicationInfoList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PagedApplicationInfoList
        fullName: PagedApplicationInfoList
        uid: '@azure/servicefabric.PagedApplicationInfoList'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetApplicationInfoListOptionalParams
    name: ServiceFabricClientGetApplicationInfoListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetApplicationInfoListOptionalParams
        fullName: ServiceFabricClientGetApplicationInfoListOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetApplicationInfoListOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.ApplicationLoadInfo>
    name: ApplicationLoadInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ApplicationLoadInfo
        fullName: ApplicationLoadInfo
        uid: '@azure/servicefabric.ApplicationLoadInfo'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetApplicationLoadInfoOptionalParams
    name: ServiceFabricClientGetApplicationLoadInfoOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetApplicationLoadInfoOptionalParams
        fullName: ServiceFabricClientGetApplicationLoadInfoOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetApplicationLoadInfoOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.ApplicationTypeManifest>
    name: ApplicationTypeManifest>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ApplicationTypeManifest
        fullName: ApplicationTypeManifest
        uid: '@azure/servicefabric.ApplicationTypeManifest'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetApplicationManifestOptionalParams
    name: ServiceFabricClientGetApplicationManifestOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetApplicationManifestOptionalParams
        fullName: ServiceFabricClientGetApplicationManifestOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetApplicationManifestOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.ApplicationNameInfo>
    name: ApplicationNameInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ApplicationNameInfo
        fullName: ApplicationNameInfo
        uid: '@azure/servicefabric.ApplicationNameInfo'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetApplicationNameInfoOptionalParams
    name: ServiceFabricClientGetApplicationNameInfoOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetApplicationNameInfoOptionalParams
        fullName: ServiceFabricClientGetApplicationNameInfoOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetApplicationNameInfoOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.PagedApplicationTypeInfoList>
    name: PagedApplicationTypeInfoList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PagedApplicationTypeInfoList
        fullName: PagedApplicationTypeInfoList
        uid: '@azure/servicefabric.PagedApplicationTypeInfoList'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetApplicationTypeInfoListOptionalParams
    name: ServiceFabricClientGetApplicationTypeInfoListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetApplicationTypeInfoListOptionalParams
        fullName: ServiceFabricClientGetApplicationTypeInfoListOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetApplicationTypeInfoListOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetApplicationTypeInfoListByNameOptionalParams
    name: ServiceFabricClientGetApplicationTypeInfoListByNameOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetApplicationTypeInfoListByNameOptionalParams
        fullName: ServiceFabricClientGetApplicationTypeInfoListByNameOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetApplicationTypeInfoListByNameOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.ApplicationUpgradeProgressInfo>
    name: ApplicationUpgradeProgressInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ApplicationUpgradeProgressInfo
        fullName: ApplicationUpgradeProgressInfo
        uid: '@azure/servicefabric.ApplicationUpgradeProgressInfo'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetApplicationUpgradeOptionalParams
    name: ServiceFabricClientGetApplicationUpgradeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetApplicationUpgradeOptionalParams
        fullName: ServiceFabricClientGetApplicationUpgradeOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetApplicationUpgradeOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetApplicationsEventListOptionalParams
    name: ServiceFabricClientGetApplicationsEventListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetApplicationsEventListOptionalParams
        fullName: ServiceFabricClientGetApplicationsEventListOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetApplicationsEventListOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.BackupPolicyDescription>
    name: BackupPolicyDescription>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: BackupPolicyDescription
        fullName: BackupPolicyDescription
        uid: '@azure/servicefabric.BackupPolicyDescription'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetBackupPolicyByNameOptionalParams
    name: ServiceFabricClientGetBackupPolicyByNameOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetBackupPolicyByNameOptionalParams
        fullName: ServiceFabricClientGetBackupPolicyByNameOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetBackupPolicyByNameOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.PagedBackupPolicyDescriptionList>
    name: PagedBackupPolicyDescriptionList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PagedBackupPolicyDescriptionList
        fullName: PagedBackupPolicyDescriptionList
        uid: '@azure/servicefabric.PagedBackupPolicyDescriptionList'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetBackupPolicyListOptionalParams'
    name: ServiceFabricClientGetBackupPolicyListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetBackupPolicyListOptionalParams
        fullName: ServiceFabricClientGetBackupPolicyListOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetBackupPolicyListOptionalParams
  - uid: '@azure/servicefabric.GetBackupByStorageQueryDescription'
    name: GetBackupByStorageQueryDescription
    spec.typeScript:
      - name: GetBackupByStorageQueryDescription
        fullName: GetBackupByStorageQueryDescription
        uid: '@azure/servicefabric.GetBackupByStorageQueryDescription'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetBackupsFromBackupLocationOptionalParams
    name: ServiceFabricClientGetBackupsFromBackupLocationOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetBackupsFromBackupLocationOptionalParams
        fullName: ServiceFabricClientGetBackupsFromBackupLocationOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetBackupsFromBackupLocationOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.Chaos>
    name: Chaos>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: Chaos
        fullName: Chaos
        uid: '@azure/servicefabric.Chaos'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetChaosOptionalParams'
    name: ServiceFabricClientGetChaosOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetChaosOptionalParams
        fullName: ServiceFabricClientGetChaosOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetChaosOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.ChaosEventsSegment>
    name: ChaosEventsSegment>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ChaosEventsSegment
        fullName: ChaosEventsSegment
        uid: '@azure/servicefabric.ChaosEventsSegment'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetChaosEventsOptionalParams'
    name: ServiceFabricClientGetChaosEventsOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetChaosEventsOptionalParams
        fullName: ServiceFabricClientGetChaosEventsOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetChaosEventsOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.ChaosScheduleDescription>
    name: ChaosScheduleDescription>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ChaosScheduleDescription
        fullName: ChaosScheduleDescription
        uid: '@azure/servicefabric.ChaosScheduleDescription'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetChaosScheduleOptionalParams'
    name: ServiceFabricClientGetChaosScheduleOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetChaosScheduleOptionalParams
        fullName: ServiceFabricClientGetChaosScheduleOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetChaosScheduleOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.ClusterConfiguration>
    name: ClusterConfiguration>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ClusterConfiguration
        fullName: ClusterConfiguration
        uid: '@azure/servicefabric.ClusterConfiguration'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetClusterConfigurationOptionalParams
    name: ServiceFabricClientGetClusterConfigurationOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetClusterConfigurationOptionalParams
        fullName: ServiceFabricClientGetClusterConfigurationOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetClusterConfigurationOptionalParams
  - uid: >-
      ServiceCallback<@azure/servicefabric.ClusterConfigurationUpgradeStatusInfo>
    name: ClusterConfigurationUpgradeStatusInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ClusterConfigurationUpgradeStatusInfo
        fullName: ClusterConfigurationUpgradeStatusInfo
        uid: '@azure/servicefabric.ClusterConfigurationUpgradeStatusInfo'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetClusterConfigurationUpgradeStatusOptionalParams
    name: ServiceFabricClientGetClusterConfigurationUpgradeStatusOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetClusterConfigurationUpgradeStatusOptionalParams
        fullName: ServiceFabricClientGetClusterConfigurationUpgradeStatusOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetClusterConfigurationUpgradeStatusOptionalParams
  - uid: '@azure/servicefabric.ServiceFabricClientGetClusterEventListOptionalParams'
    name: ServiceFabricClientGetClusterEventListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetClusterEventListOptionalParams
        fullName: ServiceFabricClientGetClusterEventListOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetClusterEventListOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.ClusterHealth>
    name: ClusterHealth>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ClusterHealth
        fullName: ClusterHealth
        uid: '@azure/servicefabric.ClusterHealth'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetClusterHealthOptionalParams'
    name: ServiceFabricClientGetClusterHealthOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetClusterHealthOptionalParams
        fullName: ServiceFabricClientGetClusterHealthOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetClusterHealthOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.ClusterHealthChunk>
    name: ClusterHealthChunk>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ClusterHealthChunk
        fullName: ClusterHealthChunk
        uid: '@azure/servicefabric.ClusterHealthChunk'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetClusterHealthChunkOptionalParams
    name: ServiceFabricClientGetClusterHealthChunkOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetClusterHealthChunkOptionalParams
        fullName: ServiceFabricClientGetClusterHealthChunkOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetClusterHealthChunkOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams
    name: >-
      ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams
    spec.typeScript:
      - name: >-
          ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams
        fullName: >-
          ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetClusterHealthUsingPolicyOptionalParams
    name: ServiceFabricClientGetClusterHealthUsingPolicyOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetClusterHealthUsingPolicyOptionalParams
        fullName: ServiceFabricClientGetClusterHealthUsingPolicyOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetClusterHealthUsingPolicyOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.ClusterLoadInfo>
    name: ClusterLoadInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ClusterLoadInfo
        fullName: ClusterLoadInfo
        uid: '@azure/servicefabric.ClusterLoadInfo'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetClusterLoadOptionalParams'
    name: ServiceFabricClientGetClusterLoadOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetClusterLoadOptionalParams
        fullName: ServiceFabricClientGetClusterLoadOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetClusterLoadOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.ClusterManifest>
    name: ClusterManifest>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ClusterManifest
        fullName: ClusterManifest
        uid: '@azure/servicefabric.ClusterManifest'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetClusterManifestOptionalParams'
    name: ServiceFabricClientGetClusterManifestOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetClusterManifestOptionalParams
        fullName: ServiceFabricClientGetClusterManifestOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetClusterManifestOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.ClusterUpgradeProgressObject>
    name: ClusterUpgradeProgressObject>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ClusterUpgradeProgressObject
        fullName: ClusterUpgradeProgressObject
        uid: '@azure/servicefabric.ClusterUpgradeProgressObject'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetClusterUpgradeProgressOptionalParams
    name: ServiceFabricClientGetClusterUpgradeProgressOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetClusterUpgradeProgressOptionalParams
        fullName: ServiceFabricClientGetClusterUpgradeProgressOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetClusterUpgradeProgressOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.ClusterVersion>
    name: ClusterVersion>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ClusterVersion
        fullName: ClusterVersion
        uid: '@azure/servicefabric.ClusterVersion'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetClusterVersionOptionalParams'
    name: ServiceFabricClientGetClusterVersionOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetClusterVersionOptionalParams
        fullName: ServiceFabricClientGetClusterVersionOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetClusterVersionOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.ComposeDeploymentStatusInfo>
    name: ComposeDeploymentStatusInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ComposeDeploymentStatusInfo
        fullName: ComposeDeploymentStatusInfo
        uid: '@azure/servicefabric.ComposeDeploymentStatusInfo'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetComposeDeploymentStatusOptionalParams
    name: ServiceFabricClientGetComposeDeploymentStatusOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetComposeDeploymentStatusOptionalParams
        fullName: ServiceFabricClientGetComposeDeploymentStatusOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetComposeDeploymentStatusOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.PagedComposeDeploymentStatusInfoList>
    name: PagedComposeDeploymentStatusInfoList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PagedComposeDeploymentStatusInfoList
        fullName: PagedComposeDeploymentStatusInfoList
        uid: '@azure/servicefabric.PagedComposeDeploymentStatusInfoList'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetComposeDeploymentStatusListOptionalParams
    name: ServiceFabricClientGetComposeDeploymentStatusListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetComposeDeploymentStatusListOptionalParams
        fullName: ServiceFabricClientGetComposeDeploymentStatusListOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetComposeDeploymentStatusListOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.ComposeDeploymentUpgradeProgressInfo>
    name: ComposeDeploymentUpgradeProgressInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ComposeDeploymentUpgradeProgressInfo
        fullName: ComposeDeploymentUpgradeProgressInfo
        uid: '@azure/servicefabric.ComposeDeploymentUpgradeProgressInfo'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetComposeDeploymentUpgradeProgressOptionalParams
    name: ServiceFabricClientGetComposeDeploymentUpgradeProgressOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetComposeDeploymentUpgradeProgressOptionalParams
        fullName: ServiceFabricClientGetComposeDeploymentUpgradeProgressOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetComposeDeploymentUpgradeProgressOptionalParams
  - uid: 'ServiceCallback<@azure/servicefabric.ConfigParameterOverride[]>'
    name: 'ConfigParameterOverride[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ConfigParameterOverride
        fullName: ConfigParameterOverride
        uid: '@azure/servicefabric.ConfigParameterOverride'
      - name: '[]>'
        fullName: '[]>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetConfigurationOverridesOptionalParams
    name: ServiceFabricClientGetConfigurationOverridesOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetConfigurationOverridesOptionalParams
        fullName: ServiceFabricClientGetConfigurationOverridesOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetConfigurationOverridesOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.ContainerLogs>
    name: ContainerLogs>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ContainerLogs
        fullName: ContainerLogs
        uid: '@azure/servicefabric.ContainerLogs'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetContainerLogsDeployedOnNodeOptionalParams
    name: ServiceFabricClientGetContainerLogsDeployedOnNodeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetContainerLogsDeployedOnNodeOptionalParams
        fullName: ServiceFabricClientGetContainerLogsDeployedOnNodeOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetContainerLogsDeployedOnNodeOptionalParams
  - uid: 'ServiceCallback<@azure/servicefabric.ContainerInstanceEvent[]>'
    name: 'ContainerInstanceEvent[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ContainerInstanceEvent
        fullName: ContainerInstanceEvent
        uid: '@azure/servicefabric.ContainerInstanceEvent'
      - name: '[]>'
        fullName: '[]>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetContainersEventListOptionalParams
    name: ServiceFabricClientGetContainersEventListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetContainersEventListOptionalParams
        fullName: ServiceFabricClientGetContainersEventListOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetContainersEventListOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetCorrelatedEventListOptionalParams
    name: ServiceFabricClientGetCorrelatedEventListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetCorrelatedEventListOptionalParams
        fullName: ServiceFabricClientGetCorrelatedEventListOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetCorrelatedEventListOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.PartitionDataLossProgress>
    name: PartitionDataLossProgress>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PartitionDataLossProgress
        fullName: PartitionDataLossProgress
        uid: '@azure/servicefabric.PartitionDataLossProgress'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetDataLossProgressOptionalParams'
    name: ServiceFabricClientGetDataLossProgressOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetDataLossProgressOptionalParams
        fullName: ServiceFabricClientGetDataLossProgressOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetDataLossProgressOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.DeployedApplicationHealth>
    name: DeployedApplicationHealth>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DeployedApplicationHealth
        fullName: DeployedApplicationHealth
        uid: '@azure/servicefabric.DeployedApplicationHealth'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetDeployedApplicationHealthOptionalParams
    name: ServiceFabricClientGetDeployedApplicationHealthOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetDeployedApplicationHealthOptionalParams
        fullName: ServiceFabricClientGetDeployedApplicationHealthOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetDeployedApplicationHealthOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetDeployedApplicationHealthUsingPolicyOptionalParams
    name: ServiceFabricClientGetDeployedApplicationHealthUsingPolicyOptionalParams
    spec.typeScript:
      - name: >-
          ServiceFabricClientGetDeployedApplicationHealthUsingPolicyOptionalParams
        fullName: >-
          ServiceFabricClientGetDeployedApplicationHealthUsingPolicyOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetDeployedApplicationHealthUsingPolicyOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.DeployedApplicationInfo>
    name: DeployedApplicationInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DeployedApplicationInfo
        fullName: DeployedApplicationInfo
        uid: '@azure/servicefabric.DeployedApplicationInfo'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetDeployedApplicationInfoOptionalParams
    name: ServiceFabricClientGetDeployedApplicationInfoOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetDeployedApplicationInfoOptionalParams
        fullName: ServiceFabricClientGetDeployedApplicationInfoOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetDeployedApplicationInfoOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.PagedDeployedApplicationInfoList>
    name: PagedDeployedApplicationInfoList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PagedDeployedApplicationInfoList
        fullName: PagedDeployedApplicationInfoList
        uid: '@azure/servicefabric.PagedDeployedApplicationInfoList'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetDeployedApplicationInfoListOptionalParams
    name: ServiceFabricClientGetDeployedApplicationInfoListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetDeployedApplicationInfoListOptionalParams
        fullName: ServiceFabricClientGetDeployedApplicationInfoListOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetDeployedApplicationInfoListOptionalParams
  - uid: 'ServiceCallback<@azure/servicefabric.DeployedCodePackageInfo[]>'
    name: 'DeployedCodePackageInfo[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DeployedCodePackageInfo
        fullName: DeployedCodePackageInfo
        uid: '@azure/servicefabric.DeployedCodePackageInfo'
      - name: '[]>'
        fullName: '[]>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetDeployedCodePackageInfoListOptionalParams
    name: ServiceFabricClientGetDeployedCodePackageInfoListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetDeployedCodePackageInfoListOptionalParams
        fullName: ServiceFabricClientGetDeployedCodePackageInfoListOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetDeployedCodePackageInfoListOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.DeployedServicePackageHealth>
    name: DeployedServicePackageHealth>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DeployedServicePackageHealth
        fullName: DeployedServicePackageHealth
        uid: '@azure/servicefabric.DeployedServicePackageHealth'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetDeployedServicePackageHealthOptionalParams
    name: ServiceFabricClientGetDeployedServicePackageHealthOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetDeployedServicePackageHealthOptionalParams
        fullName: ServiceFabricClientGetDeployedServicePackageHealthOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetDeployedServicePackageHealthOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetDeployedServicePackageHealthUsingPolicyOptionalParams
    name: >-
      ServiceFabricClientGetDeployedServicePackageHealthUsingPolicyOptionalParams
    spec.typeScript:
      - name: >-
          ServiceFabricClientGetDeployedServicePackageHealthUsingPolicyOptionalParams
        fullName: >-
          ServiceFabricClientGetDeployedServicePackageHealthUsingPolicyOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetDeployedServicePackageHealthUsingPolicyOptionalParams
  - uid: 'ServiceCallback<@azure/servicefabric.DeployedServicePackageInfo[]>'
    name: 'DeployedServicePackageInfo[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DeployedServicePackageInfo
        fullName: DeployedServicePackageInfo
        uid: '@azure/servicefabric.DeployedServicePackageInfo'
      - name: '[]>'
        fullName: '[]>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetDeployedServicePackageInfoListOptionalParams
    name: ServiceFabricClientGetDeployedServicePackageInfoListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetDeployedServicePackageInfoListOptionalParams
        fullName: ServiceFabricClientGetDeployedServicePackageInfoListOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetDeployedServicePackageInfoListOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetDeployedServicePackageInfoListByNameOptionalParams
    name: ServiceFabricClientGetDeployedServicePackageInfoListByNameOptionalParams
    spec.typeScript:
      - name: >-
          ServiceFabricClientGetDeployedServicePackageInfoListByNameOptionalParams
        fullName: >-
          ServiceFabricClientGetDeployedServicePackageInfoListByNameOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetDeployedServicePackageInfoListByNameOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetDeployedServiceReplicaDetailInfoOptionalParams
    name: ServiceFabricClientGetDeployedServiceReplicaDetailInfoOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetDeployedServiceReplicaDetailInfoOptionalParams
        fullName: ServiceFabricClientGetDeployedServiceReplicaDetailInfoOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetDeployedServiceReplicaDetailInfoOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetDeployedServiceReplicaDetailInfoByPartitionIdOptionalParams
    name: >-
      ServiceFabricClientGetDeployedServiceReplicaDetailInfoByPartitionIdOptionalParams
    spec.typeScript:
      - name: >-
          ServiceFabricClientGetDeployedServiceReplicaDetailInfoByPartitionIdOptionalParams
        fullName: >-
          ServiceFabricClientGetDeployedServiceReplicaDetailInfoByPartitionIdOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetDeployedServiceReplicaDetailInfoByPartitionIdOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetDeployedServiceReplicaInfoListOptionalParams
    name: ServiceFabricClientGetDeployedServiceReplicaInfoListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetDeployedServiceReplicaInfoListOptionalParams
        fullName: ServiceFabricClientGetDeployedServiceReplicaInfoListOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetDeployedServiceReplicaInfoListOptionalParams
  - uid: 'ServiceCallback<@azure/servicefabric.DeployedServiceTypeInfo[]>'
    name: 'DeployedServiceTypeInfo[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DeployedServiceTypeInfo
        fullName: DeployedServiceTypeInfo
        uid: '@azure/servicefabric.DeployedServiceTypeInfo'
      - name: '[]>'
        fullName: '[]>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetDeployedServiceTypeInfoByNameOptionalParams
    name: ServiceFabricClientGetDeployedServiceTypeInfoByNameOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetDeployedServiceTypeInfoByNameOptionalParams
        fullName: ServiceFabricClientGetDeployedServiceTypeInfoByNameOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetDeployedServiceTypeInfoByNameOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetDeployedServiceTypeInfoListOptionalParams
    name: ServiceFabricClientGetDeployedServiceTypeInfoListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetDeployedServiceTypeInfoListOptionalParams
        fullName: ServiceFabricClientGetDeployedServiceTypeInfoListOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetDeployedServiceTypeInfoListOptionalParams
  - uid: 'ServiceCallback<@azure/servicefabric.OperationStatus[]>'
    name: 'OperationStatus[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: OperationStatus
        fullName: OperationStatus
        uid: '@azure/servicefabric.OperationStatus'
      - name: '[]>'
        fullName: '[]>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetFaultOperationListOptionalParams
    name: ServiceFabricClientGetFaultOperationListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetFaultOperationListOptionalParams
        fullName: ServiceFabricClientGetFaultOperationListOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetFaultOperationListOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.ImageStoreContent>
    name: ImageStoreContent>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ImageStoreContent
        fullName: ImageStoreContent
        uid: '@azure/servicefabric.ImageStoreContent'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetImageStoreContentOptionalParams'
    name: ServiceFabricClientGetImageStoreContentOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetImageStoreContentOptionalParams
        fullName: ServiceFabricClientGetImageStoreContentOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetImageStoreContentOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.FolderSizeInfo>
    name: FolderSizeInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: FolderSizeInfo
        fullName: FolderSizeInfo
        uid: '@azure/servicefabric.FolderSizeInfo'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetImageStoreFolderSizeOptionalParams
    name: ServiceFabricClientGetImageStoreFolderSizeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetImageStoreFolderSizeOptionalParams
        fullName: ServiceFabricClientGetImageStoreFolderSizeOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetImageStoreFolderSizeOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.ImageStoreInfo>
    name: ImageStoreInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ImageStoreInfo
        fullName: ImageStoreInfo
        uid: '@azure/servicefabric.ImageStoreInfo'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetImageStoreInfoOptionalParams'
    name: ServiceFabricClientGetImageStoreInfoOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetImageStoreInfoOptionalParams
        fullName: ServiceFabricClientGetImageStoreInfoOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetImageStoreInfoOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetImageStoreRootContentOptionalParams
    name: ServiceFabricClientGetImageStoreRootContentOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetImageStoreRootContentOptionalParams
        fullName: ServiceFabricClientGetImageStoreRootContentOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetImageStoreRootContentOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetImageStoreRootFolderSizeOptionalParams
    name: ServiceFabricClientGetImageStoreRootFolderSizeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetImageStoreRootFolderSizeOptionalParams
        fullName: ServiceFabricClientGetImageStoreRootFolderSizeOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetImageStoreRootFolderSizeOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.UploadSession>
    name: UploadSession>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: UploadSession
        fullName: UploadSession
        uid: '@azure/servicefabric.UploadSession'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetImageStoreUploadSessionByIdOptionalParams
    name: ServiceFabricClientGetImageStoreUploadSessionByIdOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetImageStoreUploadSessionByIdOptionalParams
        fullName: ServiceFabricClientGetImageStoreUploadSessionByIdOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetImageStoreUploadSessionByIdOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetImageStoreUploadSessionByPathOptionalParams
    name: ServiceFabricClientGetImageStoreUploadSessionByPathOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetImageStoreUploadSessionByPathOptionalParams
        fullName: ServiceFabricClientGetImageStoreUploadSessionByPathOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetImageStoreUploadSessionByPathOptionalParams
  - uid: '@azure/servicefabric.ServiceFabricClientGetNameExistsInfoOptionalParams'
    name: ServiceFabricClientGetNameExistsInfoOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetNameExistsInfoOptionalParams
        fullName: ServiceFabricClientGetNameExistsInfoOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetNameExistsInfoOptionalParams
  - uid: '@azure/servicefabric.ServiceFabricClientGetNodeEventListOptionalParams'
    name: ServiceFabricClientGetNodeEventListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetNodeEventListOptionalParams
        fullName: ServiceFabricClientGetNodeEventListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetNodeEventListOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.NodeHealth>
    name: NodeHealth>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: NodeHealth
        fullName: NodeHealth
        uid: '@azure/servicefabric.NodeHealth'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetNodeHealthOptionalParams'
    name: ServiceFabricClientGetNodeHealthOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetNodeHealthOptionalParams
        fullName: ServiceFabricClientGetNodeHealthOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetNodeHealthOptionalParams'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetNodeHealthUsingPolicyOptionalParams
    name: ServiceFabricClientGetNodeHealthUsingPolicyOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetNodeHealthUsingPolicyOptionalParams
        fullName: ServiceFabricClientGetNodeHealthUsingPolicyOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetNodeHealthUsingPolicyOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.NodeInfo>
    name: NodeInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: NodeInfo
        fullName: NodeInfo
        uid: '@azure/servicefabric.NodeInfo'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetNodeInfoOptionalParams'
    name: ServiceFabricClientGetNodeInfoOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetNodeInfoOptionalParams
        fullName: ServiceFabricClientGetNodeInfoOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetNodeInfoOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.PagedNodeInfoList>
    name: PagedNodeInfoList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PagedNodeInfoList
        fullName: PagedNodeInfoList
        uid: '@azure/servicefabric.PagedNodeInfoList'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetNodeInfoListOptionalParams'
    name: ServiceFabricClientGetNodeInfoListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetNodeInfoListOptionalParams
        fullName: ServiceFabricClientGetNodeInfoListOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetNodeInfoListOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.NodeLoadInfo>
    name: NodeLoadInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: NodeLoadInfo
        fullName: NodeLoadInfo
        uid: '@azure/servicefabric.NodeLoadInfo'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetNodeLoadInfoOptionalParams'
    name: ServiceFabricClientGetNodeLoadInfoOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetNodeLoadInfoOptionalParams
        fullName: ServiceFabricClientGetNodeLoadInfoOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetNodeLoadInfoOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.NodeTransitionProgress>
    name: NodeTransitionProgress>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: NodeTransitionProgress
        fullName: NodeTransitionProgress
        uid: '@azure/servicefabric.NodeTransitionProgress'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetNodeTransitionProgressOptionalParams
    name: ServiceFabricClientGetNodeTransitionProgressOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetNodeTransitionProgressOptionalParams
        fullName: ServiceFabricClientGetNodeTransitionProgressOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetNodeTransitionProgressOptionalParams
  - uid: '@azure/servicefabric.ServiceFabricClientGetNodesEventListOptionalParams'
    name: ServiceFabricClientGetNodesEventListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetNodesEventListOptionalParams
        fullName: ServiceFabricClientGetNodesEventListOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetNodesEventListOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.PartitionBackupConfigurationInfo>
    name: PartitionBackupConfigurationInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PartitionBackupConfigurationInfo
        fullName: PartitionBackupConfigurationInfo
        uid: '@azure/servicefabric.PartitionBackupConfigurationInfo'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetPartitionBackupConfigurationInfoOptionalParams
    name: ServiceFabricClientGetPartitionBackupConfigurationInfoOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetPartitionBackupConfigurationInfoOptionalParams
        fullName: ServiceFabricClientGetPartitionBackupConfigurationInfoOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetPartitionBackupConfigurationInfoOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetPartitionBackupListOptionalParams
    name: ServiceFabricClientGetPartitionBackupListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetPartitionBackupListOptionalParams
        fullName: ServiceFabricClientGetPartitionBackupListOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetPartitionBackupListOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.BackupProgressInfo>
    name: BackupProgressInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: BackupProgressInfo
        fullName: BackupProgressInfo
        uid: '@azure/servicefabric.BackupProgressInfo'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetPartitionBackupProgressOptionalParams
    name: ServiceFabricClientGetPartitionBackupProgressOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetPartitionBackupProgressOptionalParams
        fullName: ServiceFabricClientGetPartitionBackupProgressOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetPartitionBackupProgressOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetPartitionEventListOptionalParams
    name: ServiceFabricClientGetPartitionEventListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetPartitionEventListOptionalParams
        fullName: ServiceFabricClientGetPartitionEventListOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetPartitionEventListOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.PartitionHealth>
    name: PartitionHealth>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PartitionHealth
        fullName: PartitionHealth
        uid: '@azure/servicefabric.PartitionHealth'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetPartitionHealthOptionalParams'
    name: ServiceFabricClientGetPartitionHealthOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetPartitionHealthOptionalParams
        fullName: ServiceFabricClientGetPartitionHealthOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetPartitionHealthOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetPartitionHealthUsingPolicyOptionalParams
    name: ServiceFabricClientGetPartitionHealthUsingPolicyOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetPartitionHealthUsingPolicyOptionalParams
        fullName: ServiceFabricClientGetPartitionHealthUsingPolicyOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetPartitionHealthUsingPolicyOptionalParams
  - uid: '@azure/servicefabric.ServiceFabricClientGetPartitionInfoOptionalParams'
    name: ServiceFabricClientGetPartitionInfoOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetPartitionInfoOptionalParams
        fullName: ServiceFabricClientGetPartitionInfoOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetPartitionInfoOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.PagedServicePartitionInfoList>
    name: PagedServicePartitionInfoList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PagedServicePartitionInfoList
        fullName: PagedServicePartitionInfoList
        uid: '@azure/servicefabric.PagedServicePartitionInfoList'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetPartitionInfoListOptionalParams'
    name: ServiceFabricClientGetPartitionInfoListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetPartitionInfoListOptionalParams
        fullName: ServiceFabricClientGetPartitionInfoListOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetPartitionInfoListOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.PartitionLoadInformation>
    name: PartitionLoadInformation>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PartitionLoadInformation
        fullName: PartitionLoadInformation
        uid: '@azure/servicefabric.PartitionLoadInformation'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetPartitionLoadInformationOptionalParams
    name: ServiceFabricClientGetPartitionLoadInformationOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetPartitionLoadInformationOptionalParams
        fullName: ServiceFabricClientGetPartitionLoadInformationOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetPartitionLoadInformationOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetPartitionReplicaEventListOptionalParams
    name: ServiceFabricClientGetPartitionReplicaEventListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetPartitionReplicaEventListOptionalParams
        fullName: ServiceFabricClientGetPartitionReplicaEventListOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetPartitionReplicaEventListOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetPartitionReplicasEventListOptionalParams
    name: ServiceFabricClientGetPartitionReplicasEventListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetPartitionReplicasEventListOptionalParams
        fullName: ServiceFabricClientGetPartitionReplicasEventListOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetPartitionReplicasEventListOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.PartitionRestartProgress>
    name: PartitionRestartProgress>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PartitionRestartProgress
        fullName: PartitionRestartProgress
        uid: '@azure/servicefabric.PartitionRestartProgress'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetPartitionRestartProgressOptionalParams
    name: ServiceFabricClientGetPartitionRestartProgressOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetPartitionRestartProgressOptionalParams
        fullName: ServiceFabricClientGetPartitionRestartProgressOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetPartitionRestartProgressOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.RestoreProgressInfo>
    name: RestoreProgressInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: RestoreProgressInfo
        fullName: RestoreProgressInfo
        uid: '@azure/servicefabric.RestoreProgressInfo'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetPartitionRestoreProgressOptionalParams
    name: ServiceFabricClientGetPartitionRestoreProgressOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetPartitionRestoreProgressOptionalParams
        fullName: ServiceFabricClientGetPartitionRestoreProgressOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetPartitionRestoreProgressOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetPartitionsEventListOptionalParams
    name: ServiceFabricClientGetPartitionsEventListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetPartitionsEventListOptionalParams
        fullName: ServiceFabricClientGetPartitionsEventListOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetPartitionsEventListOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.PropertyInfo>
    name: PropertyInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PropertyInfo
        fullName: PropertyInfo
        uid: '@azure/servicefabric.PropertyInfo'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetPropertyInfoOptionalParams'
    name: ServiceFabricClientGetPropertyInfoOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetPropertyInfoOptionalParams
        fullName: ServiceFabricClientGetPropertyInfoOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetPropertyInfoOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.PagedPropertyInfoList>
    name: PagedPropertyInfoList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PagedPropertyInfoList
        fullName: PagedPropertyInfoList
        uid: '@azure/servicefabric.PagedPropertyInfoList'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetPropertyInfoListOptionalParams'
    name: ServiceFabricClientGetPropertyInfoListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetPropertyInfoListOptionalParams
        fullName: ServiceFabricClientGetPropertyInfoListOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetPropertyInfoListOptionalParams
  - uid: 'ServiceCallback<@azure/servicefabric.FabricCodeVersionInfo[]>'
    name: 'FabricCodeVersionInfo[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: FabricCodeVersionInfo
        fullName: FabricCodeVersionInfo
        uid: '@azure/servicefabric.FabricCodeVersionInfo'
      - name: '[]>'
        fullName: '[]>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetProvisionedFabricCodeVersionInfoListOptionalParams
    name: ServiceFabricClientGetProvisionedFabricCodeVersionInfoListOptionalParams
    spec.typeScript:
      - name: >-
          ServiceFabricClientGetProvisionedFabricCodeVersionInfoListOptionalParams
        fullName: >-
          ServiceFabricClientGetProvisionedFabricCodeVersionInfoListOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetProvisionedFabricCodeVersionInfoListOptionalParams
  - uid: 'ServiceCallback<@azure/servicefabric.FabricConfigVersionInfo[]>'
    name: 'FabricConfigVersionInfo[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: FabricConfigVersionInfo
        fullName: FabricConfigVersionInfo
        uid: '@azure/servicefabric.FabricConfigVersionInfo'
      - name: '[]>'
        fullName: '[]>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetProvisionedFabricConfigVersionInfoListOptionalParams
    name: ServiceFabricClientGetProvisionedFabricConfigVersionInfoListOptionalParams
    spec.typeScript:
      - name: >-
          ServiceFabricClientGetProvisionedFabricConfigVersionInfoListOptionalParams
        fullName: >-
          ServiceFabricClientGetProvisionedFabricConfigVersionInfoListOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetProvisionedFabricConfigVersionInfoListOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.PartitionQuorumLossProgress>
    name: PartitionQuorumLossProgress>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PartitionQuorumLossProgress
        fullName: PartitionQuorumLossProgress
        uid: '@azure/servicefabric.PartitionQuorumLossProgress'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetQuorumLossProgressOptionalParams
    name: ServiceFabricClientGetQuorumLossProgressOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetQuorumLossProgressOptionalParams
        fullName: ServiceFabricClientGetQuorumLossProgressOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetQuorumLossProgressOptionalParams
  - uid: 'ServiceCallback<@azure/servicefabric.RepairTask[]>'
    name: 'RepairTask[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: RepairTask
        fullName: RepairTask
        uid: '@azure/servicefabric.RepairTask'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetRepairTaskListOptionalParams'
    name: ServiceFabricClientGetRepairTaskListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetRepairTaskListOptionalParams
        fullName: ServiceFabricClientGetRepairTaskListOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetRepairTaskListOptionalParams
  - uid: '@azure/servicefabric.ServiceFabricClientGetReplicaHealthOptionalParams'
    name: ServiceFabricClientGetReplicaHealthOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetReplicaHealthOptionalParams
        fullName: ServiceFabricClientGetReplicaHealthOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetReplicaHealthOptionalParams'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetReplicaHealthUsingPolicyOptionalParams
    name: ServiceFabricClientGetReplicaHealthUsingPolicyOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetReplicaHealthUsingPolicyOptionalParams
        fullName: ServiceFabricClientGetReplicaHealthUsingPolicyOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetReplicaHealthUsingPolicyOptionalParams
  - uid: '@azure/servicefabric.ServiceFabricClientGetReplicaInfoOptionalParams'
    name: ServiceFabricClientGetReplicaInfoOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetReplicaInfoOptionalParams
        fullName: ServiceFabricClientGetReplicaInfoOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetReplicaInfoOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.PagedReplicaInfoList>
    name: PagedReplicaInfoList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PagedReplicaInfoList
        fullName: PagedReplicaInfoList
        uid: '@azure/servicefabric.PagedReplicaInfoList'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetReplicaInfoListOptionalParams'
    name: ServiceFabricClientGetReplicaInfoListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetReplicaInfoListOptionalParams
        fullName: ServiceFabricClientGetReplicaInfoListOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetReplicaInfoListOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetServiceBackupConfigurationInfoOptionalParams
    name: ServiceFabricClientGetServiceBackupConfigurationInfoOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetServiceBackupConfigurationInfoOptionalParams
        fullName: ServiceFabricClientGetServiceBackupConfigurationInfoOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetServiceBackupConfigurationInfoOptionalParams
  - uid: '@azure/servicefabric.ServiceFabricClientGetServiceBackupListOptionalParams'
    name: ServiceFabricClientGetServiceBackupListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetServiceBackupListOptionalParams
        fullName: ServiceFabricClientGetServiceBackupListOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetServiceBackupListOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetServiceDescriptionOptionalParams
    name: ServiceFabricClientGetServiceDescriptionOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetServiceDescriptionOptionalParams
        fullName: ServiceFabricClientGetServiceDescriptionOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetServiceDescriptionOptionalParams
  - uid: '@azure/servicefabric.ServiceFabricClientGetServiceEventListOptionalParams'
    name: ServiceFabricClientGetServiceEventListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetServiceEventListOptionalParams
        fullName: ServiceFabricClientGetServiceEventListOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetServiceEventListOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.ServiceHealth>
    name: ServiceHealth>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ServiceHealth
        fullName: ServiceHealth
        uid: '@azure/servicefabric.ServiceHealth'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetServiceHealthOptionalParams'
    name: ServiceFabricClientGetServiceHealthOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetServiceHealthOptionalParams
        fullName: ServiceFabricClientGetServiceHealthOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetServiceHealthOptionalParams'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetServiceHealthUsingPolicyOptionalParams
    name: ServiceFabricClientGetServiceHealthUsingPolicyOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetServiceHealthUsingPolicyOptionalParams
        fullName: ServiceFabricClientGetServiceHealthUsingPolicyOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetServiceHealthUsingPolicyOptionalParams
  - uid: '@azure/servicefabric.ServiceFabricClientGetServiceInfoOptionalParams'
    name: ServiceFabricClientGetServiceInfoOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetServiceInfoOptionalParams
        fullName: ServiceFabricClientGetServiceInfoOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientGetServiceInfoOptionalParams'
  - uid: ServiceCallback<@azure/servicefabric.PagedServiceInfoList>
    name: PagedServiceInfoList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PagedServiceInfoList
        fullName: PagedServiceInfoList
        uid: '@azure/servicefabric.PagedServiceInfoList'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetServiceInfoListOptionalParams'
    name: ServiceFabricClientGetServiceInfoListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetServiceInfoListOptionalParams
        fullName: ServiceFabricClientGetServiceInfoListOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetServiceInfoListOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.ServiceTypeManifest>
    name: ServiceTypeManifest>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ServiceTypeManifest
        fullName: ServiceTypeManifest
        uid: '@azure/servicefabric.ServiceTypeManifest'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetServiceManifestOptionalParams'
    name: ServiceFabricClientGetServiceManifestOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetServiceManifestOptionalParams
        fullName: ServiceFabricClientGetServiceManifestOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetServiceManifestOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.ServiceNameInfo>
    name: ServiceNameInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ServiceNameInfo
        fullName: ServiceNameInfo
        uid: '@azure/servicefabric.ServiceNameInfo'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetServiceNameInfoOptionalParams'
    name: ServiceFabricClientGetServiceNameInfoOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetServiceNameInfoOptionalParams
        fullName: ServiceFabricClientGetServiceNameInfoOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetServiceNameInfoOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.ServiceTypeInfo>
    name: ServiceTypeInfo>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ServiceTypeInfo
        fullName: ServiceTypeInfo
        uid: '@azure/servicefabric.ServiceTypeInfo'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetServiceTypeInfoByNameOptionalParams
    name: ServiceFabricClientGetServiceTypeInfoByNameOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetServiceTypeInfoByNameOptionalParams
        fullName: ServiceFabricClientGetServiceTypeInfoByNameOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetServiceTypeInfoByNameOptionalParams
  - uid: 'ServiceCallback<@azure/servicefabric.ServiceTypeInfo[]>'
    name: 'ServiceTypeInfo[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ServiceTypeInfo
        fullName: ServiceTypeInfo
        uid: '@azure/servicefabric.ServiceTypeInfo'
      - name: '[]>'
        fullName: '[]>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetServiceTypeInfoListOptionalParams
    name: ServiceFabricClientGetServiceTypeInfoListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetServiceTypeInfoListOptionalParams
        fullName: ServiceFabricClientGetServiceTypeInfoListOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetServiceTypeInfoListOptionalParams
  - uid: '@azure/servicefabric.ServiceFabricClientGetServicesEventListOptionalParams'
    name: ServiceFabricClientGetServicesEventListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetServicesEventListOptionalParams
        fullName: ServiceFabricClientGetServicesEventListOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetServicesEventListOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.PagedSubNameInfoList>
    name: PagedSubNameInfoList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PagedSubNameInfoList
        fullName: PagedSubNameInfoList
        uid: '@azure/servicefabric.PagedSubNameInfoList'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientGetSubNameInfoListOptionalParams'
    name: ServiceFabricClientGetSubNameInfoListOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetSubNameInfoListOptionalParams
        fullName: ServiceFabricClientGetSubNameInfoListOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetSubNameInfoListOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.UnplacedReplicaInformation>
    name: UnplacedReplicaInformation>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: UnplacedReplicaInformation
        fullName: UnplacedReplicaInformation
        uid: '@azure/servicefabric.UnplacedReplicaInformation'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetUnplacedReplicaInformationOptionalParams
    name: ServiceFabricClientGetUnplacedReplicaInformationOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetUnplacedReplicaInformationOptionalParams
        fullName: ServiceFabricClientGetUnplacedReplicaInformationOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetUnplacedReplicaInformationOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.UpgradeOrchestrationServiceState>
    name: UpgradeOrchestrationServiceState>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: UpgradeOrchestrationServiceState
        fullName: UpgradeOrchestrationServiceState
        uid: '@azure/servicefabric.UpgradeOrchestrationServiceState'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientGetUpgradeOrchestrationServiceStateOptionalParams
    name: ServiceFabricClientGetUpgradeOrchestrationServiceStateOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientGetUpgradeOrchestrationServiceStateOptionalParams
        fullName: ServiceFabricClientGetUpgradeOrchestrationServiceStateOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientGetUpgradeOrchestrationServiceStateOptionalParams
  - uid: '@azure/servicefabric.ContainerApiRequestBody'
    name: ContainerApiRequestBody
    spec.typeScript:
      - name: ContainerApiRequestBody
        fullName: ContainerApiRequestBody
        uid: '@azure/servicefabric.ContainerApiRequestBody'
  - uid: ServiceCallback<@azure/servicefabric.ContainerApiResponse>
    name: ContainerApiResponse>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ContainerApiResponse
        fullName: ContainerApiResponse
        uid: '@azure/servicefabric.ContainerApiResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientInvokeContainerApiOptionalParams'
    name: ServiceFabricClientInvokeContainerApiOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientInvokeContainerApiOptionalParams
        fullName: ServiceFabricClientInvokeContainerApiOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientInvokeContainerApiOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientInvokeInfrastructureCommandOptionalParams
    name: ServiceFabricClientInvokeInfrastructureCommandOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientInvokeInfrastructureCommandOptionalParams
        fullName: ServiceFabricClientInvokeInfrastructureCommandOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientInvokeInfrastructureCommandOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientInvokeInfrastructureQueryOptionalParams
    name: ServiceFabricClientInvokeInfrastructureQueryOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientInvokeInfrastructureQueryOptionalParams
        fullName: ServiceFabricClientInvokeInfrastructureQueryOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientInvokeInfrastructureQueryOptionalParams
  - uid: '@azure/servicefabric.ServiceFabricClientMovePrimaryReplicaOptionalParams'
    name: ServiceFabricClientMovePrimaryReplicaOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientMovePrimaryReplicaOptionalParams
        fullName: ServiceFabricClientMovePrimaryReplicaOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientMovePrimaryReplicaOptionalParams
  - uid: '@azure/servicefabric.ServiceFabricClientMoveSecondaryReplicaOptionalParams'
    name: ServiceFabricClientMoveSecondaryReplicaOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientMoveSecondaryReplicaOptionalParams
        fullName: ServiceFabricClientMoveSecondaryReplicaOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientMoveSecondaryReplicaOptionalParams
  - uid: '@azure/servicefabric.ChaosScheduleDescription'
    name: ChaosScheduleDescription
    spec.typeScript:
      - name: ChaosScheduleDescription
        fullName: ChaosScheduleDescription
        uid: '@azure/servicefabric.ChaosScheduleDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientPostChaosScheduleOptionalParams'
    name: ServiceFabricClientPostChaosScheduleOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientPostChaosScheduleOptionalParams
        fullName: ServiceFabricClientPostChaosScheduleOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientPostChaosScheduleOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientProvisionApplicationTypeOptionalParams
    name: ServiceFabricClientProvisionApplicationTypeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientProvisionApplicationTypeOptionalParams
        fullName: ServiceFabricClientProvisionApplicationTypeOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientProvisionApplicationTypeOptionalParams
  - uid: '@azure/servicefabric.ProvisionFabricDescription'
    name: ProvisionFabricDescription
    spec.typeScript:
      - name: ProvisionFabricDescription
        fullName: ProvisionFabricDescription
        uid: '@azure/servicefabric.ProvisionFabricDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientProvisionClusterOptionalParams'
    name: ServiceFabricClientProvisionClusterOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientProvisionClusterOptionalParams
        fullName: ServiceFabricClientProvisionClusterOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientProvisionClusterOptionalParams'
  - uid: '@azure/servicefabric.PropertyDescription'
    name: PropertyDescription
    spec.typeScript:
      - name: PropertyDescription
        fullName: PropertyDescription
        uid: '@azure/servicefabric.PropertyDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientPutPropertyOptionalParams'
    name: ServiceFabricClientPutPropertyOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientPutPropertyOptionalParams
        fullName: ServiceFabricClientPutPropertyOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientPutPropertyOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientRecoverAllPartitionsOptionalParams'
    name: ServiceFabricClientRecoverAllPartitionsOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientRecoverAllPartitionsOptionalParams
        fullName: ServiceFabricClientRecoverAllPartitionsOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientRecoverAllPartitionsOptionalParams
  - uid: '@azure/servicefabric.ServiceFabricClientRecoverPartitionOptionalParams'
    name: ServiceFabricClientRecoverPartitionOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientRecoverPartitionOptionalParams
        fullName: ServiceFabricClientRecoverPartitionOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientRecoverPartitionOptionalParams'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientRecoverServicePartitionsOptionalParams
    name: ServiceFabricClientRecoverServicePartitionsOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientRecoverServicePartitionsOptionalParams
        fullName: ServiceFabricClientRecoverServicePartitionsOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientRecoverServicePartitionsOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientRecoverSystemPartitionsOptionalParams
    name: ServiceFabricClientRecoverSystemPartitionsOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientRecoverSystemPartitionsOptionalParams
        fullName: ServiceFabricClientRecoverSystemPartitionsOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientRecoverSystemPartitionsOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientRemoveComposeDeploymentOptionalParams
    name: ServiceFabricClientRemoveComposeDeploymentOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientRemoveComposeDeploymentOptionalParams
        fullName: ServiceFabricClientRemoveComposeDeploymentOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientRemoveComposeDeploymentOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientRemoveConfigurationOverridesOptionalParams
    name: ServiceFabricClientRemoveConfigurationOverridesOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientRemoveConfigurationOverridesOptionalParams
        fullName: ServiceFabricClientRemoveConfigurationOverridesOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientRemoveConfigurationOverridesOptionalParams
  - uid: '@azure/servicefabric.ServiceFabricClientRemoveNodeStateOptionalParams'
    name: ServiceFabricClientRemoveNodeStateOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientRemoveNodeStateOptionalParams
        fullName: ServiceFabricClientRemoveNodeStateOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientRemoveNodeStateOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientRemoveReplicaOptionalParams'
    name: ServiceFabricClientRemoveReplicaOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientRemoveReplicaOptionalParams
        fullName: ServiceFabricClientRemoveReplicaOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientRemoveReplicaOptionalParams'
  - uid: '@azure/servicefabric.HealthInformation'
    name: HealthInformation
    spec.typeScript:
      - name: HealthInformation
        fullName: HealthInformation
        uid: '@azure/servicefabric.HealthInformation'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientReportApplicationHealthOptionalParams
    name: ServiceFabricClientReportApplicationHealthOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientReportApplicationHealthOptionalParams
        fullName: ServiceFabricClientReportApplicationHealthOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientReportApplicationHealthOptionalParams
  - uid: '@azure/servicefabric.ServiceFabricClientReportClusterHealthOptionalParams'
    name: ServiceFabricClientReportClusterHealthOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientReportClusterHealthOptionalParams
        fullName: ServiceFabricClientReportClusterHealthOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientReportClusterHealthOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientReportDeployedApplicationHealthOptionalParams
    name: ServiceFabricClientReportDeployedApplicationHealthOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientReportDeployedApplicationHealthOptionalParams
        fullName: ServiceFabricClientReportDeployedApplicationHealthOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientReportDeployedApplicationHealthOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientReportDeployedServicePackageHealthOptionalParams
    name: ServiceFabricClientReportDeployedServicePackageHealthOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientReportDeployedServicePackageHealthOptionalParams
        fullName: ServiceFabricClientReportDeployedServicePackageHealthOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientReportDeployedServicePackageHealthOptionalParams
  - uid: '@azure/servicefabric.ServiceFabricClientReportNodeHealthOptionalParams'
    name: ServiceFabricClientReportNodeHealthOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientReportNodeHealthOptionalParams
        fullName: ServiceFabricClientReportNodeHealthOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientReportNodeHealthOptionalParams'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientReportPartitionHealthOptionalParams
    name: ServiceFabricClientReportPartitionHealthOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientReportPartitionHealthOptionalParams
        fullName: ServiceFabricClientReportPartitionHealthOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientReportPartitionHealthOptionalParams
  - uid: '@azure/servicefabric.ServiceFabricClientReportReplicaHealthOptionalParams'
    name: ServiceFabricClientReportReplicaHealthOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientReportReplicaHealthOptionalParams
        fullName: ServiceFabricClientReportReplicaHealthOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientReportReplicaHealthOptionalParams
  - uid: '@azure/servicefabric.ServiceFabricClientReportServiceHealthOptionalParams'
    name: ServiceFabricClientReportServiceHealthOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientReportServiceHealthOptionalParams
        fullName: ServiceFabricClientReportServiceHealthOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientReportServiceHealthOptionalParams
  - uid: '@azure/servicefabric.ServiceFabricClientResetPartitionLoadOptionalParams'
    name: ServiceFabricClientResetPartitionLoadOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientResetPartitionLoadOptionalParams
        fullName: ServiceFabricClientResetPartitionLoadOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientResetPartitionLoadOptionalParams
  - uid: ServiceCallback<@azure/servicefabric.ResolvedServicePartition>
    name: ResolvedServicePartition>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ResolvedServicePartition
        fullName: ResolvedServicePartition
        uid: '@azure/servicefabric.ResolvedServicePartition'
      - name: '>'
        fullName: '>'
  - uid: '@azure/servicefabric.ServiceFabricClientResolveServiceOptionalParams'
    name: ServiceFabricClientResolveServiceOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientResolveServiceOptionalParams
        fullName: ServiceFabricClientResolveServiceOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientResolveServiceOptionalParams'
  - uid: '@azure/servicefabric.RestartDeployedCodePackageDescription'
    name: RestartDeployedCodePackageDescription
    spec.typeScript:
      - name: RestartDeployedCodePackageDescription
        fullName: RestartDeployedCodePackageDescription
        uid: '@azure/servicefabric.RestartDeployedCodePackageDescription'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientRestartDeployedCodePackageOptionalParams
    name: ServiceFabricClientRestartDeployedCodePackageOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientRestartDeployedCodePackageOptionalParams
        fullName: ServiceFabricClientRestartDeployedCodePackageOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientRestartDeployedCodePackageOptionalParams
  - uid: '@azure/servicefabric.RestartNodeDescription'
    name: RestartNodeDescription
    spec.typeScript:
      - name: RestartNodeDescription
        fullName: RestartNodeDescription
        uid: '@azure/servicefabric.RestartNodeDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientRestartNodeOptionalParams'
    name: ServiceFabricClientRestartNodeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientRestartNodeOptionalParams
        fullName: ServiceFabricClientRestartNodeOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientRestartNodeOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientRestartReplicaOptionalParams'
    name: ServiceFabricClientRestartReplicaOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientRestartReplicaOptionalParams
        fullName: ServiceFabricClientRestartReplicaOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientRestartReplicaOptionalParams'
  - uid: '@azure/servicefabric.RestorePartitionDescription'
    name: RestorePartitionDescription
    spec.typeScript:
      - name: RestorePartitionDescription
        fullName: RestorePartitionDescription
        uid: '@azure/servicefabric.RestorePartitionDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientRestorePartitionOptionalParams'
    name: ServiceFabricClientRestorePartitionOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientRestorePartitionOptionalParams
        fullName: ServiceFabricClientRestorePartitionOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientRestorePartitionOptionalParams'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientResumeApplicationBackupOptionalParams
    name: ServiceFabricClientResumeApplicationBackupOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientResumeApplicationBackupOptionalParams
        fullName: ServiceFabricClientResumeApplicationBackupOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientResumeApplicationBackupOptionalParams
  - uid: '@azure/servicefabric.ResumeApplicationUpgradeDescription'
    name: ResumeApplicationUpgradeDescription
    spec.typeScript:
      - name: ResumeApplicationUpgradeDescription
        fullName: ResumeApplicationUpgradeDescription
        uid: '@azure/servicefabric.ResumeApplicationUpgradeDescription'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientResumeApplicationUpgradeOptionalParams
    name: ServiceFabricClientResumeApplicationUpgradeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientResumeApplicationUpgradeOptionalParams
        fullName: ServiceFabricClientResumeApplicationUpgradeOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientResumeApplicationUpgradeOptionalParams
  - uid: '@azure/servicefabric.ResumeClusterUpgradeDescription'
    name: ResumeClusterUpgradeDescription
    spec.typeScript:
      - name: ResumeClusterUpgradeDescription
        fullName: ResumeClusterUpgradeDescription
        uid: '@azure/servicefabric.ResumeClusterUpgradeDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientResumeClusterUpgradeOptionalParams'
    name: ServiceFabricClientResumeClusterUpgradeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientResumeClusterUpgradeOptionalParams
        fullName: ServiceFabricClientResumeClusterUpgradeOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientResumeClusterUpgradeOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientResumePartitionBackupOptionalParams
    name: ServiceFabricClientResumePartitionBackupOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientResumePartitionBackupOptionalParams
        fullName: ServiceFabricClientResumePartitionBackupOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientResumePartitionBackupOptionalParams
  - uid: '@azure/servicefabric.ServiceFabricClientResumeServiceBackupOptionalParams'
    name: ServiceFabricClientResumeServiceBackupOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientResumeServiceBackupOptionalParams
        fullName: ServiceFabricClientResumeServiceBackupOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientResumeServiceBackupOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientRollbackApplicationUpgradeOptionalParams
    name: ServiceFabricClientRollbackApplicationUpgradeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientRollbackApplicationUpgradeOptionalParams
        fullName: ServiceFabricClientRollbackApplicationUpgradeOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientRollbackApplicationUpgradeOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientRollbackClusterUpgradeOptionalParams
    name: ServiceFabricClientRollbackClusterUpgradeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientRollbackClusterUpgradeOptionalParams
        fullName: ServiceFabricClientRollbackClusterUpgradeOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientRollbackClusterUpgradeOptionalParams
  - uid: '@azure/servicefabric.UpgradeOrchestrationServiceState'
    name: UpgradeOrchestrationServiceState
    spec.typeScript:
      - name: UpgradeOrchestrationServiceState
        fullName: UpgradeOrchestrationServiceState
        uid: '@azure/servicefabric.UpgradeOrchestrationServiceState'
  - uid: >-
      ServiceCallback<@azure/servicefabric.UpgradeOrchestrationServiceStateSummary>
    name: UpgradeOrchestrationServiceStateSummary>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: UpgradeOrchestrationServiceStateSummary
        fullName: UpgradeOrchestrationServiceStateSummary
        uid: '@azure/servicefabric.UpgradeOrchestrationServiceStateSummary'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientSetUpgradeOrchestrationServiceStateOptionalParams
    name: ServiceFabricClientSetUpgradeOrchestrationServiceStateOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientSetUpgradeOrchestrationServiceStateOptionalParams
        fullName: ServiceFabricClientSetUpgradeOrchestrationServiceStateOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientSetUpgradeOrchestrationServiceStateOptionalParams
  - uid: '@azure/servicefabric.ApplicationUpgradeDescription'
    name: ApplicationUpgradeDescription
    spec.typeScript:
      - name: ApplicationUpgradeDescription
        fullName: ApplicationUpgradeDescription
        uid: '@azure/servicefabric.ApplicationUpgradeDescription'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientStartApplicationUpgradeOptionalParams
    name: ServiceFabricClientStartApplicationUpgradeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientStartApplicationUpgradeOptionalParams
        fullName: ServiceFabricClientStartApplicationUpgradeOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientStartApplicationUpgradeOptionalParams
  - uid: '@azure/servicefabric.ChaosParameters'
    name: ChaosParameters
    spec.typeScript:
      - name: ChaosParameters
        fullName: ChaosParameters
        uid: '@azure/servicefabric.ChaosParameters'
  - uid: '@azure/servicefabric.ServiceFabricClientStartChaosOptionalParams'
    name: ServiceFabricClientStartChaosOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientStartChaosOptionalParams
        fullName: ServiceFabricClientStartChaosOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientStartChaosOptionalParams'
  - uid: '@azure/servicefabric.ClusterConfigurationUpgradeDescription'
    name: ClusterConfigurationUpgradeDescription
    spec.typeScript:
      - name: ClusterConfigurationUpgradeDescription
        fullName: ClusterConfigurationUpgradeDescription
        uid: '@azure/servicefabric.ClusterConfigurationUpgradeDescription'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientStartClusterConfigurationUpgradeOptionalParams
    name: ServiceFabricClientStartClusterConfigurationUpgradeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientStartClusterConfigurationUpgradeOptionalParams
        fullName: ServiceFabricClientStartClusterConfigurationUpgradeOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientStartClusterConfigurationUpgradeOptionalParams
  - uid: '@azure/servicefabric.StartClusterUpgradeDescription'
    name: StartClusterUpgradeDescription
    spec.typeScript:
      - name: StartClusterUpgradeDescription
        fullName: StartClusterUpgradeDescription
        uid: '@azure/servicefabric.StartClusterUpgradeDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientStartClusterUpgradeOptionalParams'
    name: ServiceFabricClientStartClusterUpgradeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientStartClusterUpgradeOptionalParams
        fullName: ServiceFabricClientStartClusterUpgradeOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientStartClusterUpgradeOptionalParams
  - uid: '@azure/servicefabric.ComposeDeploymentUpgradeDescription'
    name: ComposeDeploymentUpgradeDescription
    spec.typeScript:
      - name: ComposeDeploymentUpgradeDescription
        fullName: ComposeDeploymentUpgradeDescription
        uid: '@azure/servicefabric.ComposeDeploymentUpgradeDescription'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientStartComposeDeploymentUpgradeOptionalParams
    name: ServiceFabricClientStartComposeDeploymentUpgradeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientStartComposeDeploymentUpgradeOptionalParams
        fullName: ServiceFabricClientStartComposeDeploymentUpgradeOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientStartComposeDeploymentUpgradeOptionalParams
  - uid: '@azure/servicefabric.ServiceFabricClientStartDataLossOptionalParams'
    name: ServiceFabricClientStartDataLossOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientStartDataLossOptionalParams
        fullName: ServiceFabricClientStartDataLossOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientStartDataLossOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientStartNodeTransitionOptionalParams'
    name: ServiceFabricClientStartNodeTransitionOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientStartNodeTransitionOptionalParams
        fullName: ServiceFabricClientStartNodeTransitionOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientStartNodeTransitionOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientStartPartitionRestartOptionalParams
    name: ServiceFabricClientStartPartitionRestartOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientStartPartitionRestartOptionalParams
        fullName: ServiceFabricClientStartPartitionRestartOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientStartPartitionRestartOptionalParams
  - uid: '@azure/servicefabric.ServiceFabricClientStartQuorumLossOptionalParams'
    name: ServiceFabricClientStartQuorumLossOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientStartQuorumLossOptionalParams
        fullName: ServiceFabricClientStartQuorumLossOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientStartQuorumLossOptionalParams'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientStartRollbackComposeDeploymentUpgradeOptionalParams
    name: ServiceFabricClientStartRollbackComposeDeploymentUpgradeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientStartRollbackComposeDeploymentUpgradeOptionalParams
        fullName: ServiceFabricClientStartRollbackComposeDeploymentUpgradeOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientStartRollbackComposeDeploymentUpgradeOptionalParams
  - uid: '@azure/servicefabric.ServiceFabricClientStopChaosOptionalParams'
    name: ServiceFabricClientStopChaosOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientStopChaosOptionalParams
        fullName: ServiceFabricClientStopChaosOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientStopChaosOptionalParams'
  - uid: '@azure/servicefabric.PropertyBatchDescriptionList'
    name: PropertyBatchDescriptionList
    spec.typeScript:
      - name: PropertyBatchDescriptionList
        fullName: PropertyBatchDescriptionList
        uid: '@azure/servicefabric.PropertyBatchDescriptionList'
  - uid: '@azure/servicefabric.ServiceFabricClientSubmitPropertyBatchOptionalParams'
    name: ServiceFabricClientSubmitPropertyBatchOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientSubmitPropertyBatchOptionalParams
        fullName: ServiceFabricClientSubmitPropertyBatchOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientSubmitPropertyBatchOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientSuspendApplicationBackupOptionalParams
    name: ServiceFabricClientSuspendApplicationBackupOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientSuspendApplicationBackupOptionalParams
        fullName: ServiceFabricClientSuspendApplicationBackupOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientSuspendApplicationBackupOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientSuspendPartitionBackupOptionalParams
    name: ServiceFabricClientSuspendPartitionBackupOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientSuspendPartitionBackupOptionalParams
        fullName: ServiceFabricClientSuspendPartitionBackupOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientSuspendPartitionBackupOptionalParams
  - uid: '@azure/servicefabric.ServiceFabricClientSuspendServiceBackupOptionalParams'
    name: ServiceFabricClientSuspendServiceBackupOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientSuspendServiceBackupOptionalParams
        fullName: ServiceFabricClientSuspendServiceBackupOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientSuspendServiceBackupOptionalParams
  - uid: >-
      @azure/servicefabric.ServiceFabricClientToggleVerboseServicePlacementHealthReportingOptionalParams
    name: >-
      ServiceFabricClientToggleVerboseServicePlacementHealthReportingOptionalParams
    spec.typeScript:
      - name: >-
          ServiceFabricClientToggleVerboseServicePlacementHealthReportingOptionalParams
        fullName: >-
          ServiceFabricClientToggleVerboseServicePlacementHealthReportingOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientToggleVerboseServicePlacementHealthReportingOptionalParams
  - uid: '@azure/servicefabric.UnprovisionApplicationTypeDescriptionInfo'
    name: UnprovisionApplicationTypeDescriptionInfo
    spec.typeScript:
      - name: UnprovisionApplicationTypeDescriptionInfo
        fullName: UnprovisionApplicationTypeDescriptionInfo
        uid: '@azure/servicefabric.UnprovisionApplicationTypeDescriptionInfo'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientUnprovisionApplicationTypeOptionalParams
    name: ServiceFabricClientUnprovisionApplicationTypeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientUnprovisionApplicationTypeOptionalParams
        fullName: ServiceFabricClientUnprovisionApplicationTypeOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientUnprovisionApplicationTypeOptionalParams
  - uid: '@azure/servicefabric.UnprovisionFabricDescription'
    name: UnprovisionFabricDescription
    spec.typeScript:
      - name: UnprovisionFabricDescription
        fullName: UnprovisionFabricDescription
        uid: '@azure/servicefabric.UnprovisionFabricDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientUnprovisionClusterOptionalParams'
    name: ServiceFabricClientUnprovisionClusterOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientUnprovisionClusterOptionalParams
        fullName: ServiceFabricClientUnprovisionClusterOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientUnprovisionClusterOptionalParams
  - uid: '@azure/servicefabric.ApplicationUpgradeUpdateDescription'
    name: ApplicationUpgradeUpdateDescription
    spec.typeScript:
      - name: ApplicationUpgradeUpdateDescription
        fullName: ApplicationUpgradeUpdateDescription
        uid: '@azure/servicefabric.ApplicationUpgradeUpdateDescription'
  - uid: >-
      @azure/servicefabric.ServiceFabricClientUpdateApplicationUpgradeOptionalParams
    name: ServiceFabricClientUpdateApplicationUpgradeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientUpdateApplicationUpgradeOptionalParams
        fullName: ServiceFabricClientUpdateApplicationUpgradeOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientUpdateApplicationUpgradeOptionalParams
  - uid: '@azure/servicefabric.ServiceFabricClientUpdateBackupPolicyOptionalParams'
    name: ServiceFabricClientUpdateBackupPolicyOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientUpdateBackupPolicyOptionalParams
        fullName: ServiceFabricClientUpdateBackupPolicyOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientUpdateBackupPolicyOptionalParams
  - uid: '@azure/servicefabric.UpdateClusterUpgradeDescription'
    name: UpdateClusterUpgradeDescription
    spec.typeScript:
      - name: UpdateClusterUpgradeDescription
        fullName: UpdateClusterUpgradeDescription
        uid: '@azure/servicefabric.UpdateClusterUpgradeDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientUpdateClusterUpgradeOptionalParams'
    name: ServiceFabricClientUpdateClusterUpgradeOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientUpdateClusterUpgradeOptionalParams
        fullName: ServiceFabricClientUpdateClusterUpgradeOptionalParams
        uid: >-
          @azure/servicefabric.ServiceFabricClientUpdateClusterUpgradeOptionalParams
  - uid: '@azure/servicefabric.RepairTaskUpdateHealthPolicyDescription'
    name: RepairTaskUpdateHealthPolicyDescription
    spec.typeScript:
      - name: RepairTaskUpdateHealthPolicyDescription
        fullName: RepairTaskUpdateHealthPolicyDescription
        uid: '@azure/servicefabric.RepairTaskUpdateHealthPolicyDescription'
  - uid: '@azure/servicefabric.ServiceFabricClientUpdateServiceOptionalParams'
    name: ServiceFabricClientUpdateServiceOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientUpdateServiceOptionalParams
        fullName: ServiceFabricClientUpdateServiceOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientUpdateServiceOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientUploadFileOptionalParams'
    name: ServiceFabricClientUploadFileOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientUploadFileOptionalParams
        fullName: ServiceFabricClientUploadFileOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientUploadFileOptionalParams'
  - uid: '@azure/servicefabric.ServiceFabricClientUploadFileChunkOptionalParams'
    name: ServiceFabricClientUploadFileChunkOptionalParams
    spec.typeScript:
      - name: ServiceFabricClientUploadFileChunkOptionalParams
        fullName: ServiceFabricClientUploadFileChunkOptionalParams
        uid: '@azure/servicefabric.ServiceFabricClientUploadFileChunkOptionalParams'
