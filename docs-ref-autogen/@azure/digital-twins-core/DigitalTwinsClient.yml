### YamlMime:TSType
name: DigitalTwinsClient
uid: '@azure/digital-twins-core.DigitalTwinsClient'
package: '@azure/digital-twins-core'
summary: Client for Azure IoT DigitalTwins API.
fullName: DigitalTwinsClient
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'DigitalTwinsClient(string, TokenCredential, DigitalTwinsClientOptions)'
    uid: '@azure/digital-twins-core.DigitalTwinsClient.constructor'
    package: '@azure/digital-twins-core'
    summary: >-
      Creates an instance of AzureDigitalTwinsAPI.

      Example usage:

      ```ts

      const { DigitalTwinsClient, ServiceClientCredentials } =
      require("@azure/digital-twins-core");


      const client = new DigitalTwinsClient(
        "<endpoint>",
        new DefaultAzureCredential();
      );

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new DigitalTwinsClient(endpointUrl: string, credential: TokenCredential,
        options?: DigitalTwinsClientOptions)
      parameters:
        - id: endpointUrl
          type: string
          description: The endpoint URL of the service.
        - id: credential
          type: TokenCredential
          description: Used to authenticate requests to the service.
        - id: options
          type: <xref uid="@azure/digital-twins-core.DigitalTwinsClientOptions" />
          description: |
            Used to configure the service client.
methods:
  - name: 'createModels(any[], OperationOptions)'
    uid: '@azure/digital-twins-core.DigitalTwinsClient.createModels'
    package: '@azure/digital-twins-core'
    summary: Create one or many
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function createModels(dtdlModels: any[], options?: OperationOptions)'
      parameters:
        - id: dtdlModels
          type: 'any[]'
          description: ''
        - id: options
          type: OperationOptions
          description: The operation options
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/digital-twins-core.DigitalTwinModelsAddResponse" />&gt;
        description: The created application/json models and the http response.
  - name: 'decomissionModel(string, OperationOptions)'
    uid: '@azure/digital-twins-core.DigitalTwinsClient.decomissionModel'
    package: '@azure/digital-twins-core'
    summary: Decommission a model using a json patch.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function decomissionModel(modelId: string, options?: OperationOptions)'
      parameters:
        - id: modelId
          type: string
          description: |-
            The Id of the model to decommission.
            property can be replaced.
        - id: options
          type: OperationOptions
          description: The operation options
      return:
        type: Promise&lt;RestResponse&gt;
        description: The http response.
  - name: 'deleteDigitalTwin(string, DigitalTwinsDeleteOptionalParams)'
    uid: '@azure/digital-twins-core.DigitalTwinsClient.deleteDigitalTwin'
    package: '@azure/digital-twins-core'
    summary: Delete a digital twin
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteDigitalTwin(digitalTwinId: string, options?:
        DigitalTwinsDeleteOptionalParams)
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the digital twin to delete.
        - id: options
          type: >-
            <xref
            uid="@azure/digital-twins-core.DigitalTwinsDeleteOptionalParams" />
          description: |-
            Extended operation options including
              ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is provided.
      return:
        type: Promise&lt;RestResponse&gt;
        description: The http response.
  - name: 'deleteEventRoute(string, OperationOptions)'
    uid: '@azure/digital-twins-core.DigitalTwinsClient.deleteEventRoute'
    package: '@azure/digital-twins-core'
    summary: Delete an event route.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteEventRoute(eventRouteId: string, options?:
        OperationOptions)
      parameters:
        - id: eventRouteId
          type: string
          description: The Id of the eventRoute to delete.
        - id: options
          type: OperationOptions
          description: The operation options
      return:
        type: Promise&lt;RestResponse&gt;
        description: The http response.
  - name: 'deleteModel(string, OperationOptions)'
    uid: '@azure/digital-twins-core.DigitalTwinsClient.deleteModel'
    package: '@azure/digital-twins-core'
    summary: Delete a model.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function deleteModel(modelId: string, options?: OperationOptions)'
      parameters:
        - id: modelId
          type: string
          description: The Id of the model to delete.
        - id: options
          type: OperationOptions
          description: The operation options
      return:
        type: Promise&lt;RestResponse&gt;
        description: The http response.
  - name: >-
      deleteRelationship(string, string,
      DigitalTwinsDeleteRelationshipOptionalParams)
    uid: '@azure/digital-twins-core.DigitalTwinsClient.deleteRelationship'
    package: '@azure/digital-twins-core'
    summary: Delete a relationship on a digital twin.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteRelationship(digitalTwinId: string, relationshipId:
        string, options?: DigitalTwinsDeleteRelationshipOptionalParams)
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the source digital twin.
        - id: relationshipId
          type: string
          description: The Id of the relationship to delete.
        - id: options
          type: >-
            <xref
            uid="@azure/digital-twins-core.DigitalTwinsDeleteRelationshipOptionalParams"
            />
          description: |-
            The operation options
              ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is
      return:
        type: Promise&lt;RestResponse&gt;
        description: The http response.
  - name: 'getComponent(string, string, OperationOptions)'
    uid: '@azure/digital-twins-core.DigitalTwinsClient.getComponent'
    package: '@azure/digital-twins-core'
    summary: Get a component on a digital twin.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getComponent(digitalTwinId: string, componentName: string,
        options?: OperationOptions)
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the digital twin.
        - id: componentName
          type: string
          description: The component being retrieved.
        - id: options
          type: OperationOptions
          description: The operation options
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/digital-twins-core.DigitalTwinsGetComponentResponse"
          />&gt;
        description: >-
          Json string representation of the component corresponding to the
          provided componentName and the HTTP response.
  - name: 'getDigitalTwin(string, OperationOptions)'
    uid: '@azure/digital-twins-core.DigitalTwinsClient.getDigitalTwin'
    package: '@azure/digital-twins-core'
    summary: Get a digital twin
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getDigitalTwin(digitalTwinId: string, options?:
        OperationOptions)
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the digital twin.
        - id: options
          type: OperationOptions
          description: The operation options
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/digital-twins-core.DigitalTwinsGetByIdResponse" />&gt;
        description: The application/json digital twin and the http response.
  - name: 'getEventRoute(string, OperationOptions)'
    uid: '@azure/digital-twins-core.DigitalTwinsClient.getEventRoute'
    package: '@azure/digital-twins-core'
    summary: Get an event route.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getEventRoute(eventRouteId: string, options?: OperationOptions)'
      parameters:
        - id: eventRouteId
          type: string
          description: ''
        - id: options
          type: OperationOptions
          description: The operation options
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/digital-twins-core.EventRoutesGetByIdResponse" />&gt;
        description: The application/json event route and the http response.
  - name: 'getModel(string, boolean, OperationOptions)'
    uid: '@azure/digital-twins-core.DigitalTwinsClient.getModel'
    package: '@azure/digital-twins-core'
    summary: 'Get a model, including the model metadata and the model definition.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getModel(modelId: string, includeModelDefinition?: boolean,
        options?: OperationOptions)
      parameters:
        - id: modelId
          type: string
          description: The Id of the model.
        - id: includeModelDefinition
          type: boolean
          description: ''
        - id: options
          type: OperationOptions
          description: |-
            Extended operation options including
             includeModelDefinition: When true the model definition will be returned as part of the result. Default value: false.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/digital-twins-core.DigitalTwinModelsGetByIdResponse"
          />&gt;
        description: The application/json model and the http response.
  - name: 'getRelationship(string, string, OperationOptions)'
    uid: '@azure/digital-twins-core.DigitalTwinsClient.getRelationship'
    package: '@azure/digital-twins-core'
    summary: Get a relationship on a digital twin.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getRelationship(digitalTwinId: string, relationshipId: string,
        options?: OperationOptions)
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the source digital twin.
        - id: relationshipId
          type: string
          description: The Id of the relationship to retrieve.
        - id: options
          type: OperationOptions
          description: The operation options
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/digital-twins-core.DigitalTwinsGetRelationshipByIdResponse"
          />&gt;
        description: >-
          The pageable list of application/json relationships belonging to the
          specified digital twin and the http response.
  - name: 'listEventRoutes(number, OperationOptions & PageSettings)'
    uid: '@azure/digital-twins-core.DigitalTwinsClient.listEventRoutes'
    package: '@azure/digital-twins-core'
    summary: List the event routes in a digital twins instance.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listEventRoutes(resultsPerPage?: number, options?:
        OperationOptions & PageSettings)
      parameters:
        - id: resultsPerPage
          type: number
          description: >-
            The maximum number of items to retrieve per request. The server may
            choose to return less than

            the requested max.
        - id: options
          type: OperationOptions & PageSettings
          description: ''
      return:
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/digital-twins-core.EventRoute" />, <xref
          uid="@azure/digital-twins-core.EventRoutesListNextResponse" />&gt;
        description: The application/json event route and the http response.
  - name: 'listIncomingRelationships(string, OperationOptions & PageSettings)'
    uid: '@azure/digital-twins-core.DigitalTwinsClient.listIncomingRelationships'
    package: '@azure/digital-twins-core'
    summary: Retrieve all incoming relationships for a digital twin.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listIncomingRelationships(digitalTwinId: string, options?:
        OperationOptions & PageSettings)
      parameters:
        - id: digitalTwinId
          type: string
          description: |
            The Id of the digital twin.
        - id: options
          type: OperationOptions & PageSettings
          description: ''
      return:
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/digital-twins-core.IncomingRelationship" />, <xref
          uid="@azure/digital-twins-core.DigitalTwinsListIncomingRelationshipsResponse"
          />&gt;
        description: ''
  - name: 'listModels(string[], boolean, number, OperationOptions & PageSettings)'
    uid: '@azure/digital-twins-core.DigitalTwinsClient.listModels'
    package: '@azure/digital-twins-core'
    summary: Get the list of models
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listModels(dependeciesFor?: string[], includeModelDefinition?:
        boolean, resultsPerPage?: number, options?: OperationOptions &
        PageSettings)
      parameters:
        - id: dependeciesFor
          type: 'string[]'
          description: >-
            The model Ids to have dependencies retrieved. If omitted, all models
            are retrieved.
        - id: includeModelDefinition
          type: boolean
          description: >-
            Whether to include the model definition in the result. If false,
            only the model metadata will be returned.
        - id: resultsPerPage
          type: number
          description: >-
            The maximum number of items to retrieve per request. The server may
            choose to return less than the requested max.
        - id: options
          type: OperationOptions & PageSettings
          description: ''
      return:
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/digital-twins-core.DigitalTwinsModelData" />, <xref
          uid="@azure/digital-twins-core.DigitalTwinModelsListResponse" />&gt;
        description: A pageable set of application/json models and the http response.
  - name: 'listRelationships(string, OperationOptions & PageSettings)'
    uid: '@azure/digital-twins-core.DigitalTwinsClient.listRelationships'
    package: '@azure/digital-twins-core'
    summary: Retrieve relationships for a digital twin.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listRelationships(digitalTwinId: string, options?:
        OperationOptions & PageSettings)
      parameters:
        - id: digitalTwinId
          type: string
          description: |
            The Id of the digital twin.
        - id: options
          type: OperationOptions & PageSettings
          description: ''
      return:
        type: >-
          PagedAsyncIterableIterator&lt;any, <xref
          uid="@azure/digital-twins-core.DigitalTwinsListRelationshipsResponse"
          />&gt;
        description: ''
  - name: >-
      publishComponentTelemetry(string, string, string, string,
      OperationOptions)
    uid: '@azure/digital-twins-core.DigitalTwinsClient.publishComponentTelemetry'
    package: '@azure/digital-twins-core'
    summary: >-
      Publish telemetry from a digital twin's component, which is then consumed
      by one or many destination endpoints (subscribers) defined under.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function publishComponentTelemetry(digitalTwinId: string, componentName:
        string, payload: string, messageId: string, options?: OperationOptions)
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the digital twin to delete.
        - id: componentName
          type: string
          description: The name of the DTDL component.
        - id: payload
          type: string
          description: The application/json telemetry payload to be sent.
        - id: messageId
          type: string
          description: The message Id.
        - id: options
          type: OperationOptions
          description: The operation options
      return:
        type: Promise&lt;RestResponse&gt;
        description: The http response.
  - name: 'publishTelemetry(string, any, string, OperationOptions)'
    uid: '@azure/digital-twins-core.DigitalTwinsClient.publishTelemetry'
    package: '@azure/digital-twins-core'
    summary: >-
      Publish telemetry from a digital twin, which is then consumed by one or
      many destination endpoints (subscribers) defined under.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function publishTelemetry(digitalTwinId: string, payload: any,
        messageId: string, options?: OperationOptions)
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the digital twin to delete.
        - id: payload
          type: any
          description: The application/json telemetry payload to be sent.
        - id: messageId
          type: string
          description: The message Id.
        - id: options
          type: OperationOptions
          description: The operation options
      return:
        type: Promise&lt;RestResponse&gt;
        description: The http response.
  - name: 'queryTwins(string, number, OperationOptions & PageSettings)'
    uid: '@azure/digital-twins-core.DigitalTwinsClient.queryTwins'
    package: '@azure/digital-twins-core'
    summary: Query for digital twins.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function queryTwins(query: string, resultsPerPage?: number, options?:
        OperationOptions & PageSettings)
      parameters:
        - id: query
          type: string
          description: 'The query string, in SQL-like syntax.'
        - id: resultsPerPage
          type: number
          description: >-
            The maximum number of items to retrieve per request. The server may
            choose to return less than the requested max.
        - id: options
          type: OperationOptions & PageSettings
          description: ''
      return:
        type: >-
          PagedAsyncIterableIterator&lt;any, <xref
          uid="@azure/digital-twins-core.QueryQueryTwinsResponse" />&gt;
        description: The pageable list of query results.
  - name: >-
      updateComponent(string, string, any[],
      DigitalTwinsUpdateComponentOptionalParams)
    uid: '@azure/digital-twins-core.DigitalTwinsClient.updateComponent'
    package: '@azure/digital-twins-core'
    summary: Update properties of a component on a digital twin using a JSON patch.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateComponent(digitalTwinId: string, componentName: string,
        jsonPatch: any[], options?: DigitalTwinsUpdateComponentOptionalParams)
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the digital twin.
        - id: componentName
          type: string
          description: The component being updated.
        - id: jsonPatch
          type: 'any[]'
          description: >-
            The application/json-patch+json operations to be performed on the
            specified digital twin's component.
        - id: options
          type: >-
            <xref
            uid="@azure/digital-twins-core.DigitalTwinsUpdateComponentOptionalParams"
            />
          description: |-
            Extended operation options including
              ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is provided.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/digital-twins-core.DigitalTwinsUpdateComponentResponse"
          />&gt;
        description: The http response.
  - name: 'updateDigitalTwin(string, any, DigitalTwinsUpdateOptionalParams)'
    uid: '@azure/digital-twins-core.DigitalTwinsClient.updateDigitalTwin'
    package: '@azure/digital-twins-core'
    summary: Update a digital twin using a json patch.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateDigitalTwin(digitalTwinId: string, jsonPatch: any,
        options?: DigitalTwinsUpdateOptionalParams)
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the digital twin.
        - id: jsonPatch
          type: any
          description: >-
            An update specification described by JSON Patch. Updates to property
            values

            and $model elements may happen in the same request. Operations are
            limited to add, replace and

            remove.
        - id: options
          type: >-
            <xref
            uid="@azure/digital-twins-core.DigitalTwinsUpdateOptionalParams" />
          description: |-
            Extended operation options including
              ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is provided.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/digital-twins-core.DigitalTwinsUpdateResponse" />&gt;
        description: The http response.
  - name: >-
      updateRelationship(string, string, any[],
      DigitalTwinsUpdateRelationshipOptionalParams)
    uid: '@azure/digital-twins-core.DigitalTwinsClient.updateRelationship'
    package: '@azure/digital-twins-core'
    summary: >-
      Updates the properties of a relationship on a digital twin using a JSON
      patch.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateRelationship(digitalTwinId: string, relationshipId:
        string, jsonPatch: any[], options?:
        DigitalTwinsUpdateRelationshipOptionalParams)
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the digital twin to delete.
        - id: relationshipId
          type: string
          description: The Id of the relationship to be updated.
        - id: jsonPatch
          type: 'any[]'
          description: >-
            The application/json-patch+json operations to be performed on the
            specified digital twin's relationship.
        - id: options
          type: >-
            <xref
            uid="@azure/digital-twins-core.DigitalTwinsUpdateRelationshipOptionalParams"
            />
          description: |
            Extended operation options
              ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is provided.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/digital-twins-core.DigitalTwinsUpdateRelationshipResponse"
          />&gt;
        description: ''
  - name: 'upsertDigitalTwin(string, string, DigitalTwinsAddOptionalParams)'
    uid: '@azure/digital-twins-core.DigitalTwinsClient.upsertDigitalTwin'
    package: '@azure/digital-twins-core'
    summary: Create or update a digital twin
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function upsertDigitalTwin(digitalTwinId: string, digitalTwinJson:
        string, options?: DigitalTwinsAddOptionalParams)
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the digital twin to create or update.
        - id: digitalTwinJson
          type: string
          description: The application/json digital twin to create.
        - id: options
          type: >-
            <xref uid="@azure/digital-twins-core.DigitalTwinsAddOptionalParams"
            />
          description: |-
            Extended operation options including
             ifNoneMatch: Only perform the operation if the entity does not already exist.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/digital-twins-core.DigitalTwinsAddResponse" />&gt;
        description: The created application/json digital twin and the http response.
  - name: 'upsertEventRoute(string, string, string, OperationOptions)'
    uid: '@azure/digital-twins-core.DigitalTwinsClient.upsertEventRoute'
    package: '@azure/digital-twins-core'
    summary: Create or update an event route.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function upsertEventRoute(eventRouteId: string, endpointId: string,
        filter: string, options?: OperationOptions)
      parameters:
        - id: eventRouteId
          type: string
          description: The Id of the event route to create or update.
        - id: endpointId
          type: string
          description: The id of the endpoint this event route is bound to.
        - id: filter
          type: string
          description: >-
            An expression which describes the events which are routed to the
            endpoint.
        - id: options
          type: OperationOptions
          description: The operation options
      return:
        type: Promise&lt;RestResponse&gt;
        description: The http response.
  - name: >-
      upsertRelationship(string, string, any,
      DigitalTwinsAddRelationshipOptionalParams)
    uid: '@azure/digital-twins-core.DigitalTwinsClient.upsertRelationship'
    package: '@azure/digital-twins-core'
    summary: Create or update a relationship on a digital twin.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function upsertRelationship(digitalTwinId: string, relationshipId:
        string, relationship: any, options?:
        DigitalTwinsAddRelationshipOptionalParams)
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the source digital twin.
        - id: relationshipId
          type: string
          description: The Id of the relationship to create.
        - id: relationship
          type: any
          description: ''
        - id: options
          type: >-
            <xref
            uid="@azure/digital-twins-core.DigitalTwinsAddRelationshipOptionalParams"
            />
          description: |
            Extended operation options including
             ifNoneMatch: Only perform the operation if the entity does not already exist.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/digital-twins-core.DigitalTwinsAddRelationshipResponse"
          />&gt;
        description: ''
