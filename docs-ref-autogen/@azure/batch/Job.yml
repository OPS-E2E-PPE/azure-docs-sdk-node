### YamlMime:UniversalReference
items:
  - uid: '@azure/batch.Job'
    name: Job
    fullName: Job
    children:
      - '@azure/batch.Job.add_2'
      - '@azure/batch.Job.add'
      - '@azure/batch.Job.add_1'
      - '@azure/batch.Job.deleteMethod_2'
      - '@azure/batch.Job.deleteMethod'
      - '@azure/batch.Job.deleteMethod_1'
      - '@azure/batch.Job.disable_2'
      - '@azure/batch.Job.disable'
      - '@azure/batch.Job.disable_1'
      - '@azure/batch.Job.enable_2'
      - '@azure/batch.Job.enable'
      - '@azure/batch.Job.enable_1'
      - '@azure/batch.Job.get_2'
      - '@azure/batch.Job.get'
      - '@azure/batch.Job.get_1'
      - '@azure/batch.Job.getAllLifetimeStatistics_2'
      - '@azure/batch.Job.getAllLifetimeStatistics'
      - '@azure/batch.Job.getAllLifetimeStatistics_1'
      - '@azure/batch.Job.getTaskCounts_2'
      - '@azure/batch.Job.getTaskCounts'
      - '@azure/batch.Job.getTaskCounts_1'
      - '@azure/batch.Job.constructor'
      - '@azure/batch.Job.list_2'
      - '@azure/batch.Job.list'
      - '@azure/batch.Job.list_1'
      - '@azure/batch.Job.listFromJobSchedule_2'
      - '@azure/batch.Job.listFromJobSchedule'
      - '@azure/batch.Job.listFromJobSchedule_1'
      - '@azure/batch.Job.listFromJobScheduleNext_2'
      - '@azure/batch.Job.listFromJobScheduleNext'
      - '@azure/batch.Job.listFromJobScheduleNext_1'
      - '@azure/batch.Job.listNext_2'
      - '@azure/batch.Job.listNext'
      - '@azure/batch.Job.listNext_1'
      - '@azure/batch.Job.listPreparationAndReleaseTaskStatus_2'
      - '@azure/batch.Job.listPreparationAndReleaseTaskStatus'
      - '@azure/batch.Job.listPreparationAndReleaseTaskStatus_1'
      - '@azure/batch.Job.listPreparationAndReleaseTaskStatusNext_2'
      - '@azure/batch.Job.listPreparationAndReleaseTaskStatusNext'
      - '@azure/batch.Job.listPreparationAndReleaseTaskStatusNext_1'
      - '@azure/batch.Job.patch_2'
      - '@azure/batch.Job.patch'
      - '@azure/batch.Job.patch_1'
      - '@azure/batch.Job.terminate_2'
      - '@azure/batch.Job.terminate'
      - '@azure/batch.Job.terminate_1'
      - '@azure/batch.Job.update_2'
      - '@azure/batch.Job.update'
      - '@azure/batch.Job.update_1'
    langs:
      - typeScript
    type: class
    summary: Class representing a Job.
    package: '@azure/batch'
  - uid: '@azure/batch.Job.add_2'
    name: 'add(JobAddParameter, JobAddOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function add(job: JobAddParameter, options: JobAddOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: job
          type:
            - '@azure/batch.JobAddParameter'
          description: The job to be added.
        - id: options
          type:
            - '@azure/batch.JobAddOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.Job.add'
    name: 'add(JobAddParameter, Models.JobAddOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Batch service supports two ways to control the work done as part of a
      job. In the first

      approach, the user specifies a Job Manager task. The Batch service
      launches this task when it is

      ready to start the job. The Job Manager task controls all other tasks that
      run under this job,

      by using the Task APIs. In the second approach, the user directly controls
      the execution of

      tasks under an active job, by using the Task APIs. Also note: when naming
      jobs, avoid including

      sensitive information such as user names or secret project names. This
      information may appear in

      telemetry logs accessible to Microsoft Support engineers.
    syntax:
      content: >-
        function add(job: JobAddParameter, options?:
        Models.JobAddOptionalParams)
      parameters:
        - id: job
          type:
            - '@azure/batch.JobAddParameter'
          description: The job to be added.
        - id: options
          type:
            - Models.JobAddOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.JobAddResponse>
        description: Promise<Models.JobAddResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Job.add_1'
    name: 'add(JobAddParameter, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function add(job: JobAddParameter, callback: ServiceCallback<void>)'
      parameters:
        - id: job
          type:
            - '@azure/batch.JobAddParameter'
          description: The job to be added.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.Job.deleteMethod_2'
    name: 'deleteMethod(string, JobDeleteMethodOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteMethod(jobId: string, options:
        JobDeleteMethodOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: jobId
          type:
            - string
          description: The ID of the job to delete.
        - id: options
          type:
            - '@azure/batch.JobDeleteMethodOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.Job.deleteMethod'
    name: 'deleteMethod(string, Models.JobDeleteMethodOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Deleting a job also deletes all tasks that are part of that job, and all
      job statistics. This

      also overrides the retention period for task data; that is, if the job
      contains tasks which are

      still retained on compute nodes, the Batch services deletes those tasks'
      working directories and

      all their contents.  When a Delete Job request is received, the Batch
      service sets the job to

      the deleting state. All update operations on a job that is in deleting
      state will fail with

      status code 409 (Conflict), with additional information indicating that
      the job is being

      deleted.
    syntax:
      content: >-
        function deleteMethod(jobId: string, options?:
        Models.JobDeleteMethodOptionalParams)
      parameters:
        - id: jobId
          type:
            - string
          description: The ID of the job to delete.
        - id: options
          type:
            - Models.JobDeleteMethodOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.JobDeleteResponse>
        description: Promise<Models.JobDeleteResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Job.deleteMethod_1'
    name: 'deleteMethod(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteMethod(jobId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: jobId
          type:
            - string
          description: The ID of the job to delete.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.Job.disable_2'
    name: >-
      disable(string, Models.DisableJobOption, JobDisableOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function disable(jobId: string, disableTasks: Models.DisableJobOption,
        options: JobDisableOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: jobId
          type:
            - string
          description: The ID of the job to disable.
        - id: disableTasks
          type:
            - Models.DisableJobOption
          description: >-
            What to do with active tasks associated with the job. Possible
            values

            include: 'requeue', 'terminate', 'wait'
        - id: options
          type:
            - '@azure/batch.JobDisableOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.Job.disable'
    name: 'disable(string, Models.DisableJobOption, Models.JobDisableOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Batch Service immediately moves the job to the disabling state. Batch
      then uses the

      disableTasks parameter to determine what to do with the currently running
      tasks of the job. The

      job remains in the disabling state until the disable operation is
      completed and all tasks have

      been dealt with according to the disableTasks option; the job then moves
      to the disabled state.

      No new tasks are started under the job until it moves back to active
      state. If you try to

      disable a job that is in any state other than active, disabling, or
      disabled, the request fails

      with status code 409.
    syntax:
      content: >-
        function disable(jobId: string, disableTasks: Models.DisableJobOption,
        options?: Models.JobDisableOptionalParams)
      parameters:
        - id: jobId
          type:
            - string
          description: The ID of the job to disable.
        - id: disableTasks
          type:
            - Models.DisableJobOption
          description: >-
            What to do with active tasks associated with the job. Possible
            values

            include: 'requeue', 'terminate', 'wait'
        - id: options
          type:
            - Models.JobDisableOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.JobDisableResponse>
        description: Promise<Models.JobDisableResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Job.disable_1'
    name: 'disable(string, Models.DisableJobOption, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function disable(jobId: string, disableTasks: Models.DisableJobOption,
        callback: ServiceCallback<void>)
      parameters:
        - id: jobId
          type:
            - string
          description: The ID of the job to disable.
        - id: disableTasks
          type:
            - Models.DisableJobOption
          description: >-
            What to do with active tasks associated with the job. Possible
            values

            include: 'requeue', 'terminate', 'wait'
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.Job.enable_2'
    name: 'enable(string, JobEnableOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function enable(jobId: string, options: JobEnableOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: jobId
          type:
            - string
          description: The ID of the job to enable.
        - id: options
          type:
            - '@azure/batch.JobEnableOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.Job.enable'
    name: 'enable(string, Models.JobEnableOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      When you call this API, the Batch service sets a disabled job to the
      enabling state. After the

      this operation is completed, the job moves to the active state, and
      scheduling of new tasks

      under the job resumes. The Batch service does not allow a task to remain
      in the active state for

      more than 180 days. Therefore, if you enable a job containing active tasks
      which were added more

      than 180 days ago, those tasks will not run.
    syntax:
      content: 'function enable(jobId: string, options?: Models.JobEnableOptionalParams)'
      parameters:
        - id: jobId
          type:
            - string
          description: The ID of the job to enable.
        - id: options
          type:
            - Models.JobEnableOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.JobEnableResponse>
        description: Promise<Models.JobEnableResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Job.enable_1'
    name: 'enable(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function enable(jobId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: jobId
          type:
            - string
          description: The ID of the job to enable.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.Job.get_2'
    name: 'get(string, JobGetOptionalParams, ServiceCallback<CloudJob>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function get(jobId: string, options: JobGetOptionalParams, callback:
        ServiceCallback<CloudJob>)
      parameters:
        - id: jobId
          type:
            - string
          description: The ID of the job.
        - id: options
          type:
            - '@azure/batch.JobGetOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/batch.CloudJob>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.Job.get'
    name: 'get(string, Models.JobGetOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function get(jobId: string, options?: Models.JobGetOptionalParams)'
      parameters:
        - id: jobId
          type:
            - string
          description: The ID of the job.
        - id: options
          type:
            - Models.JobGetOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.JobGetResponse>
        description: Promise<Models.JobGetResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Job.get_1'
    name: 'get(string, ServiceCallback<CloudJob>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function get(jobId: string, callback: ServiceCallback<CloudJob>)'
      parameters:
        - id: jobId
          type:
            - string
          description: The ID of the job.
        - id: callback
          type:
            - ServiceCallback<@azure/batch.CloudJob>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.Job.getAllLifetimeStatistics_2'
    name: >-
      getAllLifetimeStatistics(JobGetAllLifetimeStatisticsOptionalParams,
      ServiceCallback<JobStatistics>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getAllLifetimeStatistics(options:
        JobGetAllLifetimeStatisticsOptionalParams, callback:
        ServiceCallback<JobStatistics>)
      parameters:
        - id: options
          type:
            - '@azure/batch.JobGetAllLifetimeStatisticsOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/batch.JobStatistics>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.Job.getAllLifetimeStatistics'
    name: getAllLifetimeStatistics(Models.JobGetAllLifetimeStatisticsOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Statistics are aggregated across all jobs that have ever existed in the
      account, from account

      creation to the last update time of the statistics. The statistics may not
      be immediately

      available. The Batch service performs periodic roll-up of statistics. The
      typical delay is about

      30 minutes.
    syntax:
      content: >-
        function getAllLifetimeStatistics(options?:
        Models.JobGetAllLifetimeStatisticsOptionalParams)
      parameters:
        - id: options
          type:
            - Models.JobGetAllLifetimeStatisticsOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.JobGetAllLifetimeStatisticsResponse>
        description: Promise<Models.JobGetAllLifetimeStatisticsResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Job.getAllLifetimeStatistics_1'
    name: getAllLifetimeStatistics(ServiceCallback<JobStatistics>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getAllLifetimeStatistics(callback:
        ServiceCallback<JobStatistics>)
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/batch.JobStatistics>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.Job.getTaskCounts_2'
    name: >-
      getTaskCounts(string, JobGetTaskCountsOptionalParams,
      ServiceCallback<TaskCounts>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getTaskCounts(jobId: string, options:
        JobGetTaskCountsOptionalParams, callback: ServiceCallback<TaskCounts>)
      parameters:
        - id: jobId
          type:
            - string
          description: The ID of the job.
        - id: options
          type:
            - '@azure/batch.JobGetTaskCountsOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/batch.TaskCounts>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.Job.getTaskCounts'
    name: 'getTaskCounts(string, Models.JobGetTaskCountsOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Task counts provide a count of the tasks by active, running or completed
      task state, and a count

      of tasks which succeeded or failed. Tasks in the preparing state are
      counted as running.
    syntax:
      content: >-
        function getTaskCounts(jobId: string, options?:
        Models.JobGetTaskCountsOptionalParams)
      parameters:
        - id: jobId
          type:
            - string
          description: The ID of the job.
        - id: options
          type:
            - Models.JobGetTaskCountsOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.JobGetTaskCountsResponse>
        description: Promise<Models.JobGetTaskCountsResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Job.getTaskCounts_1'
    name: 'getTaskCounts(string, ServiceCallback<TaskCounts>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getTaskCounts(jobId: string, callback:
        ServiceCallback<TaskCounts>)
      parameters:
        - id: jobId
          type:
            - string
          description: The ID of the job.
        - id: callback
          type:
            - ServiceCallback<@azure/batch.TaskCounts>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.Job.constructor'
    name: Job(BatchServiceClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Create a Job.
    syntax:
      content: 'new Job(client: BatchServiceClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/batch.BatchServiceClientContext'
          description: |
            Reference to the service client.
    package: '@azure/batch'
  - uid: '@azure/batch.Job.list_2'
    name: 'list(JobListOptionalParams, ServiceCallback<CloudJobListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function list(options: JobListOptionalParams, callback:
        ServiceCallback<CloudJobListResult>)
      parameters:
        - id: options
          type:
            - '@azure/batch.JobListOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/batch.CloudJobListResult>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.Job.list'
    name: list(Models.JobListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function list(options?: Models.JobListOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.JobListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.JobListResponse>
        description: Promise<Models.JobListResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Job.list_1'
    name: list(ServiceCallback<CloudJobListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function list(callback: ServiceCallback<CloudJobListResult>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/batch.CloudJobListResult>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.Job.listFromJobSchedule_2'
    name: >-
      listFromJobSchedule(string, JobListFromJobScheduleOptionalParams,
      ServiceCallback<CloudJobListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listFromJobSchedule(jobScheduleId: string, options:
        JobListFromJobScheduleOptionalParams, callback:
        ServiceCallback<CloudJobListResult>)
      parameters:
        - id: jobScheduleId
          type:
            - string
          description: >-
            The ID of the job schedule from which you want to get a list of
            jobs.
        - id: options
          type:
            - '@azure/batch.JobListFromJobScheduleOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/batch.CloudJobListResult>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.Job.listFromJobSchedule'
    name: 'listFromJobSchedule(string, Models.JobListFromJobScheduleOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listFromJobSchedule(jobScheduleId: string, options?:
        Models.JobListFromJobScheduleOptionalParams)
      parameters:
        - id: jobScheduleId
          type:
            - string
          description: >-
            The ID of the job schedule from which you want to get a list of
            jobs.
        - id: options
          type:
            - Models.JobListFromJobScheduleOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.JobListFromJobScheduleResponse>
        description: Promise<Models.JobListFromJobScheduleResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Job.listFromJobSchedule_1'
    name: 'listFromJobSchedule(string, ServiceCallback<CloudJobListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listFromJobSchedule(jobScheduleId: string, callback:
        ServiceCallback<CloudJobListResult>)
      parameters:
        - id: jobScheduleId
          type:
            - string
          description: >-
            The ID of the job schedule from which you want to get a list of
            jobs.
        - id: callback
          type:
            - ServiceCallback<@azure/batch.CloudJobListResult>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.Job.listFromJobScheduleNext_2'
    name: >-
      listFromJobScheduleNext(string, JobListFromJobScheduleNextOptionalParams,
      ServiceCallback<CloudJobListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listFromJobScheduleNext(nextPageLink: string, options:
        JobListFromJobScheduleNextOptionalParams, callback:
        ServiceCallback<CloudJobListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - '@azure/batch.JobListFromJobScheduleNextOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/batch.CloudJobListResult>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.Job.listFromJobScheduleNext'
    name: >-
      listFromJobScheduleNext(string,
      Models.JobListFromJobScheduleNextOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listFromJobScheduleNext(nextPageLink: string, options?:
        Models.JobListFromJobScheduleNextOptionalParams)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - Models.JobListFromJobScheduleNextOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.JobListFromJobScheduleResponse>
        description: Promise<Models.JobListFromJobScheduleResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Job.listFromJobScheduleNext_1'
    name: 'listFromJobScheduleNext(string, ServiceCallback<CloudJobListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listFromJobScheduleNext(nextPageLink: string, callback:
        ServiceCallback<CloudJobListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type:
            - ServiceCallback<@azure/batch.CloudJobListResult>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.Job.listNext_2'
    name: >-
      listNext(string, JobListNextOptionalParams,
      ServiceCallback<CloudJobListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listNext(nextPageLink: string, options:
        JobListNextOptionalParams, callback:
        ServiceCallback<CloudJobListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - '@azure/batch.JobListNextOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/batch.CloudJobListResult>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.Job.listNext'
    name: 'listNext(string, Models.JobListNextOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listNext(nextPageLink: string, options?:
        Models.JobListNextOptionalParams)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - Models.JobListNextOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.JobListResponse>
        description: Promise<Models.JobListResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Job.listNext_1'
    name: 'listNext(string, ServiceCallback<CloudJobListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listNext(nextPageLink: string, callback:
        ServiceCallback<CloudJobListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type:
            - ServiceCallback<@azure/batch.CloudJobListResult>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.Job.listPreparationAndReleaseTaskStatus_2'
    name: >-
      listPreparationAndReleaseTaskStatus(string,
      JobListPreparationAndReleaseTaskStatusOptionalParams,
      ServiceCallback<CloudJobListPreparationAndReleaseTaskStatusResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listPreparationAndReleaseTaskStatus(jobId: string, options:
        JobListPreparationAndReleaseTaskStatusOptionalParams, callback:
        ServiceCallback<CloudJobListPreparationAndReleaseTaskStatusResult>)
      parameters:
        - id: jobId
          type:
            - string
          description: The ID of the job.
        - id: options
          type:
            - '@azure/batch.JobListPreparationAndReleaseTaskStatusOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/batch.CloudJobListPreparationAndReleaseTaskStatusResult>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.Job.listPreparationAndReleaseTaskStatus'
    name: >-
      listPreparationAndReleaseTaskStatus(string,
      Models.JobListPreparationAndReleaseTaskStatusOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This API returns the Job Preparation and Job Release task status on all
      compute nodes that have

      run the Job Preparation or Job Release task. This includes nodes which
      have since been removed

      from the pool. If this API is invoked on a job which has no Job
      Preparation or Job Release task,

      the Batch service returns HTTP status code 409 (Conflict) with an error
      code of

      JobPreparationTaskNotSpecified.
    syntax:
      content: >-
        function listPreparationAndReleaseTaskStatus(jobId: string, options?:
        Models.JobListPreparationAndReleaseTaskStatusOptionalParams)
      parameters:
        - id: jobId
          type:
            - string
          description: The ID of the job.
        - id: options
          type:
            - Models.JobListPreparationAndReleaseTaskStatusOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.JobListPreparationAndReleaseTaskStatusResponse>
        description: Promise<Models.JobListPreparationAndReleaseTaskStatusResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Job.listPreparationAndReleaseTaskStatus_1'
    name: >-
      listPreparationAndReleaseTaskStatus(string,
      ServiceCallback<CloudJobListPreparationAndReleaseTaskStatusResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listPreparationAndReleaseTaskStatus(jobId: string, callback:
        ServiceCallback<CloudJobListPreparationAndReleaseTaskStatusResult>)
      parameters:
        - id: jobId
          type:
            - string
          description: The ID of the job.
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/batch.CloudJobListPreparationAndReleaseTaskStatusResult>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.Job.listPreparationAndReleaseTaskStatusNext_2'
    name: >-
      listPreparationAndReleaseTaskStatusNext(string,
      JobListPreparationAndReleaseTaskStatusNextOptionalParams,
      ServiceCallback<CloudJobListPreparationAndReleaseTaskStatusResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listPreparationAndReleaseTaskStatusNext(nextPageLink: string,
        options: JobListPreparationAndReleaseTaskStatusNextOptionalParams,
        callback:
        ServiceCallback<CloudJobListPreparationAndReleaseTaskStatusResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - >-
              @azure/batch.JobListPreparationAndReleaseTaskStatusNextOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/batch.CloudJobListPreparationAndReleaseTaskStatusResult>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.Job.listPreparationAndReleaseTaskStatusNext'
    name: >-
      listPreparationAndReleaseTaskStatusNext(string,
      Models.JobListPreparationAndReleaseTaskStatusNextOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This API returns the Job Preparation and Job Release task status on all
      compute nodes that have

      run the Job Preparation or Job Release task. This includes nodes which
      have since been removed

      from the pool. If this API is invoked on a job which has no Job
      Preparation or Job Release task,

      the Batch service returns HTTP status code 409 (Conflict) with an error
      code of

      JobPreparationTaskNotSpecified.
    syntax:
      content: >-
        function listPreparationAndReleaseTaskStatusNext(nextPageLink: string,
        options?:
        Models.JobListPreparationAndReleaseTaskStatusNextOptionalParams)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - Models.JobListPreparationAndReleaseTaskStatusNextOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.JobListPreparationAndReleaseTaskStatusResponse>
        description: Promise<Models.JobListPreparationAndReleaseTaskStatusResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Job.listPreparationAndReleaseTaskStatusNext_1'
    name: >-
      listPreparationAndReleaseTaskStatusNext(string,
      ServiceCallback<CloudJobListPreparationAndReleaseTaskStatusResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listPreparationAndReleaseTaskStatusNext(nextPageLink: string,
        callback:
        ServiceCallback<CloudJobListPreparationAndReleaseTaskStatusResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/batch.CloudJobListPreparationAndReleaseTaskStatusResult>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.Job.patch_2'
    name: >-
      patch(string, JobPatchParameter, JobPatchOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function patch(jobId: string, jobPatchParameter: JobPatchParameter,
        options: JobPatchOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: jobId
          type:
            - string
          description: The ID of the job whose properties you want to update.
        - id: jobPatchParameter
          type:
            - '@azure/batch.JobPatchParameter'
          description: The parameters for the request.
        - id: options
          type:
            - '@azure/batch.JobPatchOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.Job.patch'
    name: 'patch(string, JobPatchParameter, Models.JobPatchOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This replaces only the job properties specified in the request. For
      example, if the job has

      constraints, and a request does not specify the constraints element, then
      the job keeps the

      existing constraints.
    syntax:
      content: >-
        function patch(jobId: string, jobPatchParameter: JobPatchParameter,
        options?: Models.JobPatchOptionalParams)
      parameters:
        - id: jobId
          type:
            - string
          description: The ID of the job whose properties you want to update.
        - id: jobPatchParameter
          type:
            - '@azure/batch.JobPatchParameter'
          description: The parameters for the request.
        - id: options
          type:
            - Models.JobPatchOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.JobPatchResponse>
        description: Promise<Models.JobPatchResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Job.patch_1'
    name: 'patch(string, JobPatchParameter, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function patch(jobId: string, jobPatchParameter: JobPatchParameter,
        callback: ServiceCallback<void>)
      parameters:
        - id: jobId
          type:
            - string
          description: The ID of the job whose properties you want to update.
        - id: jobPatchParameter
          type:
            - '@azure/batch.JobPatchParameter'
          description: The parameters for the request.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.Job.terminate_2'
    name: 'terminate(string, JobTerminateOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function terminate(jobId: string, options: JobTerminateOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: jobId
          type:
            - string
          description: The ID of the job to terminate.
        - id: options
          type:
            - '@azure/batch.JobTerminateOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.Job.terminate'
    name: 'terminate(string, Models.JobTerminateOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      When a Terminate Job request is received, the Batch service sets the job
      to the terminating

      state. The Batch service then terminates any running tasks associated with
      the job and runs any

      required job release tasks. Then the job moves into the completed state.
      If there are any tasks

      in the job in the active state, they will remain in the active state. Once
      a job is terminated,

      new tasks cannot be added and any remaining active tasks will not be
      scheduled.
    syntax:
      content: >-
        function terminate(jobId: string, options?:
        Models.JobTerminateOptionalParams)
      parameters:
        - id: jobId
          type:
            - string
          description: The ID of the job to terminate.
        - id: options
          type:
            - Models.JobTerminateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.JobTerminateResponse>
        description: Promise<Models.JobTerminateResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Job.terminate_1'
    name: 'terminate(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function terminate(jobId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: jobId
          type:
            - string
          description: The ID of the job to terminate.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.Job.update_2'
    name: >-
      update(string, JobUpdateParameter, JobUpdateOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function update(jobId: string, jobUpdateParameter: JobUpdateParameter,
        options: JobUpdateOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: jobId
          type:
            - string
          description: The ID of the job whose properties you want to update.
        - id: jobUpdateParameter
          type:
            - '@azure/batch.JobUpdateParameter'
          description: The parameters for the request.
        - id: options
          type:
            - '@azure/batch.JobUpdateOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.Job.update'
    name: 'update(string, JobUpdateParameter, Models.JobUpdateOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This fully replaces all the updatable properties of the job. For example,
      if the job has

      constraints associated with it and if constraints is not specified with
      this request, then the

      Batch service will remove the existing constraints.
    syntax:
      content: >-
        function update(jobId: string, jobUpdateParameter: JobUpdateParameter,
        options?: Models.JobUpdateOptionalParams)
      parameters:
        - id: jobId
          type:
            - string
          description: The ID of the job whose properties you want to update.
        - id: jobUpdateParameter
          type:
            - '@azure/batch.JobUpdateParameter'
          description: The parameters for the request.
        - id: options
          type:
            - Models.JobUpdateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.JobUpdateResponse>
        description: Promise<Models.JobUpdateResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.Job.update_1'
    name: 'update(string, JobUpdateParameter, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function update(jobId: string, jobUpdateParameter: JobUpdateParameter,
        callback: ServiceCallback<void>)
      parameters:
        - id: jobId
          type:
            - string
          description: The ID of the job whose properties you want to update.
        - id: jobUpdateParameter
          type:
            - '@azure/batch.JobUpdateParameter'
          description: The parameters for the request.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/batch'
references:
  - uid: '@azure/batch.BatchServiceClientContext'
    name: BatchServiceClientContext
    spec.typeScript:
      - name: BatchServiceClientContext
        fullName: BatchServiceClientContext
        uid: '@azure/batch.BatchServiceClientContext'
  - uid: '@azure/batch.JobAddParameter'
    name: JobAddParameter
    spec.typeScript:
      - name: JobAddParameter
        fullName: JobAddParameter
        uid: '@azure/batch.JobAddParameter'
  - uid: '@azure/batch.JobAddOptionalParams'
    name: JobAddOptionalParams
    spec.typeScript:
      - name: JobAddOptionalParams
        fullName: JobAddOptionalParams
        uid: '@azure/batch.JobAddOptionalParams'
  - uid: '@azure/batch.JobDeleteMethodOptionalParams'
    name: JobDeleteMethodOptionalParams
    spec.typeScript:
      - name: JobDeleteMethodOptionalParams
        fullName: JobDeleteMethodOptionalParams
        uid: '@azure/batch.JobDeleteMethodOptionalParams'
  - uid: '@azure/batch.JobDisableOptionalParams'
    name: JobDisableOptionalParams
    spec.typeScript:
      - name: JobDisableOptionalParams
        fullName: JobDisableOptionalParams
        uid: '@azure/batch.JobDisableOptionalParams'
  - uid: '@azure/batch.JobEnableOptionalParams'
    name: JobEnableOptionalParams
    spec.typeScript:
      - name: JobEnableOptionalParams
        fullName: JobEnableOptionalParams
        uid: '@azure/batch.JobEnableOptionalParams'
  - uid: ServiceCallback<@azure/batch.CloudJob>
    name: CloudJob>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: CloudJob
        fullName: CloudJob
        uid: '@azure/batch.CloudJob'
      - name: '>'
        fullName: '>'
  - uid: '@azure/batch.JobGetOptionalParams'
    name: JobGetOptionalParams
    spec.typeScript:
      - name: JobGetOptionalParams
        fullName: JobGetOptionalParams
        uid: '@azure/batch.JobGetOptionalParams'
  - uid: ServiceCallback<@azure/batch.JobStatistics>
    name: JobStatistics>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: JobStatistics
        fullName: JobStatistics
        uid: '@azure/batch.JobStatistics'
      - name: '>'
        fullName: '>'
  - uid: '@azure/batch.JobGetAllLifetimeStatisticsOptionalParams'
    name: JobGetAllLifetimeStatisticsOptionalParams
    spec.typeScript:
      - name: JobGetAllLifetimeStatisticsOptionalParams
        fullName: JobGetAllLifetimeStatisticsOptionalParams
        uid: '@azure/batch.JobGetAllLifetimeStatisticsOptionalParams'
  - uid: ServiceCallback<@azure/batch.TaskCounts>
    name: TaskCounts>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: TaskCounts
        fullName: TaskCounts
        uid: '@azure/batch.TaskCounts'
      - name: '>'
        fullName: '>'
  - uid: '@azure/batch.JobGetTaskCountsOptionalParams'
    name: JobGetTaskCountsOptionalParams
    spec.typeScript:
      - name: JobGetTaskCountsOptionalParams
        fullName: JobGetTaskCountsOptionalParams
        uid: '@azure/batch.JobGetTaskCountsOptionalParams'
  - uid: ServiceCallback<@azure/batch.CloudJobListResult>
    name: CloudJobListResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: CloudJobListResult
        fullName: CloudJobListResult
        uid: '@azure/batch.CloudJobListResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/batch.JobListOptionalParams'
    name: JobListOptionalParams
    spec.typeScript:
      - name: JobListOptionalParams
        fullName: JobListOptionalParams
        uid: '@azure/batch.JobListOptionalParams'
  - uid: '@azure/batch.JobListFromJobScheduleOptionalParams'
    name: JobListFromJobScheduleOptionalParams
    spec.typeScript:
      - name: JobListFromJobScheduleOptionalParams
        fullName: JobListFromJobScheduleOptionalParams
        uid: '@azure/batch.JobListFromJobScheduleOptionalParams'
  - uid: '@azure/batch.JobListFromJobScheduleNextOptionalParams'
    name: JobListFromJobScheduleNextOptionalParams
    spec.typeScript:
      - name: JobListFromJobScheduleNextOptionalParams
        fullName: JobListFromJobScheduleNextOptionalParams
        uid: '@azure/batch.JobListFromJobScheduleNextOptionalParams'
  - uid: '@azure/batch.JobListNextOptionalParams'
    name: JobListNextOptionalParams
    spec.typeScript:
      - name: JobListNextOptionalParams
        fullName: JobListNextOptionalParams
        uid: '@azure/batch.JobListNextOptionalParams'
  - uid: >-
      ServiceCallback<@azure/batch.CloudJobListPreparationAndReleaseTaskStatusResult>
    name: CloudJobListPreparationAndReleaseTaskStatusResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: CloudJobListPreparationAndReleaseTaskStatusResult
        fullName: CloudJobListPreparationAndReleaseTaskStatusResult
        uid: '@azure/batch.CloudJobListPreparationAndReleaseTaskStatusResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/batch.JobListPreparationAndReleaseTaskStatusOptionalParams'
    name: JobListPreparationAndReleaseTaskStatusOptionalParams
    spec.typeScript:
      - name: JobListPreparationAndReleaseTaskStatusOptionalParams
        fullName: JobListPreparationAndReleaseTaskStatusOptionalParams
        uid: '@azure/batch.JobListPreparationAndReleaseTaskStatusOptionalParams'
  - uid: '@azure/batch.JobListPreparationAndReleaseTaskStatusNextOptionalParams'
    name: JobListPreparationAndReleaseTaskStatusNextOptionalParams
    spec.typeScript:
      - name: JobListPreparationAndReleaseTaskStatusNextOptionalParams
        fullName: JobListPreparationAndReleaseTaskStatusNextOptionalParams
        uid: '@azure/batch.JobListPreparationAndReleaseTaskStatusNextOptionalParams'
  - uid: '@azure/batch.JobPatchParameter'
    name: JobPatchParameter
    spec.typeScript:
      - name: JobPatchParameter
        fullName: JobPatchParameter
        uid: '@azure/batch.JobPatchParameter'
  - uid: '@azure/batch.JobPatchOptionalParams'
    name: JobPatchOptionalParams
    spec.typeScript:
      - name: JobPatchOptionalParams
        fullName: JobPatchOptionalParams
        uid: '@azure/batch.JobPatchOptionalParams'
  - uid: '@azure/batch.JobTerminateOptionalParams'
    name: JobTerminateOptionalParams
    spec.typeScript:
      - name: JobTerminateOptionalParams
        fullName: JobTerminateOptionalParams
        uid: '@azure/batch.JobTerminateOptionalParams'
  - uid: '@azure/batch.JobUpdateParameter'
    name: JobUpdateParameter
    spec.typeScript:
      - name: JobUpdateParameter
        fullName: JobUpdateParameter
        uid: '@azure/batch.JobUpdateParameter'
  - uid: '@azure/batch.JobUpdateOptionalParams'
    name: JobUpdateOptionalParams
    spec.typeScript:
      - name: JobUpdateOptionalParams
        fullName: JobUpdateOptionalParams
        uid: '@azure/batch.JobUpdateOptionalParams'
