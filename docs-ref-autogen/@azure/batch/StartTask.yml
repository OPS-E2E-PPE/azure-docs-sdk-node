### YamlMime:UniversalReference
items:
  - uid: '@azure/batch.StartTask'
    name: StartTask
    fullName: StartTask
    children:
      - '@azure/batch.StartTask.commandLine'
      - '@azure/batch.StartTask.containerSettings'
      - '@azure/batch.StartTask.environmentSettings'
      - '@azure/batch.StartTask.maxTaskRetryCount'
      - '@azure/batch.StartTask.resourceFiles'
      - '@azure/batch.StartTask.userIdentity'
      - '@azure/batch.StartTask.waitForSuccess'
    langs:
      - typeScript
    type: interface
    summary: >-
      Batch will retry tasks when a recovery operation is triggered on a compute
      node. Examples of

      recovery operations include (but are not limited to) when an unhealthy
      compute node is rebooted

      or a compute node disappeared due to host failure. Retries due to recovery
      operations are

      independent of and are not counted against the maxTaskRetryCount. Even if
      the maxTaskRetryCount

      is 0, an internal retry due to a recovery operation may occur. Because of
      this, all tasks should

      be idempotent. This means tasks need to tolerate being interrupted and
      restarted without causing

      any corruption or duplicate data. The best practice for long running tasks
      is to use some form

      of checkpointing. In some cases the start task may be re-run even though
      the node was not

      rebooted. Special care should be taken to avoid start tasks which create
      breakaway process or

      install/launch services from the start task working directory, as this
      will block Batch from

      being able to re-run the start task.
    package: '@azure/batch'
  - uid: '@azure/batch.StartTask.commandLine'
    name: commandLine
    fullName: commandLine
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The command line of the start task. The command line does not run under a
      shell, and therefore

      cannot take advantage of shell features such as environment variable
      expansion. If you want to

      take advantage of such features, you should invoke the shell in the
      command line, for example

      using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If
      the command line

      refers to file paths, it should use a relative path (relative to the task
      working directory),

      or use the Batch provided environment variable

      (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
    syntax:
      content: 'commandLine: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/batch'
  - uid: '@azure/batch.StartTask.containerSettings'
    name: containerSettings
    fullName: containerSettings
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The settings for the container under which the start task runs. When this
      is specified, all

      directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of
      Azure Batch directories

      on the node) are mapped into the container, all task environment variables
      are mapped into the

      container, and the task command line is executed in the container.
    optional: true
    syntax:
      content: 'containerSettings?: TaskContainerSettings'
      return:
        type:
          - '@azure/batch.TaskContainerSettings'
        description: ''
    package: '@azure/batch'
  - uid: '@azure/batch.StartTask.environmentSettings'
    name: environmentSettings
    fullName: environmentSettings
    children: []
    langs:
      - typeScript
    type: property
    summary: A list of environment variable settings for the start task.
    optional: true
    syntax:
      content: 'environmentSettings?: EnvironmentSetting[]'
      return:
        type:
          - '@azure/batch.EnvironmentSetting[]'
        description: ''
    package: '@azure/batch'
  - uid: '@azure/batch.StartTask.maxTaskRetryCount'
    name: maxTaskRetryCount
    fullName: maxTaskRetryCount
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The maximum number of times the task may be retried. The Batch service
      retries a task if its

      exit code is nonzero. Note that this value specifically controls the
      number of retries. The

      Batch service will try the task once, and may then retry up to this limit.
      For example, if the

      maximum retry count is 3, Batch tries the task up to 4 times (one initial
      try and 3 retries).

      If the maximum retry count is 0, the Batch service does not retry the
      task. If the maximum

      retry count is -1, the Batch service retries the task without limit.
    optional: true
    syntax:
      content: 'maxTaskRetryCount?: undefined | number'
      return:
        type:
          - undefined | number
        description: ''
    package: '@azure/batch'
  - uid: '@azure/batch.StartTask.resourceFiles'
    name: resourceFiles
    fullName: resourceFiles
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      A list of files that the Batch service will download to the compute node
      before running the

      command line.  There is a maximum size for the list of resource files.
      When the max size is

      exceeded, the request will fail and the response error code will be
      RequestEntityTooLarge. If

      this occurs, the collection of ResourceFiles must be reduced in size. This
      can be achieved

      using .zip files, Application Packages, or Docker Containers. Files listed
      under this element

      are located in the task's working directory.
    optional: true
    syntax:
      content: 'resourceFiles?: ResourceFile[]'
      return:
        type:
          - '@azure/batch.ResourceFile[]'
        description: ''
    package: '@azure/batch'
  - uid: '@azure/batch.StartTask.userIdentity'
    name: userIdentity
    fullName: userIdentity
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The user identity under which the start task runs. If omitted, the task
      runs as a

      non-administrative user unique to the task.
    optional: true
    syntax:
      content: 'userIdentity?: UserIdentity'
      return:
        type:
          - '@azure/batch.UserIdentity'
        description: ''
    package: '@azure/batch'
  - uid: '@azure/batch.StartTask.waitForSuccess'
    name: waitForSuccess
    fullName: waitForSuccess
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Whether the Batch service should wait for the start task to complete
      successfully (that is, to

      exit with exit code 0) before scheduling any tasks on the compute node. If
      true and the start

      task fails on a compute node, the Batch service retries the start task up
      to its maximum retry

      count (maxTaskRetryCount). If the task has still not completed
      successfully after all retries,

      then the Batch service marks the compute node unusable, and will not
      schedule tasks to it.

      This condition can be detected via the node state and failure info
      details. If false, the

      Batch service will not wait for the start task to complete. In this case,
      other tasks can

      start executing on the compute node while the start task is still running;
      and even if the

      start task fails, new tasks will continue to be scheduled on the node. The
      default is false.
    optional: true
    syntax:
      content: 'waitForSuccess?: undefined | false | true'
      return:
        type:
          - undefined | false | true
        description: ''
    package: '@azure/batch'
references:
  - uid: '@azure/batch.TaskContainerSettings'
    name: TaskContainerSettings
    spec.typeScript:
      - name: TaskContainerSettings
        fullName: TaskContainerSettings
        uid: '@azure/batch.TaskContainerSettings'
  - uid: '@azure/batch.EnvironmentSetting[]'
    name: 'EnvironmentSetting[]'
    spec.typeScript:
      - name: EnvironmentSetting
        fullName: EnvironmentSetting
        uid: '@azure/batch.EnvironmentSetting'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/batch.ResourceFile[]'
    name: 'ResourceFile[]'
    spec.typeScript:
      - name: ResourceFile
        fullName: ResourceFile
        uid: '@azure/batch.ResourceFile'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/batch.UserIdentity'
    name: UserIdentity
    spec.typeScript:
      - name: UserIdentity
        fullName: UserIdentity
        uid: '@azure/batch.UserIdentity'
