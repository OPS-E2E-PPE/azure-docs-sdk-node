### YamlMime:UniversalReference
items:
  - uid: '@azure/batch.Schedule'
    name: Schedule
    fullName: Schedule
    children:
      - '@azure/batch.Schedule.doNotRunAfter'
      - '@azure/batch.Schedule.doNotRunUntil'
      - '@azure/batch.Schedule.recurrenceInterval'
      - '@azure/batch.Schedule.startWindow'
    langs:
      - typeScript
    type: interface
    summary: An interface representing Schedule.
    package: '@azure/batch'
  - uid: '@azure/batch.Schedule.doNotRunAfter'
    name: doNotRunAfter
    fullName: doNotRunAfter
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      A time after which no job will be created under this job schedule. The
      schedule will move to

      the completed state as soon as this deadline is past and there is no
      active job under this job

      schedule. If you do not specify a doNotRunAfter time, and you are creating
      a recurring job

      schedule, the job schedule will remain active until you explicitly
      terminate it.
    optional: true
    syntax:
      content: 'doNotRunAfter?: Date'
      return:
        type:
          - Date
        description: ''
    package: '@azure/batch'
  - uid: '@azure/batch.Schedule.doNotRunUntil'
    name: doNotRunUntil
    fullName: doNotRunUntil
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The earliest time at which any job may be created under this job schedule.
      If you do not

      specify a doNotRunUntil time, the schedule becomes ready to create jobs
      immediately.
    optional: true
    syntax:
      content: 'doNotRunUntil?: Date'
      return:
        type:
          - Date
        description: ''
    package: '@azure/batch'
  - uid: '@azure/batch.Schedule.recurrenceInterval'
    name: recurrenceInterval
    fullName: recurrenceInterval
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The time interval between the start times of two successive jobs under the
      job schedule. A job

      schedule can have at most one active job under it at any given time.
      Because a job schedule

      can have at most one active job under it at any given time, if it is time
      to create a new job

      under a job schedule, but the previous job is still running, the Batch
      service will not create

      the new job until the previous job finishes. If the previous job does not
      finish within the

      startWindow period of the new recurrenceInterval, then no new job will be
      scheduled for that

      interval. For recurring jobs, you should normally specify a jobManagerTask
      in the

      jobSpecification. If you do not use jobManagerTask, you will need an
      external process to

      monitor when jobs are created, add tasks to the jobs and terminate the
      jobs ready for the next

      recurrence. The default is that the schedule does not recur: one job is
      created, within the

      startWindow after the doNotRunUntil time, and the schedule is complete as
      soon as that job

      finishes. The minimum value is 1 minute. If you specify a lower value, the
      Batch service

      rejects the schedule with an error; if you are calling the REST API
      directly, the HTTP status

      code is 400 (Bad Request).
    optional: true
    syntax:
      content: 'recurrenceInterval?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: '@azure/batch'
  - uid: '@azure/batch.Schedule.startWindow'
    name: startWindow
    fullName: startWindow
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The time interval, starting from the time at which the schedule indicates
      a job should be

      created, within which a job must be created. If a job is not created
      within the startWindow

      interval, then the 'opportunity' is lost; no job will be created until the
      next recurrence of

      the schedule. If the schedule is recurring, and the startWindow is longer
      than the recurrence

      interval, then this is equivalent to an infinite startWindow, because the
      job that is 'due' in

      one recurrenceInterval is not carried forward into the next recurrence
      interval. The default

      is infinite. The minimum value is 1 minute. If you specify a lower value,
      the Batch service

      rejects the schedule with an error; if you are calling the REST API
      directly, the HTTP status

      code is 400 (Bad Request).
    optional: true
    syntax:
      content: 'startWindow?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: '@azure/batch'
