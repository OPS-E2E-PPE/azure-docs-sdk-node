### YamlMime:UniversalReference
items:
  - uid: '@azure/batch.ComputeNodeOperations'
    name: ComputeNodeOperations
    fullName: ComputeNodeOperations
    children:
      - '@azure/batch.ComputeNodeOperations.addUser_2'
      - '@azure/batch.ComputeNodeOperations.addUser'
      - '@azure/batch.ComputeNodeOperations.addUser_1'
      - '@azure/batch.ComputeNodeOperations.constructor'
      - '@azure/batch.ComputeNodeOperations.deleteUser_2'
      - '@azure/batch.ComputeNodeOperations.deleteUser'
      - '@azure/batch.ComputeNodeOperations.deleteUser_1'
      - '@azure/batch.ComputeNodeOperations.disableScheduling_2'
      - '@azure/batch.ComputeNodeOperations.disableScheduling'
      - '@azure/batch.ComputeNodeOperations.disableScheduling_1'
      - '@azure/batch.ComputeNodeOperations.enableScheduling_2'
      - '@azure/batch.ComputeNodeOperations.enableScheduling'
      - '@azure/batch.ComputeNodeOperations.enableScheduling_1'
      - '@azure/batch.ComputeNodeOperations.get_2'
      - '@azure/batch.ComputeNodeOperations.get'
      - '@azure/batch.ComputeNodeOperations.get_1'
      - '@azure/batch.ComputeNodeOperations.getRemoteDesktop_2'
      - '@azure/batch.ComputeNodeOperations.getRemoteDesktop'
      - '@azure/batch.ComputeNodeOperations.getRemoteDesktop_1'
      - '@azure/batch.ComputeNodeOperations.getRemoteLoginSettings_2'
      - '@azure/batch.ComputeNodeOperations.getRemoteLoginSettings'
      - '@azure/batch.ComputeNodeOperations.getRemoteLoginSettings_1'
      - '@azure/batch.ComputeNodeOperations.list_2'
      - '@azure/batch.ComputeNodeOperations.list'
      - '@azure/batch.ComputeNodeOperations.list_1'
      - '@azure/batch.ComputeNodeOperations.listNext_2'
      - '@azure/batch.ComputeNodeOperations.listNext'
      - '@azure/batch.ComputeNodeOperations.listNext_1'
      - '@azure/batch.ComputeNodeOperations.reboot_2'
      - '@azure/batch.ComputeNodeOperations.reboot'
      - '@azure/batch.ComputeNodeOperations.reboot_1'
      - '@azure/batch.ComputeNodeOperations.reimage_2'
      - '@azure/batch.ComputeNodeOperations.reimage'
      - '@azure/batch.ComputeNodeOperations.reimage_1'
      - '@azure/batch.ComputeNodeOperations.updateUser_2'
      - '@azure/batch.ComputeNodeOperations.updateUser'
      - '@azure/batch.ComputeNodeOperations.updateUser_1'
      - '@azure/batch.ComputeNodeOperations.uploadBatchServiceLogs_2'
      - '@azure/batch.ComputeNodeOperations.uploadBatchServiceLogs'
      - '@azure/batch.ComputeNodeOperations.uploadBatchServiceLogs_1'
    langs:
      - typeScript
    type: class
    summary: Class representing a ComputeNodeOperations.
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.addUser_2'
    name: >-
      addUser(string, string, ComputeNodeUser, ComputeNodeAddUserOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function addUser(poolId: string, nodeId: string, user: ComputeNodeUser,
        options: ComputeNodeAddUserOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool that contains the compute node.
        - id: nodeId
          type:
            - string
          description: The ID of the machine on which you want to create a user account.
        - id: user
          type:
            - '@azure/batch.ComputeNodeUser'
          description: The user account to be created.
        - id: options
          type:
            - '@azure/batch.ComputeNodeAddUserOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.addUser'
    name: >-
      addUser(string, string, ComputeNodeUser,
      Models.ComputeNodeAddUserOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      You can add a user account to a node only when it is in the idle or
      running state.
    syntax:
      content: >-
        function addUser(poolId: string, nodeId: string, user: ComputeNodeUser,
        options?: Models.ComputeNodeAddUserOptionalParams)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool that contains the compute node.
        - id: nodeId
          type:
            - string
          description: The ID of the machine on which you want to create a user account.
        - id: user
          type:
            - '@azure/batch.ComputeNodeUser'
          description: The user account to be created.
        - id: options
          type:
            - Models.ComputeNodeAddUserOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.ComputeNodeAddUserResponse>
        description: Promise<Models.ComputeNodeAddUserResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.addUser_1'
    name: 'addUser(string, string, ComputeNodeUser, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function addUser(poolId: string, nodeId: string, user: ComputeNodeUser,
        callback: ServiceCallback<void>)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool that contains the compute node.
        - id: nodeId
          type:
            - string
          description: The ID of the machine on which you want to create a user account.
        - id: user
          type:
            - '@azure/batch.ComputeNodeUser'
          description: The user account to be created.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.constructor'
    name: ComputeNodeOperations(BatchServiceClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Create a ComputeNodeOperations.
    syntax:
      content: 'new ComputeNodeOperations(client: BatchServiceClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/batch.BatchServiceClientContext'
          description: |
            Reference to the service client.
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.deleteUser_2'
    name: >-
      deleteUser(string, string, string, ComputeNodeDeleteUserOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteUser(poolId: string, nodeId: string, userName: string,
        options: ComputeNodeDeleteUserOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool that contains the compute node.
        - id: nodeId
          type:
            - string
          description: The ID of the machine on which you want to delete a user account.
        - id: userName
          type:
            - string
          description: The name of the user account to delete.
        - id: options
          type:
            - '@azure/batch.ComputeNodeDeleteUserOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.deleteUser'
    name: >-
      deleteUser(string, string, string,
      Models.ComputeNodeDeleteUserOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      You can delete a user account to a node only when it is in the idle or
      running state.
    syntax:
      content: >-
        function deleteUser(poolId: string, nodeId: string, userName: string,
        options?: Models.ComputeNodeDeleteUserOptionalParams)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool that contains the compute node.
        - id: nodeId
          type:
            - string
          description: The ID of the machine on which you want to delete a user account.
        - id: userName
          type:
            - string
          description: The name of the user account to delete.
        - id: options
          type:
            - Models.ComputeNodeDeleteUserOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.ComputeNodeDeleteUserResponse>
        description: Promise<Models.ComputeNodeDeleteUserResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.deleteUser_1'
    name: 'deleteUser(string, string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteUser(poolId: string, nodeId: string, userName: string,
        callback: ServiceCallback<void>)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool that contains the compute node.
        - id: nodeId
          type:
            - string
          description: The ID of the machine on which you want to delete a user account.
        - id: userName
          type:
            - string
          description: The name of the user account to delete.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.disableScheduling_2'
    name: >-
      disableScheduling(string, string,
      ComputeNodeDisableSchedulingOptionalParams, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function disableScheduling(poolId: string, nodeId: string, options:
        ComputeNodeDisableSchedulingOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool that contains the compute node.
        - id: nodeId
          type:
            - string
          description: >-
            The ID of the compute node on which you want to disable task
            scheduling.
        - id: options
          type:
            - '@azure/batch.ComputeNodeDisableSchedulingOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.disableScheduling'
    name: >-
      disableScheduling(string, string,
      Models.ComputeNodeDisableSchedulingOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      You can disable task scheduling on a node only if its current scheduling
      state is enabled.
    syntax:
      content: >-
        function disableScheduling(poolId: string, nodeId: string, options?:
        Models.ComputeNodeDisableSchedulingOptionalParams)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool that contains the compute node.
        - id: nodeId
          type:
            - string
          description: >-
            The ID of the compute node on which you want to disable task
            scheduling.
        - id: options
          type:
            - Models.ComputeNodeDisableSchedulingOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.ComputeNodeDisableSchedulingResponse>
        description: Promise<Models.ComputeNodeDisableSchedulingResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.disableScheduling_1'
    name: 'disableScheduling(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function disableScheduling(poolId: string, nodeId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool that contains the compute node.
        - id: nodeId
          type:
            - string
          description: >-
            The ID of the compute node on which you want to disable task
            scheduling.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.enableScheduling_2'
    name: >-
      enableScheduling(string, string,
      ComputeNodeEnableSchedulingOptionalParams, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function enableScheduling(poolId: string, nodeId: string, options:
        ComputeNodeEnableSchedulingOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool that contains the compute node.
        - id: nodeId
          type:
            - string
          description: >-
            The ID of the compute node on which you want to enable task
            scheduling.
        - id: options
          type:
            - '@azure/batch.ComputeNodeEnableSchedulingOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.enableScheduling'
    name: >-
      enableScheduling(string, string,
      Models.ComputeNodeEnableSchedulingOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      You can enable task scheduling on a node only if its current scheduling
      state is disabled
    syntax:
      content: >-
        function enableScheduling(poolId: string, nodeId: string, options?:
        Models.ComputeNodeEnableSchedulingOptionalParams)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool that contains the compute node.
        - id: nodeId
          type:
            - string
          description: >-
            The ID of the compute node on which you want to enable task
            scheduling.
        - id: options
          type:
            - Models.ComputeNodeEnableSchedulingOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.ComputeNodeEnableSchedulingResponse>
        description: Promise<Models.ComputeNodeEnableSchedulingResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.enableScheduling_1'
    name: 'enableScheduling(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function enableScheduling(poolId: string, nodeId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool that contains the compute node.
        - id: nodeId
          type:
            - string
          description: >-
            The ID of the compute node on which you want to enable task
            scheduling.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.get_2'
    name: >-
      get(string, string, ComputeNodeGetOptionalParams,
      ServiceCallback<ComputeNode>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function get(poolId: string, nodeId: string, options:
        ComputeNodeGetOptionalParams, callback: ServiceCallback<ComputeNode>)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool that contains the compute node.
        - id: nodeId
          type:
            - string
          description: The ID of the compute node that you want to get information about.
        - id: options
          type:
            - '@azure/batch.ComputeNodeGetOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/batch.ComputeNode>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.get'
    name: 'get(string, string, Models.ComputeNodeGetOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function get(poolId: string, nodeId: string, options?:
        Models.ComputeNodeGetOptionalParams)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool that contains the compute node.
        - id: nodeId
          type:
            - string
          description: The ID of the compute node that you want to get information about.
        - id: options
          type:
            - Models.ComputeNodeGetOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.ComputeNodeGetResponse>
        description: Promise<Models.ComputeNodeGetResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.get_1'
    name: 'get(string, string, ServiceCallback<ComputeNode>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function get(poolId: string, nodeId: string, callback:
        ServiceCallback<ComputeNode>)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool that contains the compute node.
        - id: nodeId
          type:
            - string
          description: The ID of the compute node that you want to get information about.
        - id: callback
          type:
            - ServiceCallback<@azure/batch.ComputeNode>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.getRemoteDesktop_2'
    name: >-
      getRemoteDesktop(string, string,
      ComputeNodeGetRemoteDesktopOptionalParams, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getRemoteDesktop(poolId: string, nodeId: string, options:
        ComputeNodeGetRemoteDesktopOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool that contains the compute node.
        - id: nodeId
          type:
            - string
          description: >-
            The ID of the compute node for which you want to get the Remote
            Desktop Protocol

            file.
        - id: options
          type:
            - '@azure/batch.ComputeNodeGetRemoteDesktopOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.getRemoteDesktop'
    name: >-
      getRemoteDesktop(string, string,
      Models.ComputeNodeGetRemoteDesktopOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Before you can access a node by using the RDP file, you must create a user
      account on the node.

      This API can only be invoked on pools created with a cloud service
      configuration. For pools

      created with a virtual machine configuration, see the
      GetRemoteLoginSettings API.
    syntax:
      content: >-
        function getRemoteDesktop(poolId: string, nodeId: string, options?:
        Models.ComputeNodeGetRemoteDesktopOptionalParams)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool that contains the compute node.
        - id: nodeId
          type:
            - string
          description: >-
            The ID of the compute node for which you want to get the Remote
            Desktop Protocol

            file.
        - id: options
          type:
            - Models.ComputeNodeGetRemoteDesktopOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.ComputeNodeGetRemoteDesktopResponse>
        description: Promise<Models.ComputeNodeGetRemoteDesktopResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.getRemoteDesktop_1'
    name: 'getRemoteDesktop(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getRemoteDesktop(poolId: string, nodeId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool that contains the compute node.
        - id: nodeId
          type:
            - string
          description: >-
            The ID of the compute node for which you want to get the Remote
            Desktop Protocol

            file.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.getRemoteLoginSettings_2'
    name: >-
      getRemoteLoginSettings(string, string,
      ComputeNodeGetRemoteLoginSettingsOptionalParams,
      ServiceCallback<ComputeNodeGetRemoteLoginSettingsResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getRemoteLoginSettings(poolId: string, nodeId: string, options:
        ComputeNodeGetRemoteLoginSettingsOptionalParams, callback:
        ServiceCallback<ComputeNodeGetRemoteLoginSettingsResult>)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool that contains the compute node.
        - id: nodeId
          type:
            - string
          description: >-
            The ID of the compute node for which to obtain the remote login
            settings.
        - id: options
          type:
            - '@azure/batch.ComputeNodeGetRemoteLoginSettingsOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/batch.ComputeNodeGetRemoteLoginSettingsResult>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.getRemoteLoginSettings'
    name: >-
      getRemoteLoginSettings(string, string,
      Models.ComputeNodeGetRemoteLoginSettingsOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Before you can remotely login to a node using the remote login settings,
      you must create a user

      account on the node. This API can be invoked only on pools created with
      the virtual machine

      configuration property. For pools created with a cloud service
      configuration, see the

      GetRemoteDesktop API.
    syntax:
      content: >-
        function getRemoteLoginSettings(poolId: string, nodeId: string,
        options?: Models.ComputeNodeGetRemoteLoginSettingsOptionalParams)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool that contains the compute node.
        - id: nodeId
          type:
            - string
          description: >-
            The ID of the compute node for which to obtain the remote login
            settings.
        - id: options
          type:
            - Models.ComputeNodeGetRemoteLoginSettingsOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.ComputeNodeGetRemoteLoginSettingsResponse>
        description: Promise<Models.ComputeNodeGetRemoteLoginSettingsResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.getRemoteLoginSettings_1'
    name: >-
      getRemoteLoginSettings(string, string,
      ServiceCallback<ComputeNodeGetRemoteLoginSettingsResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getRemoteLoginSettings(poolId: string, nodeId: string,
        callback: ServiceCallback<ComputeNodeGetRemoteLoginSettingsResult>)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool that contains the compute node.
        - id: nodeId
          type:
            - string
          description: >-
            The ID of the compute node for which to obtain the remote login
            settings.
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/batch.ComputeNodeGetRemoteLoginSettingsResult>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.list_2'
    name: >-
      list(string, ComputeNodeListOptionalParams,
      ServiceCallback<ComputeNodeListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function list(poolId: string, options: ComputeNodeListOptionalParams,
        callback: ServiceCallback<ComputeNodeListResult>)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool from which you want to list nodes.
        - id: options
          type:
            - '@azure/batch.ComputeNodeListOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/batch.ComputeNodeListResult>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.list'
    name: 'list(string, Models.ComputeNodeListOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function list(poolId: string, options?:
        Models.ComputeNodeListOptionalParams)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool from which you want to list nodes.
        - id: options
          type:
            - Models.ComputeNodeListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.ComputeNodeListResponse>
        description: Promise<Models.ComputeNodeListResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.list_1'
    name: 'list(string, ServiceCallback<ComputeNodeListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function list(poolId: string, callback:
        ServiceCallback<ComputeNodeListResult>)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool from which you want to list nodes.
        - id: callback
          type:
            - ServiceCallback<@azure/batch.ComputeNodeListResult>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.listNext_2'
    name: >-
      listNext(string, ComputeNodeListNextOptionalParams,
      ServiceCallback<ComputeNodeListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listNext(nextPageLink: string, options:
        ComputeNodeListNextOptionalParams, callback:
        ServiceCallback<ComputeNodeListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - '@azure/batch.ComputeNodeListNextOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/batch.ComputeNodeListResult>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.listNext'
    name: 'listNext(string, Models.ComputeNodeListNextOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listNext(nextPageLink: string, options?:
        Models.ComputeNodeListNextOptionalParams)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - Models.ComputeNodeListNextOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.ComputeNodeListResponse>
        description: Promise<Models.ComputeNodeListResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.listNext_1'
    name: 'listNext(string, ServiceCallback<ComputeNodeListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listNext(nextPageLink: string, callback:
        ServiceCallback<ComputeNodeListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type:
            - ServiceCallback<@azure/batch.ComputeNodeListResult>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.reboot_2'
    name: >-
      reboot(string, string, ComputeNodeRebootOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function reboot(poolId: string, nodeId: string, options:
        ComputeNodeRebootOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool that contains the compute node.
        - id: nodeId
          type:
            - string
          description: The ID of the compute node that you want to restart.
        - id: options
          type:
            - '@azure/batch.ComputeNodeRebootOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.reboot'
    name: 'reboot(string, string, Models.ComputeNodeRebootOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: You can restart a node only if it is in an idle or running state.
    syntax:
      content: >-
        function reboot(poolId: string, nodeId: string, options?:
        Models.ComputeNodeRebootOptionalParams)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool that contains the compute node.
        - id: nodeId
          type:
            - string
          description: The ID of the compute node that you want to restart.
        - id: options
          type:
            - Models.ComputeNodeRebootOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.ComputeNodeRebootResponse>
        description: Promise<Models.ComputeNodeRebootResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.reboot_1'
    name: 'reboot(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function reboot(poolId: string, nodeId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool that contains the compute node.
        - id: nodeId
          type:
            - string
          description: The ID of the compute node that you want to restart.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.reimage_2'
    name: >-
      reimage(string, string, ComputeNodeReimageOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function reimage(poolId: string, nodeId: string, options:
        ComputeNodeReimageOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool that contains the compute node.
        - id: nodeId
          type:
            - string
          description: The ID of the compute node that you want to restart.
        - id: options
          type:
            - '@azure/batch.ComputeNodeReimageOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.reimage'
    name: 'reimage(string, string, Models.ComputeNodeReimageOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      You can reinstall the operating system on a node only if it is in an idle
      or running state. This

      API can be invoked only on pools created with the cloud service
      configuration property.
    syntax:
      content: >-
        function reimage(poolId: string, nodeId: string, options?:
        Models.ComputeNodeReimageOptionalParams)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool that contains the compute node.
        - id: nodeId
          type:
            - string
          description: The ID of the compute node that you want to restart.
        - id: options
          type:
            - Models.ComputeNodeReimageOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.ComputeNodeReimageResponse>
        description: Promise<Models.ComputeNodeReimageResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.reimage_1'
    name: 'reimage(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function reimage(poolId: string, nodeId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool that contains the compute node.
        - id: nodeId
          type:
            - string
          description: The ID of the compute node that you want to restart.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.updateUser_2'
    name: >-
      updateUser(string, string, string, NodeUpdateUserParameter,
      ComputeNodeUpdateUserOptionalParams, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function updateUser(poolId: string, nodeId: string, userName: string,
        nodeUpdateUserParameter: NodeUpdateUserParameter, options:
        ComputeNodeUpdateUserOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool that contains the compute node.
        - id: nodeId
          type:
            - string
          description: The ID of the machine on which you want to update a user account.
        - id: userName
          type:
            - string
          description: The name of the user account to update.
        - id: nodeUpdateUserParameter
          type:
            - '@azure/batch.NodeUpdateUserParameter'
          description: The parameters for the request.
        - id: options
          type:
            - '@azure/batch.ComputeNodeUpdateUserOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.updateUser'
    name: >-
      updateUser(string, string, string, NodeUpdateUserParameter,
      Models.ComputeNodeUpdateUserOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This operation replaces of all the updatable properties of the account.
      For example, if the

      expiryTime element is not specified, the current value is replaced with
      the default value, not

      left unmodified. You can update a user account on a node only when it is
      in the idle or running

      state.
    syntax:
      content: >-
        function updateUser(poolId: string, nodeId: string, userName: string,
        nodeUpdateUserParameter: NodeUpdateUserParameter, options?:
        Models.ComputeNodeUpdateUserOptionalParams)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool that contains the compute node.
        - id: nodeId
          type:
            - string
          description: The ID of the machine on which you want to update a user account.
        - id: userName
          type:
            - string
          description: The name of the user account to update.
        - id: nodeUpdateUserParameter
          type:
            - '@azure/batch.NodeUpdateUserParameter'
          description: The parameters for the request.
        - id: options
          type:
            - Models.ComputeNodeUpdateUserOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.ComputeNodeUpdateUserResponse>
        description: Promise<Models.ComputeNodeUpdateUserResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.updateUser_1'
    name: >-
      updateUser(string, string, string, NodeUpdateUserParameter,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function updateUser(poolId: string, nodeId: string, userName: string,
        nodeUpdateUserParameter: NodeUpdateUserParameter, callback:
        ServiceCallback<void>)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool that contains the compute node.
        - id: nodeId
          type:
            - string
          description: The ID of the machine on which you want to update a user account.
        - id: userName
          type:
            - string
          description: The name of the user account to update.
        - id: nodeUpdateUserParameter
          type:
            - '@azure/batch.NodeUpdateUserParameter'
          description: The parameters for the request.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.uploadBatchServiceLogs_2'
    name: >-
      uploadBatchServiceLogs(string, string,
      UploadBatchServiceLogsConfiguration,
      ComputeNodeUploadBatchServiceLogsOptionalParams,
      ServiceCallback<UploadBatchServiceLogsResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function uploadBatchServiceLogs(poolId: string, nodeId: string,
        uploadBatchServiceLogsConfiguration:
        UploadBatchServiceLogsConfiguration, options:
        ComputeNodeUploadBatchServiceLogsOptionalParams, callback:
        ServiceCallback<UploadBatchServiceLogsResult>)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool that contains the compute node.
        - id: nodeId
          type:
            - string
          description: >-
            The ID of the compute node from which you want to upload the Azure
            Batch service

            log files.
        - id: uploadBatchServiceLogsConfiguration
          type:
            - '@azure/batch.UploadBatchServiceLogsConfiguration'
          description: |-
            The Azure Batch service log files upload
            configuration.
        - id: options
          type:
            - '@azure/batch.ComputeNodeUploadBatchServiceLogsOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/batch.UploadBatchServiceLogsResult>
          description: |
            The callback
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.uploadBatchServiceLogs'
    name: >-
      uploadBatchServiceLogs(string, string,
      UploadBatchServiceLogsConfiguration,
      Models.ComputeNodeUploadBatchServiceLogsOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This is for gathering Azure Batch service log files in an automated
      fashion from nodes if you

      are experiencing an error and wish to escalate to Azure support. The Azure
      Batch service log

      files should be shared with Azure support to aid in debugging issues with
      the Batch service.
    syntax:
      content: >-
        function uploadBatchServiceLogs(poolId: string, nodeId: string,
        uploadBatchServiceLogsConfiguration:
        UploadBatchServiceLogsConfiguration, options?:
        Models.ComputeNodeUploadBatchServiceLogsOptionalParams)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool that contains the compute node.
        - id: nodeId
          type:
            - string
          description: >-
            The ID of the compute node from which you want to upload the Azure
            Batch service

            log files.
        - id: uploadBatchServiceLogsConfiguration
          type:
            - '@azure/batch.UploadBatchServiceLogsConfiguration'
          description: |-
            The Azure Batch service log files upload
            configuration.
        - id: options
          type:
            - Models.ComputeNodeUploadBatchServiceLogsOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.ComputeNodeUploadBatchServiceLogsResponse>
        description: Promise<Models.ComputeNodeUploadBatchServiceLogsResponse>
    package: '@azure/batch'
  - uid: '@azure/batch.ComputeNodeOperations.uploadBatchServiceLogs_1'
    name: >-
      uploadBatchServiceLogs(string, string,
      UploadBatchServiceLogsConfiguration,
      ServiceCallback<UploadBatchServiceLogsResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function uploadBatchServiceLogs(poolId: string, nodeId: string,
        uploadBatchServiceLogsConfiguration:
        UploadBatchServiceLogsConfiguration, callback:
        ServiceCallback<UploadBatchServiceLogsResult>)
      parameters:
        - id: poolId
          type:
            - string
          description: The ID of the pool that contains the compute node.
        - id: nodeId
          type:
            - string
          description: >-
            The ID of the compute node from which you want to upload the Azure
            Batch service

            log files.
        - id: uploadBatchServiceLogsConfiguration
          type:
            - '@azure/batch.UploadBatchServiceLogsConfiguration'
          description: |-
            The Azure Batch service log files upload
            configuration.
        - id: callback
          type:
            - ServiceCallback<@azure/batch.UploadBatchServiceLogsResult>
          description: |
            The callback
    package: '@azure/batch'
references:
  - uid: '@azure/batch.BatchServiceClientContext'
    name: BatchServiceClientContext
    spec.typeScript:
      - name: BatchServiceClientContext
        fullName: BatchServiceClientContext
        uid: '@azure/batch.BatchServiceClientContext'
  - uid: '@azure/batch.ComputeNodeUser'
    name: ComputeNodeUser
    spec.typeScript:
      - name: ComputeNodeUser
        fullName: ComputeNodeUser
        uid: '@azure/batch.ComputeNodeUser'
  - uid: '@azure/batch.ComputeNodeAddUserOptionalParams'
    name: ComputeNodeAddUserOptionalParams
    spec.typeScript:
      - name: ComputeNodeAddUserOptionalParams
        fullName: ComputeNodeAddUserOptionalParams
        uid: '@azure/batch.ComputeNodeAddUserOptionalParams'
  - uid: '@azure/batch.ComputeNodeDeleteUserOptionalParams'
    name: ComputeNodeDeleteUserOptionalParams
    spec.typeScript:
      - name: ComputeNodeDeleteUserOptionalParams
        fullName: ComputeNodeDeleteUserOptionalParams
        uid: '@azure/batch.ComputeNodeDeleteUserOptionalParams'
  - uid: '@azure/batch.ComputeNodeDisableSchedulingOptionalParams'
    name: ComputeNodeDisableSchedulingOptionalParams
    spec.typeScript:
      - name: ComputeNodeDisableSchedulingOptionalParams
        fullName: ComputeNodeDisableSchedulingOptionalParams
        uid: '@azure/batch.ComputeNodeDisableSchedulingOptionalParams'
  - uid: '@azure/batch.ComputeNodeEnableSchedulingOptionalParams'
    name: ComputeNodeEnableSchedulingOptionalParams
    spec.typeScript:
      - name: ComputeNodeEnableSchedulingOptionalParams
        fullName: ComputeNodeEnableSchedulingOptionalParams
        uid: '@azure/batch.ComputeNodeEnableSchedulingOptionalParams'
  - uid: ServiceCallback<@azure/batch.ComputeNode>
    name: ComputeNode>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ComputeNode
        fullName: ComputeNode
        uid: '@azure/batch.ComputeNode'
      - name: '>'
        fullName: '>'
  - uid: '@azure/batch.ComputeNodeGetOptionalParams'
    name: ComputeNodeGetOptionalParams
    spec.typeScript:
      - name: ComputeNodeGetOptionalParams
        fullName: ComputeNodeGetOptionalParams
        uid: '@azure/batch.ComputeNodeGetOptionalParams'
  - uid: '@azure/batch.ComputeNodeGetRemoteDesktopOptionalParams'
    name: ComputeNodeGetRemoteDesktopOptionalParams
    spec.typeScript:
      - name: ComputeNodeGetRemoteDesktopOptionalParams
        fullName: ComputeNodeGetRemoteDesktopOptionalParams
        uid: '@azure/batch.ComputeNodeGetRemoteDesktopOptionalParams'
  - uid: ServiceCallback<@azure/batch.ComputeNodeGetRemoteLoginSettingsResult>
    name: ComputeNodeGetRemoteLoginSettingsResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ComputeNodeGetRemoteLoginSettingsResult
        fullName: ComputeNodeGetRemoteLoginSettingsResult
        uid: '@azure/batch.ComputeNodeGetRemoteLoginSettingsResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/batch.ComputeNodeGetRemoteLoginSettingsOptionalParams'
    name: ComputeNodeGetRemoteLoginSettingsOptionalParams
    spec.typeScript:
      - name: ComputeNodeGetRemoteLoginSettingsOptionalParams
        fullName: ComputeNodeGetRemoteLoginSettingsOptionalParams
        uid: '@azure/batch.ComputeNodeGetRemoteLoginSettingsOptionalParams'
  - uid: ServiceCallback<@azure/batch.ComputeNodeListResult>
    name: ComputeNodeListResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ComputeNodeListResult
        fullName: ComputeNodeListResult
        uid: '@azure/batch.ComputeNodeListResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/batch.ComputeNodeListOptionalParams'
    name: ComputeNodeListOptionalParams
    spec.typeScript:
      - name: ComputeNodeListOptionalParams
        fullName: ComputeNodeListOptionalParams
        uid: '@azure/batch.ComputeNodeListOptionalParams'
  - uid: '@azure/batch.ComputeNodeListNextOptionalParams'
    name: ComputeNodeListNextOptionalParams
    spec.typeScript:
      - name: ComputeNodeListNextOptionalParams
        fullName: ComputeNodeListNextOptionalParams
        uid: '@azure/batch.ComputeNodeListNextOptionalParams'
  - uid: '@azure/batch.ComputeNodeRebootOptionalParams'
    name: ComputeNodeRebootOptionalParams
    spec.typeScript:
      - name: ComputeNodeRebootOptionalParams
        fullName: ComputeNodeRebootOptionalParams
        uid: '@azure/batch.ComputeNodeRebootOptionalParams'
  - uid: '@azure/batch.ComputeNodeReimageOptionalParams'
    name: ComputeNodeReimageOptionalParams
    spec.typeScript:
      - name: ComputeNodeReimageOptionalParams
        fullName: ComputeNodeReimageOptionalParams
        uid: '@azure/batch.ComputeNodeReimageOptionalParams'
  - uid: '@azure/batch.NodeUpdateUserParameter'
    name: NodeUpdateUserParameter
    spec.typeScript:
      - name: NodeUpdateUserParameter
        fullName: NodeUpdateUserParameter
        uid: '@azure/batch.NodeUpdateUserParameter'
  - uid: '@azure/batch.ComputeNodeUpdateUserOptionalParams'
    name: ComputeNodeUpdateUserOptionalParams
    spec.typeScript:
      - name: ComputeNodeUpdateUserOptionalParams
        fullName: ComputeNodeUpdateUserOptionalParams
        uid: '@azure/batch.ComputeNodeUpdateUserOptionalParams'
  - uid: '@azure/batch.UploadBatchServiceLogsConfiguration'
    name: UploadBatchServiceLogsConfiguration
    spec.typeScript:
      - name: UploadBatchServiceLogsConfiguration
        fullName: UploadBatchServiceLogsConfiguration
        uid: '@azure/batch.UploadBatchServiceLogsConfiguration'
  - uid: ServiceCallback<@azure/batch.UploadBatchServiceLogsResult>
    name: UploadBatchServiceLogsResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: UploadBatchServiceLogsResult
        fullName: UploadBatchServiceLogsResult
        uid: '@azure/batch.UploadBatchServiceLogsResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/batch.ComputeNodeUploadBatchServiceLogsOptionalParams'
    name: ComputeNodeUploadBatchServiceLogsOptionalParams
    spec.typeScript:
      - name: ComputeNodeUploadBatchServiceLogsOptionalParams
        fullName: ComputeNodeUploadBatchServiceLogsOptionalParams
        uid: '@azure/batch.ComputeNodeUploadBatchServiceLogsOptionalParams'
