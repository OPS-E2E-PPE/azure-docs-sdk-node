### YamlMime:UniversalReference
items:
  - uid: '@azure/cognitiveservices-contentmoderator.ListManagementTerm'
    name: ListManagementTerm
    fullName: ListManagementTerm
    children:
      - '@azure/cognitiveservices-contentmoderator.ListManagementTerm.addTerm'
      - '@azure/cognitiveservices-contentmoderator.ListManagementTerm.addTerm_2'
      - '@azure/cognitiveservices-contentmoderator.ListManagementTerm.addTerm_1'
      - >-
        @azure/cognitiveservices-contentmoderator.ListManagementTerm.deleteAllTerms
      - >-
        @azure/cognitiveservices-contentmoderator.ListManagementTerm.deleteAllTerms_2
      - >-
        @azure/cognitiveservices-contentmoderator.ListManagementTerm.deleteAllTerms_1
      - '@azure/cognitiveservices-contentmoderator.ListManagementTerm.deleteTerm'
      - >-
        @azure/cognitiveservices-contentmoderator.ListManagementTerm.deleteTerm_2
      - >-
        @azure/cognitiveservices-contentmoderator.ListManagementTerm.deleteTerm_1
      - >-
        @azure/cognitiveservices-contentmoderator.ListManagementTerm.getAllTerms_2
      - '@azure/cognitiveservices-contentmoderator.ListManagementTerm.getAllTerms'
      - >-
        @azure/cognitiveservices-contentmoderator.ListManagementTerm.getAllTerms_1
      - '@azure/cognitiveservices-contentmoderator.ListManagementTerm.constructor'
    langs:
      - typeScript
    type: class
    summary: Class representing a ListManagementTerm.
    package: '@azure/cognitiveservices-contentmoderator'
  - uid: '@azure/cognitiveservices-contentmoderator.ListManagementTerm.addTerm'
    name: 'addTerm(string, string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Add a term to the term list with list Id equal to list Id passed.
    syntax:
      content: >-
        function addTerm(listId: string, term: string, language: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: listId
          type:
            - string
          description: List Id of the image list.
        - id: term
          type:
            - string
          description: Term to be deleted
        - id: language
          type:
            - string
          description: Language of the terms.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/cognitiveservices-contentmoderator'
  - uid: '@azure/cognitiveservices-contentmoderator.ListManagementTerm.addTerm_2'
    name: 'addTerm(string, string, string, RequestOptionsBase, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function addTerm(listId: string, term: string, language: string,
        options: RequestOptionsBase, callback: ServiceCallback<void>)
      parameters:
        - id: listId
          type:
            - string
          description: List Id of the image list.
        - id: term
          type:
            - string
          description: Term to be deleted
        - id: language
          type:
            - string
          description: Language of the terms.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/cognitiveservices-contentmoderator'
  - uid: '@azure/cognitiveservices-contentmoderator.ListManagementTerm.addTerm_1'
    name: 'addTerm(string, string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function addTerm(listId: string, term: string, language: string,
        callback: ServiceCallback<void>)
      parameters:
        - id: listId
          type:
            - string
          description: List Id of the image list.
        - id: term
          type:
            - string
          description: Term to be deleted
        - id: language
          type:
            - string
          description: Language of the terms.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/cognitiveservices-contentmoderator'
  - uid: >-
      @azure/cognitiveservices-contentmoderator.ListManagementTerm.deleteAllTerms
    name: 'deleteAllTerms(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes all terms from the list with list Id equal to the list Id passed.
    syntax:
      content: >-
        function deleteAllTerms(listId: string, language: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: listId
          type:
            - string
          description: List Id of the image list.
        - id: language
          type:
            - string
          description: Language of the terms.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.ListManagementTermDeleteAllTermsResponse>
        description: Promise<Models.ListManagementTermDeleteAllTermsResponse>
    package: '@azure/cognitiveservices-contentmoderator'
  - uid: >-
      @azure/cognitiveservices-contentmoderator.ListManagementTerm.deleteAllTerms_2
    name: >-
      deleteAllTerms(string, string, RequestOptionsBase,
      ServiceCallback<string>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteAllTerms(listId: string, language: string, options:
        RequestOptionsBase, callback: ServiceCallback<string>)
      parameters:
        - id: listId
          type:
            - string
          description: List Id of the image list.
        - id: language
          type:
            - string
          description: Language of the terms.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<string>
          description: |
            The callback
    package: '@azure/cognitiveservices-contentmoderator'
  - uid: >-
      @azure/cognitiveservices-contentmoderator.ListManagementTerm.deleteAllTerms_1
    name: 'deleteAllTerms(string, string, ServiceCallback<string>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteAllTerms(listId: string, language: string, callback:
        ServiceCallback<string>)
      parameters:
        - id: listId
          type:
            - string
          description: List Id of the image list.
        - id: language
          type:
            - string
          description: Language of the terms.
        - id: callback
          type:
            - ServiceCallback<string>
          description: |
            The callback
    package: '@azure/cognitiveservices-contentmoderator'
  - uid: '@azure/cognitiveservices-contentmoderator.ListManagementTerm.deleteTerm'
    name: 'deleteTerm(string, string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes a term from the list with list Id equal to the list Id passed.
    syntax:
      content: >-
        function deleteTerm(listId: string, term: string, language: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: listId
          type:
            - string
          description: List Id of the image list.
        - id: term
          type:
            - string
          description: Term to be deleted
        - id: language
          type:
            - string
          description: Language of the terms.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.ListManagementTermDeleteTermResponse>
        description: Promise<Models.ListManagementTermDeleteTermResponse>
    package: '@azure/cognitiveservices-contentmoderator'
  - uid: '@azure/cognitiveservices-contentmoderator.ListManagementTerm.deleteTerm_2'
    name: >-
      deleteTerm(string, string, string, RequestOptionsBase,
      ServiceCallback<string>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteTerm(listId: string, term: string, language: string,
        options: RequestOptionsBase, callback: ServiceCallback<string>)
      parameters:
        - id: listId
          type:
            - string
          description: List Id of the image list.
        - id: term
          type:
            - string
          description: Term to be deleted
        - id: language
          type:
            - string
          description: Language of the terms.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<string>
          description: |
            The callback
    package: '@azure/cognitiveservices-contentmoderator'
  - uid: '@azure/cognitiveservices-contentmoderator.ListManagementTerm.deleteTerm_1'
    name: 'deleteTerm(string, string, string, ServiceCallback<string>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteTerm(listId: string, term: string, language: string,
        callback: ServiceCallback<string>)
      parameters:
        - id: listId
          type:
            - string
          description: List Id of the image list.
        - id: term
          type:
            - string
          description: Term to be deleted
        - id: language
          type:
            - string
          description: Language of the terms.
        - id: callback
          type:
            - ServiceCallback<string>
          description: |
            The callback
    package: '@azure/cognitiveservices-contentmoderator'
  - uid: '@azure/cognitiveservices-contentmoderator.ListManagementTerm.getAllTerms_2'
    name: >-
      getAllTerms(string, string, ListManagementTermGetAllTermsOptionalParams,
      ServiceCallback<Terms>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getAllTerms(listId: string, language: string, options:
        ListManagementTermGetAllTermsOptionalParams, callback:
        ServiceCallback<Terms>)
      parameters:
        - id: listId
          type:
            - string
          description: List Id of the image list.
        - id: language
          type:
            - string
          description: Language of the terms.
        - id: options
          type:
            - >-
              @azure/cognitiveservices-contentmoderator.ListManagementTermGetAllTermsOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-contentmoderator.Terms>
          description: |
            The callback
    package: '@azure/cognitiveservices-contentmoderator'
  - uid: '@azure/cognitiveservices-contentmoderator.ListManagementTerm.getAllTerms'
    name: >-
      getAllTerms(string, string,
      Models.ListManagementTermGetAllTermsOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets all terms from the list with list Id equal to the list Id passed.
    syntax:
      content: >-
        function getAllTerms(listId: string, language: string, options?:
        Models.ListManagementTermGetAllTermsOptionalParams)
      parameters:
        - id: listId
          type:
            - string
          description: List Id of the image list.
        - id: language
          type:
            - string
          description: Language of the terms.
        - id: options
          type:
            - Models.ListManagementTermGetAllTermsOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.ListManagementTermGetAllTermsResponse>
        description: Promise<Models.ListManagementTermGetAllTermsResponse>
    package: '@azure/cognitiveservices-contentmoderator'
  - uid: '@azure/cognitiveservices-contentmoderator.ListManagementTerm.getAllTerms_1'
    name: 'getAllTerms(string, string, ServiceCallback<Terms>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getAllTerms(listId: string, language: string, callback:
        ServiceCallback<Terms>)
      parameters:
        - id: listId
          type:
            - string
          description: List Id of the image list.
        - id: language
          type:
            - string
          description: Language of the terms.
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-contentmoderator.Terms>
          description: |
            The callback
    package: '@azure/cognitiveservices-contentmoderator'
  - uid: '@azure/cognitiveservices-contentmoderator.ListManagementTerm.constructor'
    name: ListManagementTerm(ContentModeratorClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Create a ListManagementTerm.
    syntax:
      content: 'new ListManagementTerm(client: ContentModeratorClientContext)'
      parameters:
        - id: client
          type:
            - >-
              @azure/cognitiveservices-contentmoderator.ContentModeratorClientContext
          description: |
            Reference to the service client.
    package: '@azure/cognitiveservices-contentmoderator'
references:
  - uid: '@azure/cognitiveservices-contentmoderator.ContentModeratorClientContext'
    name: ContentModeratorClientContext
    spec.typeScript:
      - name: ContentModeratorClientContext
        fullName: ContentModeratorClientContext
        uid: >-
          @azure/cognitiveservices-contentmoderator.ContentModeratorClientContext
  - uid: ServiceCallback<@azure/cognitiveservices-contentmoderator.Terms>
    name: Terms>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: Terms
        fullName: Terms
        uid: '@azure/cognitiveservices-contentmoderator.Terms'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/cognitiveservices-contentmoderator.ListManagementTermGetAllTermsOptionalParams
    name: ListManagementTermGetAllTermsOptionalParams
    spec.typeScript:
      - name: ListManagementTermGetAllTermsOptionalParams
        fullName: ListManagementTermGetAllTermsOptionalParams
        uid: >-
          @azure/cognitiveservices-contentmoderator.ListManagementTermGetAllTermsOptionalParams
