### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.ManagementClient'
    name: ManagementClient
    fullName: ManagementClient
    children:
      - '@azure/service-bus.ManagementClient.address'
      - '@azure/service-bus.ManagementClient.addRule'
      - '@azure/service-bus.ManagementClient.audience'
      - '@azure/service-bus.ManagementClient.cancelScheduledMessages'
      - '@azure/service-bus.ManagementClient.close'
      - '@azure/service-bus.ManagementClient.entityPath'
      - '@azure/service-bus.ManagementClient.getRules'
      - '@azure/service-bus.ManagementClient.getSessionState'
      - '@azure/service-bus.ManagementClient.isConnecting'
      - '@azure/service-bus.ManagementClient.listMessageSessions'
      - '@azure/service-bus.ManagementClient.constructor'
      - '@azure/service-bus.ManagementClient.managementLock'
      - '@azure/service-bus.ManagementClient.name'
      - '@azure/service-bus.ManagementClient.peek'
      - '@azure/service-bus.ManagementClient.peekBySequenceNumber'
      - '@azure/service-bus.ManagementClient.peekMessagesBySession'
      - '@azure/service-bus.ManagementClient.receiveDeferredMessages'
      - '@azure/service-bus.ManagementClient.removeRule'
      - '@azure/service-bus.ManagementClient.renewLock'
      - '@azure/service-bus.ManagementClient.renewSessionLock'
      - '@azure/service-bus.ManagementClient.replyTo'
      - '@azure/service-bus.ManagementClient.scheduleMessages'
      - '@azure/service-bus.ManagementClient.setSessionState'
      - '@azure/service-bus.ManagementClient.updateDispositionStatus'
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: '@azure/service-bus.LinkEntity'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ManagementClient.address'
    name: address
    fullName: address
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      {string} address The client entity address in one of the following forms:

      **Sender**
      - `"<queue-name>"`.
      - `"<topic-name>"`.

      **Receiver**
      - `"<queue-name>"`.
      - `"<topic-name>"`.

      **ManagementClient**
      -`"$management"`.
    syntax:
      content: 'address: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ManagementClient.addRule'
    name: 'addRule(string, boolean | string | CorrelationFilter, undefined | string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Adds a rule on the subscription as defined by the given rule name, filter
      and action
    syntax:
      content: >-
        function addRule(ruleName: string, filter: boolean | string |
        CorrelationFilter, sqlRuleActionExpression?: undefined | string)
      parameters:
        - id: ruleName
          type:
            - string
          description: Name of the rule
        - id: filter
          type:
            - boolean | string | @azure/service-bus.CorrelationFilter
          description: 'A Boolean, SQL expression or a Correlation filter'
        - id: sqlRuleActionExpression
          type:
            - undefined | string
          description: |
            Action to perform if the message satisfies the filtering expression
          optional: true
      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ManagementClient.audience'
    name: audience
    fullName: audience
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {string} audience The client entity token audience in one of the following
      forms:


      **Sender**

      - `"sb://<yournamespace>.servicebus.windows.net/<queue-name>"`

      - `"sb://<yournamespace>.servicebus.windows.net/<topic-name>"`


      **Receiver**

      - `"sb://<yournamespace>.servicebus.windows.net/<queue-name>"`

      - `"sb://<yournamespace>.servicebus.windows.net/<topic-name>"`


      **ManagementClient**

      -
      `"sb://<your-namespace>.servicebus.windows.net/<queue-name>/$management"`.

      -
      `"sb://<your-namespace>.servicebus.windows.net/<topic-name>/$management"`.
    syntax:
      content: 'audience: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ManagementClient.cancelScheduledMessages'
    name: 'cancelScheduledMessages(Long[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: Cancels an array of messages that were scheduled.
    syntax:
      content: 'function cancelScheduledMessages(sequenceNumbers: Long[])'
      parameters:
        - id: sequenceNumbers
          type:
            - 'Long[]'
          description: An Array of sequence numbers of the message to be cancelled.
      return:
        type:
          - Promise<void>
        description: Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ManagementClient.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Closes the AMQP management session to the ServiceBus namespace for this
      client,

      returning a promise that will be resolved when disconnection is completed.
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
        description: Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ManagementClient.entityPath'
    name: entityPath
    fullName: entityPath
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {string} entityPath - The name/path of the entity
      (queue/topic/subscription name)

      for which the management request needs to be made.
    syntax:
      content: 'entityPath: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ManagementClient.getRules'
    name: getRules()
    children: []
    type: method
    langs:
      - typeScript
    summary: Get all the rules on the Subscription.
    syntax:
      content: function getRules()
      parameters: []
      return:
        type:
          - 'Promise<@azure/service-bus.RuleDescription[]>'
        description: 'Promise<RuleDescription[]> A list of rules.'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ManagementClient.getSessionState'
    name: getSessionState(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets the state of the specified session.
    syntax:
      content: 'function getSessionState(sessionId: string)'
      parameters:
        - id: sessionId
          type:
            - string
          description: The session for which the state needs to be retrieved.
      return:
        type:
          - Promise<any>
        description: Promise<any> The state of that session
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ManagementClient.isConnecting'
    name: isConnecting
    fullName: isConnecting
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {boolean} isConnecting Indicates whether the link is in the process of
      connecting

      (establishing) itself. Default value: `false`.
    syntax:
      content: 'isConnecting: boolean = false'
      return:
        type:
          - boolean
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ManagementClient.listMessageSessions'
    name: 'listMessageSessions(number, number, Date)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Lists the sessions on the ServiceBus Queue/Topic.
    syntax:
      content: >-
        function listMessageSessions(skip: number, top: number,
        lastUpdatedTime?: Date)
      parameters:
        - id: skip
          type:
            - number
          description: The number of sessions to skip
        - id: top
          type:
            - number
          description: Maximum numer of sessions.
        - id: lastUpdatedTime
          type:
            - Date
          description: ''
          optional: true
      return:
        type:
          - 'Promise<string[]>'
        description: 'Promise<string[]> A list of session ids.'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ManagementClient.constructor'
    name: 'ManagementClient(ClientEntityContext, ManagementClientOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new ManagementClient(context: ClientEntityContext, options?:
        ManagementClientOptions)
      parameters:
        - id: context
          type:
            - '@azure/service-bus.ClientEntityContext'
          description: The client entity context.
        - id: options
          type:
            - '@azure/service-bus.ManagementClientOptions'
          description: ''
          optional: true
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ManagementClient.managementLock'
    name: managementLock
    fullName: managementLock
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: >-
        managementLock: string =
        `${Constants.managementRequestKey}-${generate_uuid()}`
      return:
        type:
          - string
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ManagementClient.name'
    name: name
    fullName: name
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      {string} id The unique name for the entity in the format:
      `${name of the entity}-${guid}`.
    syntax:
      content: 'name: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ManagementClient.peek'
    name: peek(undefined | number)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Fetches the next batch of active messages. The first call to `peek()`
      fetches the first

      active message for this client. Each subsequent call fetches the
      subsequent message in the

      entity.

      Unlike a `received` message, `peeked` message will not have lock token
      associated with it,

      and hence it cannot be
      `Completed/Abandoned/Deferred/Deadlettered/Renewed`. This method will

      also fetch even Deferred messages (but not Deadlettered message).
    syntax:
      content: 'function peek(messageCount?: undefined | number)'
      parameters:
        - id: messageCount
          type:
            - undefined | number
          description: ''
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
        description: 'Promise<ReceivedSBMessage[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ManagementClient.peekBySequenceNumber'
    name: 'peekBySequenceNumber(Long, undefined | number, undefined | string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Peeks the desired number of messages from the specified sequence number.
    syntax:
      content: >-
        function peekBySequenceNumber(fromSequenceNumber: Long,
        maxMessageCount?: undefined | number, sessionId?: undefined | string)
      parameters:
        - id: fromSequenceNumber
          type:
            - Long
          description: The sequence number from where to read the message.
        - id: maxMessageCount
          type:
            - undefined | number
          description: ''
          optional: true
        - id: sessionId
          type:
            - undefined | string
          description: The sessionId from which messages need to be peeked.
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
        description: 'Promise<ReceivedMessageInfo[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ManagementClient.peekMessagesBySession'
    name: 'peekMessagesBySession(string, undefined | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Fetches the next batch of active messages in the current MessageSession.
      The first call to

      `peek()` fetches the first active message for this client. Each subsequent
      call fetches the

      subsequent message in the entity.

      Unlike a `received` message, `peeked` message will not have lock token
      associated with it,

      and hence it cannot be
      `Completed/Abandoned/Deferred/Deadlettered/Renewed`.  This method will

      also fetch even Deferred messages (but not Deadlettered message).
    syntax:
      content: >-
        function peekMessagesBySession(sessionId: string, messageCount?:
        undefined | number)
      parameters:
        - id: sessionId
          type:
            - string
          description: The sessionId from which messages need to be peeked.
        - id: messageCount
          type:
            - undefined | number
          description: ''
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
        description: 'Promise<ReceivedMessageInfo[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ManagementClient.receiveDeferredMessages'
    name: 'receiveDeferredMessages(Long[], ReceiveMode, undefined | string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Receives a list of deferred messages identified by `sequenceNumbers`.
    syntax:
      content: >-
        function receiveDeferredMessages(sequenceNumbers: Long[], receiveMode:
        ReceiveMode, sessionId?: undefined | string)
      parameters:
        - id: sequenceNumbers
          type:
            - 'Long[]'
          description: A list containing the sequence numbers to receive.
        - id: receiveMode
          type:
            - '@azure/service-bus.ReceiveMode'
          description: The mode in which the receiver was created.
        - id: sessionId
          type:
            - undefined | string
          description: ''
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
        description: |-
          Promise<ServiceBusMessage[]>
          - Returns a list of messages identified by the given sequenceNumbers.
          - Returns an empty list if no messages are found.
          - Throws an error if the messages have not been deferred.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ManagementClient.removeRule'
    name: removeRule(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Removes the rule on the Subscription identified by the given rule name.
    syntax:
      content: 'function removeRule(ruleName: string)'
      parameters:
        - id: ruleName
          type:
            - string
          description: |+

      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ManagementClient.renewLock'
    name: 'renewLock(string, SendRequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Renews the lock on the message. The lock will be renewed based on the
      setting specified on

      the queue.

      When a message is received in `PeekLock` mode, the message is locked on
      the server for this

      receiver instance for a duration as specified during the
      Queue/Subscription creation

      (LockDuration). If processing of the message requires longer than this
      duration, the

      lock needs to be renewed. For each renewal, it resets the time the message
      is locked by the

      LockDuration set on the Entity.
    syntax:
      content: 'function renewLock(lockToken: string, options?: SendRequestOptions)'
      parameters:
        - id: lockToken
          type:
            - string
          description: Lock token of the message
        - id: options
          type:
            - SendRequestOptions
          description: ''
          optional: true
      return:
        type:
          - Promise<Date>
        description: Promise<Date> New lock token expiry date and time in UTC format.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ManagementClient.renewSessionLock'
    name: 'renewSessionLock(string, SendRequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Renews the lock for the specified session.
    syntax:
      content: >-
        function renewSessionLock(sessionId: string, options?:
        SendRequestOptions)
      parameters:
        - id: sessionId
          type:
            - string
          description: Id of the session for which the lock needs to be renewed
        - id: options
          type:
            - SendRequestOptions
          description: Options that can be set while sending the request.
          optional: true
      return:
        type:
          - Promise<Date>
        description: Promise<Date> New lock token expiry date and time in UTC format.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ManagementClient.replyTo'
    name: replyTo
    fullName: replyTo
    children: []
    langs:
      - typeScript
    type: property
    summary: '{string} replyTo The reply to Guid for the management client.'
    syntax:
      content: 'replyTo: string = generate_uuid()'
      return:
        type:
          - string
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ManagementClient.scheduleMessages'
    name: 'scheduleMessages(Date, SendableMessageInfo[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: Schedules an array of messages to appear on Service Bus at a later time.
    syntax:
      content: >-
        function scheduleMessages(scheduledEnqueueTimeUtc: Date, messages:
        SendableMessageInfo[])
      parameters:
        - id: scheduledEnqueueTimeUtc
          type:
            - Date
          description: The UTC time at which the messages should be enqueued.
        - id: messages
          type:
            - '@azure/service-bus.SendableMessageInfo[]'
          description: An array of messages that needs to be scheduled.
      return:
        type:
          - 'Promise<Long[]>'
        description: Promise<number> The sequence numbers of messages that were scheduled.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ManagementClient.setSessionState'
    name: 'setSessionState(string, any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Sets the state of the specified session.
    syntax:
      content: 'function setSessionState(sessionId: string, state: any)'
      parameters:
        - id: sessionId
          type:
            - string
          description: The session for which the state needs to be set
        - id: state
          type:
            - any
          description: The state that needs to be set.
      return:
        type:
          - Promise<void>
        description: Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ManagementClient.updateDispositionStatus'
    name: >-
      updateDispositionStatus(string, DispositionStatus,
      DispositionStatusOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Updates the disposition status of deferred messages.
    syntax:
      content: >-
        function updateDispositionStatus(lockToken: string, dispositionStatus:
        DispositionStatus, options?: DispositionStatusOptions)
      parameters:
        - id: lockToken
          type:
            - string
          description: ''
        - id: dispositionStatus
          type:
            - '@azure/service-bus.DispositionStatus'
          description: The disposition status to be set
        - id: options
          type:
            - DispositionStatusOptions
          description: >
            Optional parameters that can be provided while updating the
            disposition status.
          optional: true
      return:
        type:
          - Promise<void>
        description: Promise<void>
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.LinkEntity'
    name: LinkEntity
    spec.typeScript:
      - name: LinkEntity
        fullName: LinkEntity
        uid: '@azure/service-bus.LinkEntity'
  - uid: '@azure/service-bus.ClientEntityContext'
    name: ClientEntityContext
    spec.typeScript:
      - name: ClientEntityContext
        fullName: ClientEntityContext
        uid: '@azure/service-bus.ClientEntityContext'
  - uid: '@azure/service-bus.ManagementClientOptions'
    name: ManagementClientOptions
    spec.typeScript:
      - name: ManagementClientOptions
        fullName: ManagementClientOptions
        uid: '@azure/service-bus.ManagementClientOptions'
  - uid: boolean | string | @azure/service-bus.CorrelationFilter
    name: CorrelationFilter
    spec.typeScript:
      - name: 'boolean | string | '
        fullName: 'boolean | string | '
      - name: CorrelationFilter
        fullName: CorrelationFilter
        uid: '@azure/service-bus.CorrelationFilter'
  - uid: 'Promise<@azure/service-bus.RuleDescription[]>'
    name: 'RuleDescription[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: RuleDescription
        fullName: RuleDescription
        uid: '@azure/service-bus.RuleDescription'
      - name: '[]>'
        fullName: '[]>'
  - uid: 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    name: 'ReceivedMessageInfo[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ReceivedMessageInfo
        fullName: ReceivedMessageInfo
        uid: '@azure/service-bus.ReceivedMessageInfo'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/service-bus.ReceiveMode'
    name: ReceiveMode
    spec.typeScript:
      - name: ReceiveMode
        fullName: ReceiveMode
        uid: '@azure/service-bus.ReceiveMode'
  - uid: 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    name: 'ServiceBusMessage[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/service-bus.SendableMessageInfo[]'
    name: 'SendableMessageInfo[]'
    spec.typeScript:
      - name: SendableMessageInfo
        fullName: SendableMessageInfo
        uid: '@azure/service-bus.SendableMessageInfo'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/service-bus.DispositionStatus'
    name: DispositionStatus
    spec.typeScript:
      - name: DispositionStatus
        fullName: DispositionStatus
        uid: '@azure/service-bus.DispositionStatus'
