### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.BatchingReceiver'
    name: BatchingReceiver
    fullName: BatchingReceiver
    children:
      - '@azure/service-bus.BatchingReceiver.address'
      - '@azure/service-bus.BatchingReceiver.audience'
      - '@azure/service-bus.BatchingReceiver.autoComplete'
      - '@azure/service-bus.BatchingReceiver.autoRenewLock'
      - '@azure/service-bus.BatchingReceiver.constructor'
      - '@azure/service-bus.BatchingReceiver.close'
      - '@azure/service-bus.BatchingReceiver.create'
      - '@azure/service-bus.BatchingReceiver.isConnecting'
      - '@azure/service-bus.BatchingReceiver.isOpen'
      - '@azure/service-bus.BatchingReceiver.isReceivingMessages'
      - '@azure/service-bus.BatchingReceiver.maxAutoRenewDurationInSeconds'
      - '@azure/service-bus.BatchingReceiver.maxConcurrentCalls'
      - '@azure/service-bus.BatchingReceiver.name'
      - '@azure/service-bus.BatchingReceiver.newMessageWaitTimeoutInSeconds'
      - '@azure/service-bus.BatchingReceiver.onDetached'
      - '@azure/service-bus.BatchingReceiver.receive'
      - '@azure/service-bus.BatchingReceiver.receiveMode'
      - '@azure/service-bus.BatchingReceiver.receiverType'
      - '@azure/service-bus.BatchingReceiver.settleMessage'
    langs:
      - typeScript
    type: class
    summary: >-
      Describes the batching receiver where the user can receive a specified
      number of messages for

      a predefined time.
    extends:
      name: '@azure/service-bus.MessageReceiver'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.BatchingReceiver.address'
    name: address
    fullName: address
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      {string} address The client entity address in one of the following forms:

      **Sender**
      - `"<queue-name>"`.
      - `"<topic-name>"`.

      **Receiver**
      - `"<queue-name>"`.
      - `"<topic-name>"`.

      **ManagementClient**
      -`"$management"`.
    syntax:
      content: 'address: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.BatchingReceiver.audience'
    name: audience
    fullName: audience
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {string} audience The client entity token audience in one of the following
      forms:


      **Sender**

      - `"sb://<yournamespace>.servicebus.windows.net/<queue-name>"`

      - `"sb://<yournamespace>.servicebus.windows.net/<topic-name>"`


      **Receiver**

      - `"sb://<yournamespace>.servicebus.windows.net/<queue-name>"`

      - `"sb://<yournamespace>.servicebus.windows.net/<topic-name>"`


      **ManagementClient**

      -
      `"sb://<your-namespace>.servicebus.windows.net/<queue-name>/$management"`.

      -
      `"sb://<your-namespace>.servicebus.windows.net/<topic-name>/$management"`.
    syntax:
      content: 'audience: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.BatchingReceiver.autoComplete'
    name: autoComplete
    fullName: autoComplete
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {boolean} autoComplete Indicates whether `Message.complete()` should be
      called

      automatically after the message processing is complete while receiving
      messages with handlers.

      Default: false.
    syntax:
      content: 'autoComplete: boolean'
      return:
        type:
          - boolean
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.BatchingReceiver.autoRenewLock'
    name: autoRenewLock
    fullName: autoRenewLock
    children: []
    langs:
      - typeScript
    type: property
    summary: '{boolean} autoRenewLock Should lock renewal happen automatically.'
    syntax:
      content: 'autoRenewLock: boolean'
      return:
        type:
          - boolean
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.BatchingReceiver.constructor'
    name: 'BatchingReceiver(ClientEntityContext, ReceiveOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Instantiate a new BatchingReceiver.
    syntax:
      content: >-
        new BatchingReceiver(context: ClientEntityContext, options?:
        ReceiveOptions)
      parameters:
        - id: context
          type:
            - '@azure/service-bus.ClientEntityContext'
          description: The client entity context.
        - id: options
          type:
            - '@azure/service-bus.ReceiveOptions'
          description: ''
          optional: true
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.BatchingReceiver.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: Closes the underlying AMQP receiver.
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
        description: Promise<void>.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.BatchingReceiver.create'
    name: 'create(ClientEntityContext, ReceiveOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a batching receiver.
    syntax:
      content: >-
        static function create(context: ClientEntityContext, options?:
        ReceiveOptions)
      parameters:
        - id: context
          type:
            - '@azure/service-bus.ClientEntityContext'
          description: The connection context.
        - id: options
          type:
            - '@azure/service-bus.ReceiveOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/service-bus.BatchingReceiver'
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.BatchingReceiver.isConnecting'
    name: isConnecting
    fullName: isConnecting
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {boolean} isConnecting Indicates whether the link is in the process of
      connecting

      (establishing) itself. Default value: `false`.
    syntax:
      content: 'isConnecting: boolean = false'
      return:
        type:
          - boolean
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.BatchingReceiver.isOpen'
    name: isOpen()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Determines whether the AMQP receiver link is open. If open then returns
      true else returns false.
    syntax:
      content: function isOpen()
      parameters: []
      return:
        type:
          - boolean
        description: boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.BatchingReceiver.isReceivingMessages'
    name: isReceivingMessages
    fullName: isReceivingMessages
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {boolean} isReceivingMessages Indicates whether the link is actively
      receiving

      messages. Default: false.
    syntax:
      content: 'isReceivingMessages: boolean = false'
      return:
        type:
          - boolean
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.BatchingReceiver.maxAutoRenewDurationInSeconds'
    name: maxAutoRenewDurationInSeconds
    fullName: maxAutoRenewDurationInSeconds
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {number} maxAutoRenewDurationInSeconds The maximum duration within which
      the

      lock will be renewed automatically. This value should be greater than the
      longest message

      lock duration; for example, the `lockDuration` property on the received
      message.


      Default: `300` (5 minutes);
    syntax:
      content: 'maxAutoRenewDurationInSeconds: number'
      return:
        type:
          - number
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.BatchingReceiver.maxConcurrentCalls'
    name: maxConcurrentCalls
    fullName: maxConcurrentCalls
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {number} [maxConcurrentCalls] The maximum number of messages that should
      be

      processed concurrently while in streaming mode. Once this limit has been
      reached, more

      messages will not be received until the user's message handler has
      completed processing current message.

      Default: 1
    syntax:
      content: 'maxConcurrentCalls: number = 1'
      return:
        type:
          - number
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.BatchingReceiver.name'
    name: name
    fullName: name
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      {string} id The unique name for the entity in the format:
      `${name of the entity}-${guid}`.
    syntax:
      content: 'name: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.BatchingReceiver.newMessageWaitTimeoutInSeconds'
    name: newMessageWaitTimeoutInSeconds
    fullName: newMessageWaitTimeoutInSeconds
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {number} [newMessageWaitTimeoutInSeconds] The maximum amount of idle time
      the

      receiver will wait after a message has been received. If no messages are
      received by this

      time then the receive operation will end.
    optional: true
    syntax:
      content: 'newMessageWaitTimeoutInSeconds?: undefined | number'
      return:
        type:
          - undefined | number
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.BatchingReceiver.onDetached'
    name: onDetached(AmqpError | Error)
    children: []
    type: method
    langs:
      - typeScript
    summary: Clear the token renewal timer and set the `detachedError` property.
    syntax:
      content: 'function onDetached(receiverError?: AmqpError | Error)'
      parameters:
        - id: receiverError
          type:
            - AmqpError | Error
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
        description: Promise<void>.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.BatchingReceiver.receive'
    name: 'receive(number, undefined | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Receives a batch of messages from a ServiceBus Queue/Topic.
    syntax:
      content: >-
        function receive(maxMessageCount: number, maxWaitTimeInSeconds?:
        undefined | number)
      parameters:
        - id: maxMessageCount
          type:
            - number
          description: >-
            The maximum number of messages to receive.

            In Peeklock mode, this number is capped at 2047 due to constraints
            of the underlying buffer.
        - id: maxWaitTimeInSeconds
          type:
            - undefined | number
          description: >-
            The total wait time in seconds until which the receiver will attempt
            to receive specified number of messages.

            If this time elapses before the `maxMessageCount` is reached, then
            messages collected till then will be returned to the user.

            - **Default**: `60` seconds.
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
        description: A promise that resolves with an array of Message objects.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.BatchingReceiver.receiveMode'
    name: receiveMode
    fullName: receiveMode
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      {number} [receiveMode] The mode in which messages should be received.
      Default: ReceiveMode.peekLock
    syntax:
      content: 'receiveMode: ReceiveMode'
      return:
        type:
          - '@azure/service-bus.ReceiveMode'
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.BatchingReceiver.receiverType'
    name: receiverType
    fullName: receiverType
    children: []
    langs:
      - typeScript
    type: property
    summary: '{string} receiverType The type of receiver: "batching" or "streaming".'
    syntax:
      content: 'receiverType: ReceiverType'
      return:
        type:
          - '@azure/service-bus.ReceiverType'
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.BatchingReceiver.settleMessage'
    name: 'settleMessage(ServiceBusMessage, DispositionType, DispositionOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Settles the message with the specified disposition.
    syntax:
      content: >-
        function settleMessage(message: ServiceBusMessage, operation:
        DispositionType, options?: DispositionOptions)
      parameters:
        - id: message
          type:
            - '@azure/service-bus.ServiceBusMessage'
          description: The ServiceBus Message that needs to be settled.
        - id: operation
          type:
            - '@azure/service-bus.DispositionType'
          description: The disposition type.
        - id: options
          type:
            - '@azure/service-bus.DispositionOptions'
          description: >
            Optional parameters that can be provided while disposing the
            message.
          optional: true
      return:
        type:
          - Promise<any>
        description: ''
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.MessageReceiver'
    name: MessageReceiver
    spec.typeScript:
      - name: MessageReceiver
        fullName: MessageReceiver
        uid: '@azure/service-bus.MessageReceiver'
  - uid: '@azure/service-bus.ClientEntityContext'
    name: ClientEntityContext
    spec.typeScript:
      - name: ClientEntityContext
        fullName: ClientEntityContext
        uid: '@azure/service-bus.ClientEntityContext'
  - uid: '@azure/service-bus.ReceiveOptions'
    name: ReceiveOptions
    spec.typeScript:
      - name: ReceiveOptions
        fullName: ReceiveOptions
        uid: '@azure/service-bus.ReceiveOptions'
  - uid: '@azure/service-bus.ReceiveMode'
    name: ReceiveMode
    spec.typeScript:
      - name: ReceiveMode
        fullName: ReceiveMode
        uid: '@azure/service-bus.ReceiveMode'
  - uid: '@azure/service-bus.ReceiverType'
    name: ReceiverType
    spec.typeScript:
      - name: ReceiverType
        fullName: ReceiverType
        uid: '@azure/service-bus.ReceiverType'
  - uid: 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    name: 'ServiceBusMessage[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/service-bus.ServiceBusMessage'
    name: ServiceBusMessage
    spec.typeScript:
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
  - uid: '@azure/service-bus.DispositionType'
    name: DispositionType
    spec.typeScript:
      - name: DispositionType
        fullName: DispositionType
        uid: '@azure/service-bus.DispositionType'
  - uid: '@azure/service-bus.DispositionOptions'
    name: DispositionOptions
    spec.typeScript:
      - name: DispositionOptions
        fullName: DispositionOptions
        uid: '@azure/service-bus.DispositionOptions'
  - uid: '@azure/service-bus.BatchingReceiver'
    name: BatchingReceiver
    spec.typeScript:
      - name: BatchingReceiver
        fullName: BatchingReceiver
        uid: '@azure/service-bus.BatchingReceiver'
