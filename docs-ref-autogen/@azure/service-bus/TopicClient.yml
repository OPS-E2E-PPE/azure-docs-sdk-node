### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.TopicClient'
    name: TopicClient
    fullName: TopicClient
    children:
      - '@azure/service-bus.TopicClient.close'
      - '@azure/service-bus.TopicClient.createSender'
      - '@azure/service-bus.TopicClient.entityPath'
      - '@azure/service-bus.TopicClient.getDeadLetterTopicPath'
      - '@azure/service-bus.TopicClient.id'
      - '@azure/service-bus.TopicClient.constructor'
    langs:
      - typeScript
    type: class
    summary: >-
      Describes the client that allows interacting with a Service Bus Topic.

      Use the `createTopicClient` function on the ServiceBusClient object to
      instantiate a TopicClient
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.TopicClient.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Closes the AMQP link for the sender created by this client.
      Once closed, neither the TopicClient nor its senders can be used for any
      further operations.
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.TopicClient.createSender'
    name: createSender()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a Sender to be used for sending messages, scheduling messages to
      be sent at a later time

      and cancelling such scheduled messages.

      If the Topic has session enabled Subscriptions, then messages sent without
      the `sessionId`

      property will go to the dead letter queue of such subscriptions.
    syntax:
      content: function createSender()
      parameters: []
      return:
        type:
          - '@azure/service-bus.Sender'
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.TopicClient.entityPath'
    name: entityPath
    fullName: entityPath
    children: []
    langs:
      - typeScript
    type: property
    summary: The path for the Service Bus Topic for which this client is created.
    syntax:
      content: 'entityPath: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.TopicClient.getDeadLetterTopicPath'
    name: 'getDeadLetterTopicPath(string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns the corresponding dead letter topic name for the given topic and
      subscription names.

      Use this in the `createSubscriptionClient` function of the
      `ServiceBusClient` instance to

      receive messages from dead letter queue for given subscription.
    syntax:
      content: >-
        static function getDeadLetterTopicPath(topicName: string,
        subscriptionName: string)
      parameters:
        - id: topicName
          type:
            - string
          description: >-
            Name of the topic whose dead letter counterpart's name is being
            fetched
        - id: subscriptionName
          type:
            - string
          description: >
            Name of the subscription whose dead letter counterpart's name is
            being fetched
      return:
        type:
          - string
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.TopicClient.id'
    name: id
    fullName: id
    children: []
    langs:
      - typeScript
    type: property
    summary: A unique identifier for this client.
    syntax:
      content: 'id: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.TopicClient.constructor'
    name: 'TopicClient(string, ConnectionContext)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: |-
      Constructor for TopicClient.
      This is not meant for the user to call directly.
      The user should use the `createTopicClient` on the Namespace instead.
    syntax:
      content: 'new TopicClient(topicName: string, context: ConnectionContext)'
      parameters:
        - id: topicName
          type:
            - string
          description: The topic name.
        - id: context
          type:
            - '@azure/service-bus.ConnectionContext'
          description: The connection context to create the TopicClient.
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.ConnectionContext'
    name: ConnectionContext
    spec.typeScript:
      - name: ConnectionContext
        fullName: ConnectionContext
        uid: '@azure/service-bus.ConnectionContext'
  - uid: '@azure/service-bus.Sender'
    name: Sender
    spec.typeScript:
      - name: Sender
        fullName: Sender
        uid: '@azure/service-bus.Sender'
