### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.MessageSession'
    name: MessageSession
    fullName: MessageSession
    children:
      - '@azure/service-bus.MessageSession.address'
      - '@azure/service-bus.MessageSession.audience'
      - '@azure/service-bus.MessageSession.autoComplete'
      - '@azure/service-bus.MessageSession.autoRenewLock'
      - '@azure/service-bus.MessageSession.callee'
      - '@azure/service-bus.MessageSession.close'
      - '@azure/service-bus.MessageSession.create'
      - '@azure/service-bus.MessageSession.isConnecting'
      - '@azure/service-bus.MessageSession.isOpen'
      - '@azure/service-bus.MessageSession.isReceivingMessages'
      - '@azure/service-bus.MessageSession.maxAutoRenewDurationInSeconds'
      - '@azure/service-bus.MessageSession.maxConcurrentCalls'
      - '@azure/service-bus.MessageSession.maxConcurrentSessions'
      - '@azure/service-bus.MessageSession.constructor'
      - '@azure/service-bus.MessageSession.name'
      - '@azure/service-bus.MessageSession.newMessageWaitTimeoutInSeconds'
      - '@azure/service-bus.MessageSession.receive'
      - '@azure/service-bus.MessageSession.receiveMessages'
      - '@azure/service-bus.MessageSession.receiveMode'
      - '@azure/service-bus.MessageSession.sessionId'
      - '@azure/service-bus.MessageSession.sessionLockedUntilUtc'
      - '@azure/service-bus.MessageSession.settleMessage'
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: '@azure/service-bus.LinkEntity'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageSession.address'
    name: address
    fullName: address
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      {string} address The client entity address in one of the following forms:

      **Sender**
      - `"<queue-name>"`.
      - `"<topic-name>"`.

      **Receiver**
      - `"<queue-name>"`.
      - `"<topic-name>"`.

      **ManagementClient**
      -`"$management"`.
    syntax:
      content: 'address: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageSession.audience'
    name: audience
    fullName: audience
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {string} audience The client entity token audience in one of the following
      forms:


      **Sender**

      - `"sb://<yournamespace>.servicebus.windows.net/<queue-name>"`

      - `"sb://<yournamespace>.servicebus.windows.net/<topic-name>"`


      **Receiver**

      - `"sb://<yournamespace>.servicebus.windows.net/<queue-name>"`

      - `"sb://<yournamespace>.servicebus.windows.net/<topic-name>"`


      **ManagementClient**

      -
      `"sb://<your-namespace>.servicebus.windows.net/<queue-name>/$management"`.

      -
      `"sb://<your-namespace>.servicebus.windows.net/<topic-name>/$management"`.
    syntax:
      content: 'audience: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageSession.autoComplete'
    name: autoComplete
    fullName: autoComplete
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {boolean} autoComplete Indicates whether `Message.complete()` should be
      called

      automatically after the message processing is complete while receiving
      messages with handlers.

      Default: false.
    syntax:
      content: 'autoComplete: boolean'
      return:
        type:
          - boolean
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageSession.autoRenewLock'
    name: autoRenewLock
    fullName: autoRenewLock
    children: []
    langs:
      - typeScript
    type: property
    summary: '{boolean} autoRenewLock Should lock renewal happen automatically.'
    syntax:
      content: 'autoRenewLock: boolean'
      return:
        type:
          - boolean
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageSession.callee'
    name: callee
    fullName: callee
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {SessionCallee} callee Describes who instantied the MessageSession.
      Whether it was

      called by the SessionManager or it was called standalone.

      - Default: "standalone"
    syntax:
      content: 'callee: SessionCallee'
      return:
        type:
          - '@azure/service-bus.SessionCallee'
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageSession.close'
    name: close(undefined | false | true)
    children: []
    type: method
    langs:
      - typeScript
    summary: Closes the underlying AMQP receiver link.
    syntax:
      content: 'function close(isClosedDueToExpiry?: undefined | false | true)'
      parameters:
        - id: isClosedDueToExpiry
          type:
            - undefined | false | true
          description: >
            Flag that denotes if close is invoked due to session expiring.

            This is so that the internal map of expired sessions doesn't get
            cleared when session is

            closed due to expiry.
          optional: true
      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageSession.create'
    name: 'create(ClientEntityContext, MessageSessionOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new instance of the MessageSession based on the provided
      parameters.
    syntax:
      content: >-
        static function create(context: ClientEntityContext, options?:
        MessageSessionOptions)
      parameters:
        - id: context
          type:
            - '@azure/service-bus.ClientEntityContext'
          description: The client entity context
        - id: options
          type:
            - '@azure/service-bus.MessageSessionOptions'
          description: |
            Options that can be provided while creating the MessageSession.
          optional: true
      return:
        type:
          - Promise<@azure/service-bus.MessageSession>
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageSession.isConnecting'
    name: isConnecting
    fullName: isConnecting
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {boolean} isConnecting Indicates whether the link is in the process of
      connecting

      (establishing) itself. Default value: `false`.
    syntax:
      content: 'isConnecting: boolean = false'
      return:
        type:
          - boolean
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageSession.isOpen'
    name: isOpen()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Determines whether the AMQP receiver link is open. If open then returns
      true else returns false.
    syntax:
      content: function isOpen()
      parameters: []
      return:
        type:
          - boolean
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageSession.isReceivingMessages'
    name: isReceivingMessages
    fullName: isReceivingMessages
    children: []
    langs:
      - typeScript
    type: property
    summary: Denotes if we are currently receiving messages
    syntax:
      content: 'isReceivingMessages: boolean'
      return:
        type:
          - boolean
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageSession.maxAutoRenewDurationInSeconds'
    name: maxAutoRenewDurationInSeconds
    fullName: maxAutoRenewDurationInSeconds
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {number} maxAutoRenewDurationInSeconds The maximum duration within which
      the

      lock will be renewed automatically. This value should be greater than the
      longest message

      lock duration; for example, the `lockDuration` property on the received
      message.


      Default: `300` (5 minutes);
    syntax:
      content: 'maxAutoRenewDurationInSeconds: number'
      return:
        type:
          - number
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageSession.maxConcurrentCalls'
    name: maxConcurrentCalls
    fullName: maxConcurrentCalls
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {number} [maxConcurrentCalls] The maximum number of messages that should
      be

      processed concurrently in a session while in streaming mode. Once this
      limit has been reached,

      more messages will not be received until the user's message handler has
      completed processing current message.

      - **Default**: `1` (message in a session at a time).
    syntax:
      content: 'maxConcurrentCalls: number = 1'
      return:
        type:
          - number
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageSession.maxConcurrentSessions'
    name: maxConcurrentSessions
    fullName: maxConcurrentSessions
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {number} [maxConcurrentSessions] The maximum number of concurrent sessions
      that the

      client should initate.

      - **Default**: `1`.
    optional: true
    syntax:
      content: 'maxConcurrentSessions?: undefined | number'
      return:
        type:
          - undefined | number
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageSession.constructor'
    name: 'MessageSession(ClientEntityContext, MessageSessionOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new MessageSession(context: ClientEntityContext, options?:
        MessageSessionOptions)
      parameters:
        - id: context
          type:
            - '@azure/service-bus.ClientEntityContext'
          description: ''
        - id: options
          type:
            - '@azure/service-bus.MessageSessionOptions'
          description: ''
          optional: true
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageSession.name'
    name: name
    fullName: name
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      {string} id The unique name for the entity in the format:
      `${name of the entity}-${guid}`.
    syntax:
      content: 'name: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageSession.newMessageWaitTimeoutInSeconds'
    name: newMessageWaitTimeoutInSeconds
    fullName: newMessageWaitTimeoutInSeconds
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {number} [newMessageWaitTimeoutInSeconds] The maximum amount of idle time
      the session

      reaceiver will wait ater a message has been received. If no messages are
      received in that

      time frame then the session will be closed.
    optional: true
    syntax:
      content: 'newMessageWaitTimeoutInSeconds?: undefined | number'
      return:
        type:
          - undefined | number
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageSession.receive'
    name: 'receive(OnMessage, OnError, SessionMessageHandlerOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Registers handlers to deal with the incoming stream of messages over an
      AMQP receiver link

      from a Queue/Subscription.

      To stop receiving messages, call `close()` on the SessionReceiver or set
      the property

      `newMessageWaitTimeoutInSeconds` in the options to provide a timeout.
    syntax:
      content: >-
        function receive(onMessage: OnMessage, onError: OnError, options?:
        SessionMessageHandlerOptions)
      parameters:
        - id: onMessage
          type:
            - '@azure/service-bus.OnMessage'
          description: Handler for processing each incoming message.
        - id: onError
          type:
            - '@azure/service-bus.OnError'
          description: >-
            Handler for any error that occurs while receiving or processing
            messages.
        - id: options
          type:
            - '@azure/service-bus.SessionMessageHandlerOptions'
          description: >
            Options to control whether messages should be automatically
            completed. You can

            also provide a timeout in seconds to denote the amount of time to
            wait for a new message

            before closing the receiver.
          optional: true
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageSession.receiveMessages'
    name: 'receiveMessages(number, undefined | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a batch of messages based on given count and timeout over an AMQP
      receiver link

      from a Queue/Subscription.
    syntax:
      content: >-
        function receiveMessages(maxMessageCount: number, maxWaitTimeInSeconds?:
        undefined | number)
      parameters:
        - id: maxMessageCount
          type:
            - number
          description: The maximum number of messages to receive from Queue/Subscription.
        - id: maxWaitTimeInSeconds
          type:
            - undefined | number
          description: >-
            The total wait time in seconds until which the receiver will attempt
            to receive specified number of messages.

            If this time elapses before the `maxMessageCount` is reached, then
            messages collected till then will be returned to the user.

            - **Default**: `60` seconds.
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
        description: >-
          Promise<ServiceBusMessage[]> A promise that resolves with an array of
          Message objects.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageSession.receiveMode'
    name: receiveMode
    fullName: receiveMode
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      {number} [receiveMode] The mode in which messages should be received.
      Default: ReceiveMode.peekLock
    syntax:
      content: 'receiveMode: ReceiveMode'
      return:
        type:
          - '@azure/service-bus.ReceiveMode'
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageSession.sessionId'
    name: sessionId
    fullName: sessionId
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {string} [sessionId] The sessionId for the message session. Empty string
      is valid sessionId
    optional: true
    syntax:
      content: 'sessionId?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageSession.sessionLockedUntilUtc'
    name: sessionLockedUntilUtc
    fullName: sessionLockedUntilUtc
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {Date} [sessionLockedUntilUtc] Provides the duration until which the
      session is locked.
    optional: true
    syntax:
      content: 'sessionLockedUntilUtc?: Date'
      return:
        type:
          - Date
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageSession.settleMessage'
    name: 'settleMessage(ServiceBusMessage, DispositionType, DispositionOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Settles the message with the specified disposition.
    syntax:
      content: >-
        function settleMessage(message: ServiceBusMessage, operation:
        DispositionType, options?: DispositionOptions)
      parameters:
        - id: message
          type:
            - '@azure/service-bus.ServiceBusMessage'
          description: The ServiceBus Message that needs to be settled.
        - id: operation
          type:
            - '@azure/service-bus.DispositionType'
          description: The disposition type.
        - id: options
          type:
            - '@azure/service-bus.DispositionOptions'
          description: >
            Optional parameters that can be provided while disposing the
            message.
          optional: true
      return:
        type:
          - Promise<any>
        description: ''
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.LinkEntity'
    name: LinkEntity
    spec.typeScript:
      - name: LinkEntity
        fullName: LinkEntity
        uid: '@azure/service-bus.LinkEntity'
  - uid: '@azure/service-bus.ClientEntityContext'
    name: ClientEntityContext
    spec.typeScript:
      - name: ClientEntityContext
        fullName: ClientEntityContext
        uid: '@azure/service-bus.ClientEntityContext'
  - uid: '@azure/service-bus.MessageSessionOptions'
    name: MessageSessionOptions
    spec.typeScript:
      - name: MessageSessionOptions
        fullName: MessageSessionOptions
        uid: '@azure/service-bus.MessageSessionOptions'
  - uid: '@azure/service-bus.SessionCallee'
    name: SessionCallee
    spec.typeScript:
      - name: SessionCallee
        fullName: SessionCallee
        uid: '@azure/service-bus.SessionCallee'
  - uid: '@azure/service-bus.ReceiveMode'
    name: ReceiveMode
    spec.typeScript:
      - name: ReceiveMode
        fullName: ReceiveMode
        uid: '@azure/service-bus.ReceiveMode'
  - uid: '@azure/service-bus.OnMessage'
    name: OnMessage
    spec.typeScript:
      - name: OnMessage
        fullName: OnMessage
        uid: '@azure/service-bus.OnMessage'
  - uid: '@azure/service-bus.OnError'
    name: OnError
    spec.typeScript:
      - name: OnError
        fullName: OnError
        uid: '@azure/service-bus.OnError'
  - uid: '@azure/service-bus.SessionMessageHandlerOptions'
    name: SessionMessageHandlerOptions
    spec.typeScript:
      - name: SessionMessageHandlerOptions
        fullName: SessionMessageHandlerOptions
        uid: '@azure/service-bus.SessionMessageHandlerOptions'
  - uid: 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    name: 'ServiceBusMessage[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/service-bus.ServiceBusMessage'
    name: ServiceBusMessage
    spec.typeScript:
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
  - uid: '@azure/service-bus.DispositionType'
    name: DispositionType
    spec.typeScript:
      - name: DispositionType
        fullName: DispositionType
        uid: '@azure/service-bus.DispositionType'
  - uid: '@azure/service-bus.DispositionOptions'
    name: DispositionOptions
    spec.typeScript:
      - name: DispositionOptions
        fullName: DispositionOptions
        uid: '@azure/service-bus.DispositionOptions'
  - uid: Promise<@azure/service-bus.MessageSession>
    name: MessageSession>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: MessageSession
        fullName: MessageSession
        uid: '@azure/service-bus.MessageSession'
      - name: '>'
        fullName: '>'
