### YamlMime:TSType
name: ServiceBusClient
uid: '@azure/service-bus.ServiceBusClient'
package: '@azure/service-bus'
summary: >-
  A client that can create Sender instances for sending messages to queues and

  topics as well as Receiver instances to receive messages from queues and
  subscriptions.
fullName: ServiceBusClient
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'ServiceBusClient(string, ServiceBusClientOptions)'
    uid: '@azure/service-bus.ServiceBusClient.constructor'
    package: '@azure/service-bus'
    summary: >-
      Creates an instance of the ServiceBusClient class which can be used to
      create senders and receivers to

      the Azure Service Bus namespace provided in the connection string. No
      connection is made to the service

      until the senders/receivers created with the client are used to
      send/receive messages.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new ServiceBusClient(connectionString: string, options?:
        ServiceBusClientOptions)
      parameters:
        - id: connectionString
          type: string
          description: >-
            A connection string for Azure Service Bus namespace.

            NOTE: this connection string can contain an EntityPath, which is
            ignored.
        - id: options
          type: <xref uid="@azure/service-bus.ServiceBusClientOptions" />
          description: |
            Options for the service bus client.
  - name: 'ServiceBusClient(string, TokenCredential, ServiceBusClientOptions)'
    uid: '@azure/service-bus.ServiceBusClient.constructor_1'
    package: '@azure/service-bus'
    summary: >-
      Creates an instance of the ServiceBusClient class which can be used to
      create senders and receivers to

      the Azure Service Bus namespace provided. No connection is made to the
      service until

      the senders/receivers created with the client are used to send/receive
      messages.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new ServiceBusClient(fullyQualifiedNamespace: string, credential:
        TokenCredential, options?: ServiceBusClientOptions)
      parameters:
        - id: fullyQualifiedNamespace
          type: string
          description: |-
            The full namespace of your Service Bus instance which is
            likely to be similar to <yournamespace>.servicebus.windows.net.
        - id: credential
          type: TokenCredential
          description: >-
            A credential object used by the client to get the token to
            authenticate the connection

            with the Azure Service Bus. See &commat;azure/identity for creating
            the credentials.

            If you're using an own implementation of the `TokenCredential`
            interface against AAD, then set the "scopes" for service-bus

            to be `["https://servicebus.azure.net//user_impersonation"]` to get
            the appropriate token.
        - id: options
          type: <xref uid="@azure/service-bus.ServiceBusClientOptions" />
          description: |
            Options for the service bus client.
properties:
  - name: fullyQualifiedNamespace
    uid: '@azure/service-bus.ServiceBusClient.fullyQualifiedNamespace'
    package: '@azure/service-bus'
    summary: >-
      The fully qualified namespace of the Service Bus instance for which this
      client is created.

      This is likely to be similar to <yournamespace>.servicebus.windows.net.
    fullName: fullyQualifiedNamespace
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'fullyQualifiedNamespace: string'
      return:
        type: string
        description: ''
methods:
  - name: 'acceptNextSession(string, ServiceBusSessionReceiverOptions)'
    uid: '@azure/service-bus.ServiceBusClient.acceptNextSession'
    package: '@azure/service-bus'
    summary: >
      Creates a receiver for the next available session in a session-enabled
      Azure Service Bus queue.

      You can choose between two receive modes:  "peekLock" (default) and
      "receiveAndDelete".

      - In peekLock mode, the receiver has a lock on the message for the
      duration specified on the

      queue.

      - In receiveAndDelete mode, messages are deleted from Service Bus as they
      are received.


      You can settle a message by calling completeMessage(), abandonMessage(),
      deferMessage() or

      deadletterMessage() methods on the receiver.


      More information about how peekLock and message settlement works here:

      https://docs.microsoft.com/azure/service-bus-messaging/message-transfers-locks-settlement#peeklock
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function acceptNextSession(queueName: string, options?:
        ServiceBusSessionReceiverOptions)
      parameters:
        - id: queueName
          type: string
          description: The name of the queue to receive from.
        - id: options
          type: <xref uid="@azure/service-bus.ServiceBusSessionReceiverOptions" />
          description: >-
            Options include receiveMode(defaulted to peekLock), options to
            create session receiver.
      return:
        type: >-
          Promise&lt;<xref uid="@azure/service-bus.ServiceBusSessionReceiver"
          />&gt;
        description: 'A receiver that can be used to receive, peek and settle messages.'
  - name: 'acceptNextSession(string, string, ServiceBusSessionReceiverOptions)'
    uid: '@azure/service-bus.ServiceBusClient.acceptNextSession_1'
    package: '@azure/service-bus'
    summary: >
      Creates a receiver for the next available session in a session-enabled
      Azure Service Bus subscription.

      You can choose between two receive modes:  "peekLock" (default) and
      "receiveAndDelete".

      - In peekLock mode, the receiver has a lock on the message for the
      duration specified on the

      queue.

      - In receiveAndDelete mode, messages are deleted from Service Bus as they
      are received.


      You can settle a message by calling completeMessage(), abandonMessage(),
      deferMessage() or

      deadletterMessage() methods on the receiver.


      More information about how peekLock and message settlement works here:

      https://docs.microsoft.com/azure/service-bus-messaging/message-transfers-locks-settlement#peeklock
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function acceptNextSession(topicName: string, subscriptionName: string,
        options?: ServiceBusSessionReceiverOptions)
      parameters:
        - id: topicName
          type: string
          description: Name of the topic for the subscription we want to receive from.
        - id: subscriptionName
          type: string
          description: >-
            Name of the subscription (under the `topic`) that we want to receive
            from.
        - id: options
          type: <xref uid="@azure/service-bus.ServiceBusSessionReceiverOptions" />
          description: >-
            Options include receiveMode(defaulted to peekLock), options to
            create session receiver.
      return:
        type: >-
          Promise&lt;<xref uid="@azure/service-bus.ServiceBusSessionReceiver"
          />&gt;
        description: 'A receiver that can be used to receive, peek and settle messages.'
  - name: 'acceptSession(string, string, ServiceBusSessionReceiverOptions)'
    uid: '@azure/service-bus.ServiceBusClient.acceptSession'
    package: '@azure/service-bus'
    summary: >
      Creates a receiver for a session enabled Azure Service Bus queue.

      You can choose between two receive modes:  "peekLock" (default) and
      "receiveAndDelete".

      - In peekLock mode, the receiver has a lock on the message for the
      duration specified on the

      queue.

      - In receiveAndDelete mode, messages are deleted from Service Bus as they
      are received.


      You can settle a message by calling completeMessage(), abandonMessage(),
      deferMessage() or

      deadletterMessage() methods on the receiver.


      More information about how peekLock and message settlement works here:

      https://docs.microsoft.com/azure/service-bus-messaging/message-transfers-locks-settlement#peeklock
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function acceptSession(queueName: string, sessionId: string, options?:
        ServiceBusSessionReceiverOptions)
      parameters:
        - id: queueName
          type: string
          description: The name of the queue to receive from.
        - id: sessionId
          type: string
          description: The id of the session from which messages need to be received
        - id: options
          type: <xref uid="@azure/service-bus.ServiceBusSessionReceiverOptions" />
          description: >-
            Options include receiveMode(defaulted to peekLock), options to
            create session receiver.
      return:
        type: >-
          Promise&lt;<xref uid="@azure/service-bus.ServiceBusSessionReceiver"
          />&gt;
        description: 'A receiver that can be used to receive, peek and settle messages.'
  - name: 'acceptSession(string, string, string, ServiceBusSessionReceiverOptions)'
    uid: '@azure/service-bus.ServiceBusClient.acceptSession_1'
    package: '@azure/service-bus'
    summary: >
      Creates a receiver for a session enabled Azure Service Bus subscription.

      You can choose between two receive modes:  "peekLock" (default) and
      "receiveAndDelete".

      - In peekLock mode, the receiver has a lock on the message for the
      duration specified on the

      queue.

      - In receiveAndDelete mode, messages are deleted from Service Bus as they
      are received.


      You can settle a message by calling completeMessage(), abandonMessage(),
      deferMessage() or

      deadletterMessage() methods on the receiver.


      More information about how peekLock and message settlement works here:

      https://docs.microsoft.com/azure/service-bus-messaging/message-transfers-locks-settlement#peeklock
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function acceptSession(topicName: string, subscriptionName: string,
        sessionId: string, options?: ServiceBusSessionReceiverOptions)
      parameters:
        - id: topicName
          type: string
          description: Name of the topic for the subscription we want to receive from.
        - id: subscriptionName
          type: string
          description: >-
            Name of the subscription (under the `topic`) that we want to receive
            from.
        - id: sessionId
          type: string
          description: The id of the session from which messages need to be received
        - id: options
          type: <xref uid="@azure/service-bus.ServiceBusSessionReceiverOptions" />
          description: >-
            Options include receiveMode(defaulted to peekLock), options to
            create session receiver.
      return:
        type: >-
          Promise&lt;<xref uid="@azure/service-bus.ServiceBusSessionReceiver"
          />&gt;
        description: 'A receiver that can be used to receive, peek and settle messages.'
  - name: close()
    uid: '@azure/service-bus.ServiceBusClient.close'
    package: '@azure/service-bus'
    summary: >-
      Closes the underlying AMQP connection.

      NOTE: this will also disconnect any Receiver or Sender instances created
      from this

      instance.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function close()
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: 'createReceiver(string, ServiceBusReceiverOptions)'
    uid: '@azure/service-bus.ServiceBusClient.createReceiver'
    package: '@azure/service-bus'
    summary: >
      Creates a receiver for an Azure Service Bus queue. No connection is made

      to the service until one of the methods on the receiver is called.

      To target sub queues like the dead letter queue or the transfer dead
      letter queue, provide the

      `subQueue` in the options. To learn more about dead letter queues, see

      https://docs.microsoft.com/azure/service-bus-messaging/service-bus-dead-letter-queues


      You can choose between two receive modes:  "peekLock" (default) and
      "receiveAndDelete".

      - In peekLock mode, the receiver has a lock on the message for the
      duration specified on the

      queue.

      - In receiveAndDelete mode, messages are deleted from Service Bus as they
      are received.


      Messages that are not settled within the lock duration will be redelivered
      as many times as

      the max delivery count set on the queue, after which they get sent to a
      separate dead letter

      queue.


      You can settle a message by calling completeMessage(), abandonMessage(),
      deferMessage() or

      deadletterMessage() methods on the receiver.


      More information about how peekLock and message settlement works here:

      https://docs.microsoft.com/azure/service-bus-messaging/message-transfers-locks-settlement#peeklock
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createReceiver(queueName: string, options?:
        ServiceBusReceiverOptions)
      parameters:
        - id: queueName
          type: string
          description: The name of the queue to receive from.
        - id: options
          type: <xref uid="@azure/service-bus.ServiceBusReceiverOptions" />
          description: 'Options to pass the receiveMode, defaulted to peekLock.'
      return:
        type: <xref uid="@azure/service-bus.ServiceBusReceiver" />
        description: 'A receiver that can be used to receive, peek and settle messages.'
  - name: 'createReceiver(string, string, ServiceBusReceiverOptions)'
    uid: '@azure/service-bus.ServiceBusClient.createReceiver_1'
    package: '@azure/service-bus'
    summary: >
      Creates a receiver for an Azure Service Bus subscription. No connection is
      made

      to the service until one of the methods on the receiver is called.

      To target sub queues like the dead letter queue or the transfer dead
      letter queue, provide the

      `subQueue` in the options. To learn more about dead letter queues, see

      https://docs.microsoft.com/azure/service-bus-messaging/service-bus-dead-letter-queues


      You can choose between two receive modes:  "peekLock" (default) and
      "receiveAndDelete".

      - In peekLock mode, the receiver has a lock on the message for the
      duration specified on the

      queue.

      - In receiveAndDelete mode, messages are deleted from Service Bus as they
      are received.


      Messages that are not settled within the lock duration will be redelivered
      as many times as

      the max delivery count set on the subscription, after which they get sent
      to a separate dead letter

      queue.


      You can settle a message by calling completeMessage(), abandonMessage(),
      deferMessage() or

      deadletterMessage() methods on the receiver.


      More information about how peekLock and message settlement works here:

      https://docs.microsoft.com/azure/service-bus-messaging/message-transfers-locks-settlement#peeklock
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createReceiver(topicName: string, subscriptionName: string,
        options?: ServiceBusReceiverOptions)
      parameters:
        - id: topicName
          type: string
          description: Name of the topic for the subscription we want to receive from.
        - id: subscriptionName
          type: string
          description: >-
            Name of the subscription (under the `topic`) that we want to receive
            from.
        - id: options
          type: <xref uid="@azure/service-bus.ServiceBusReceiverOptions" />
          description: 'Options to pass the receiveMode, defaulted to peekLock.'
      return:
        type: <xref uid="@azure/service-bus.ServiceBusReceiver" />
        description: 'A receiver that can be used to receive, peek and settle messages.'
  - name: createSender(string)
    uid: '@azure/service-bus.ServiceBusClient.createSender'
    package: '@azure/service-bus'
    summary: >-
      Creates a Sender which can be used to send messages, schedule messages to
      be

      sent at a later time and cancel such scheduled messages. No connection is
      made

      to the service until one of the methods on the sender is called.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function createSender(queueOrTopicName: string)'
      parameters:
        - id: queueOrTopicName
          type: string
          description: |
            The name of a queue or topic to send messages to.
      return:
        type: <xref uid="@azure/service-bus.ServiceBusSender" />
        description: ''
