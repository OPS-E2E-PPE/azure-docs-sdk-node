### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.Semaphore'
    name: Semaphore
    fullName: Semaphore
    children:
      - '@azure/service-bus.Semaphore.acquire'
      - '@azure/service-bus.Semaphore.awaitedTaskCount'
      - '@azure/service-bus.Semaphore.currentLockCount'
      - '@azure/service-bus.Semaphore.limit'
      - '@azure/service-bus.Semaphore.release'
      - '@azure/service-bus.Semaphore.constructor'
      - '@azure/service-bus.Semaphore.use'
    langs:
      - typeScript
    type: class
    summary: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Semaphore.acquire'
    name: acquire()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Acquires a lock from the semaphore, returns a Promise that resolves when
      the caller holds

      a lock.
    syntax:
      content: function acquire()
      parameters: []
      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Semaphore.awaitedTaskCount'
    name: awaitedTaskCount()
    children: []
    type: method
    langs:
      - typeScript
    summary: Provides the number of tasks waiting to acquire a lock.
    syntax:
      content: function awaitedTaskCount()
      parameters: []
      return:
        type:
          - number
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Semaphore.currentLockCount'
    name: currentLockCount()
    children: []
    type: method
    langs:
      - typeScript
    summary: Provides the number of locks currently held.
    syntax:
      content: function currentLockCount()
      parameters: []
      return:
        type:
          - number
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Semaphore.limit'
    name: limit
    fullName: limit
    children: []
    langs:
      - typeScript
    type: property
    summary: The number of concurrent calls that can be made.
    syntax:
      content: 'limit: number'
      return:
        type:
          - number
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Semaphore.release'
    name: release()
    children: []
    type: method
    langs:
      - typeScript
    summary: Releases a lock back to the semaphore.
    syntax:
      content: function release()
      parameters: []
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Semaphore.constructor'
    name: Semaphore(number)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new Semaphore(limit: number)'
      parameters:
        - id: limit
          type:
            - number
          description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Semaphore.use'
    name: use(() => T | PromiseLike<T>)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Aquires a lock from the semaphore and then execute the fn. If the fn
      returns a Promise,

      wait for that promise to settle and then release the lock back to the
      semaphore.
    syntax:
      content: 'function use<T>(fn: () => T | PromiseLike<T>)'
      parameters:
        - id: fn
          type:
            - () => T | PromiseLike<T>
          description: The function that needs to be executed in the ciritical region.
      return:
        type:
          - Promise<T>
        description: A Promise that will settle with the return value of fn.
    package: '@azure/service-bus'
