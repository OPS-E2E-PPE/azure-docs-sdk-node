### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.MessageSender'
    name: MessageSender
    fullName: MessageSender
    children:
      - '@azure/service-bus.MessageSender.address'
      - '@azure/service-bus.MessageSender.audience'
      - '@azure/service-bus.MessageSender.close'
      - '@azure/service-bus.MessageSender.create'
      - '@azure/service-bus.MessageSender.isConnecting'
      - '@azure/service-bus.MessageSender.isOpen'
      - '@azure/service-bus.MessageSender.constructor'
      - '@azure/service-bus.MessageSender.name'
      - '@azure/service-bus.MessageSender.onDetached'
      - '@azure/service-bus.MessageSender.send'
      - '@azure/service-bus.MessageSender.sendBatch'
      - '@azure/service-bus.MessageSender.senderLock'
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: '@azure/service-bus.LinkEntity'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageSender.address'
    name: address
    fullName: address
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      {string} address The client entity address in one of the following forms:

      **Sender**
      - `"<queue-name>"`.
      - `"<topic-name>"`.

      **Receiver**
      - `"<queue-name>"`.
      - `"<topic-name>"`.

      **ManagementClient**
      -`"$management"`.
    syntax:
      content: 'address: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageSender.audience'
    name: audience
    fullName: audience
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {string} audience The client entity token audience in one of the following
      forms:


      **Sender**

      - `"sb://<yournamespace>.servicebus.windows.net/<queue-name>"`

      - `"sb://<yournamespace>.servicebus.windows.net/<topic-name>"`


      **Receiver**

      - `"sb://<yournamespace>.servicebus.windows.net/<queue-name>"`

      - `"sb://<yournamespace>.servicebus.windows.net/<topic-name>"`


      **ManagementClient**

      -
      `"sb://<your-namespace>.servicebus.windows.net/<queue-name>/$management"`.

      -
      `"sb://<your-namespace>.servicebus.windows.net/<topic-name>/$management"`.
    syntax:
      content: 'audience: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageSender.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Deletes the sender fromt the context. Clears the token renewal timer.
      Closes the sender link.
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
        description: Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageSender.create'
    name: create(ClientEntityContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new sender to the specifiec ServiceBus entity, and optionally to
      a given

      partition if it is not present in the context or returns the one present
      in the context.
    syntax:
      content: 'static function create(context: ClientEntityContext)'
      parameters:
        - id: context
          type:
            - '@azure/service-bus.ClientEntityContext'
          description: ''
      return:
        type:
          - '@azure/service-bus.MessageSender'
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageSender.isConnecting'
    name: isConnecting
    fullName: isConnecting
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {boolean} isConnecting Indicates whether the link is in the process of
      connecting

      (establishing) itself. Default value: `false`.
    syntax:
      content: 'isConnecting: boolean = false'
      return:
        type:
          - boolean
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageSender.isOpen'
    name: isOpen()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Determines whether the AMQP sender link is open. If open then returns true
      else returns false.
    syntax:
      content: function isOpen()
      parameters: []
      return:
        type:
          - boolean
        description: boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageSender.constructor'
    name: MessageSender(ClientEntityContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates a new MessageSender instance.
    syntax:
      content: 'new MessageSender(context: ClientEntityContext)'
      parameters:
        - id: context
          type:
            - '@azure/service-bus.ClientEntityContext'
          description: |
            The client entity context.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageSender.name'
    name: name
    fullName: name
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      {string} id The unique name for the entity in the format:
      `${name of the entity}-${guid}`.
    syntax:
      content: 'name: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageSender.onDetached'
    name: onDetached(AmqpError | Error)
    children: []
    type: method
    langs:
      - typeScript
    summary: Will reconnect the sender link if necessary.
    syntax:
      content: 'function onDetached(senderError?: AmqpError | Error)'
      parameters:
        - id: senderError
          type:
            - AmqpError | Error
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
        description: Promise<void>.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageSender.send'
    name: send(SendableMessageInfo)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Sends the given message, with the given options on this link'
    syntax:
      content: 'function send(data: SendableMessageInfo)'
      parameters:
        - id: data
          type:
            - '@azure/service-bus.SendableMessageInfo'
          description: Message to send.  Will be sent as UTF8-encoded JSON string.
      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageSender.sendBatch'
    name: 'sendBatch(SendableMessageInfo[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Send a batch of Message to the ServiceBus in a single AMQP message. The
      "message_annotations",

      "application_properties" and "properties" of the first message will be set
      as that

      of the envelope (batch message).
    syntax:
      content: 'function sendBatch(inputMessages: SendableMessageInfo[])'
      parameters:
        - id: inputMessages
          type:
            - '@azure/service-bus.SendableMessageInfo[]'
          description: |-
            An array of Message objects to be sent in a
            Batch message.
      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageSender.senderLock'
    name: senderLock
    fullName: senderLock
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {string} senderLock The unqiue lock name per connection that is used to
      acquire the

      lock for establishing a sender link by an entity on that connection.
    syntax:
      content: 'senderLock: string = `sender-${generate_uuid()}`'
      return:
        type:
          - string
        description: ''
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.LinkEntity'
    name: LinkEntity
    spec.typeScript:
      - name: LinkEntity
        fullName: LinkEntity
        uid: '@azure/service-bus.LinkEntity'
  - uid: '@azure/service-bus.ClientEntityContext'
    name: ClientEntityContext
    spec.typeScript:
      - name: ClientEntityContext
        fullName: ClientEntityContext
        uid: '@azure/service-bus.ClientEntityContext'
  - uid: '@azure/service-bus.SendableMessageInfo'
    name: SendableMessageInfo
    spec.typeScript:
      - name: SendableMessageInfo
        fullName: SendableMessageInfo
        uid: '@azure/service-bus.SendableMessageInfo'
  - uid: '@azure/service-bus.SendableMessageInfo[]'
    name: 'SendableMessageInfo[]'
    spec.typeScript:
      - name: SendableMessageInfo
        fullName: SendableMessageInfo
        uid: '@azure/service-bus.SendableMessageInfo'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/service-bus.MessageSender'
    name: MessageSender
    spec.typeScript:
      - name: MessageSender
        fullName: MessageSender
        uid: '@azure/service-bus.MessageSender'
