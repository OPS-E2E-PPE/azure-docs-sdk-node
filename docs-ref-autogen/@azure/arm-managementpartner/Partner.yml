### YamlMime:UniversalReference
items:
  - uid: '@azure/arm-managementpartner.Partner'
    name: Partner
    fullName: Partner
    children:
      - '@azure/arm-managementpartner.Partner.create'
      - '@azure/arm-managementpartner.Partner.create_2'
      - '@azure/arm-managementpartner.Partner.create_1'
      - '@azure/arm-managementpartner.Partner.deleteMethod'
      - '@azure/arm-managementpartner.Partner.deleteMethod_2'
      - '@azure/arm-managementpartner.Partner.deleteMethod_1'
      - '@azure/arm-managementpartner.Partner.get'
      - '@azure/arm-managementpartner.Partner.get_2'
      - '@azure/arm-managementpartner.Partner.get_1'
      - '@azure/arm-managementpartner.Partner.constructor'
      - '@azure/arm-managementpartner.Partner.update'
      - '@azure/arm-managementpartner.Partner.update_2'
      - '@azure/arm-managementpartner.Partner.update_1'
    langs:
      - typeScript
    type: class
    summary: Class representing a Partner.
    package: '@azure/arm-managementpartner'
  - uid: '@azure/arm-managementpartner.Partner.create'
    name: 'create(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Create a management partner for the objectId and tenantId.
    syntax:
      content: 'function create(partnerId: string, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: partnerId
          type:
            - string
          description: Id of the Partner
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PartnerCreateResponse>
        description: Promise<Models.PartnerCreateResponse>
    package: '@azure/arm-managementpartner'
  - uid: '@azure/arm-managementpartner.Partner.create_2'
    name: 'create(string, RequestOptionsBase, ServiceCallback<PartnerResponse>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function create(partnerId: string, options: RequestOptionsBase,
        callback: ServiceCallback<PartnerResponse>)
      parameters:
        - id: partnerId
          type:
            - string
          description: Id of the Partner
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-managementpartner.PartnerResponse>
          description: |
            The callback
    package: '@azure/arm-managementpartner'
  - uid: '@azure/arm-managementpartner.Partner.create_1'
    name: 'create(string, ServiceCallback<PartnerResponse>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function create(partnerId: string, callback:
        ServiceCallback<PartnerResponse>)
      parameters:
        - id: partnerId
          type:
            - string
          description: Id of the Partner
        - id: callback
          type:
            - ServiceCallback<@azure/arm-managementpartner.PartnerResponse>
          description: |
            The callback
    package: '@azure/arm-managementpartner'
  - uid: '@azure/arm-managementpartner.Partner.deleteMethod'
    name: 'deleteMethod(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete the management partner for the objectId and tenantId.
    syntax:
      content: >-
        function deleteMethod(partnerId: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: partnerId
          type:
            - string
          description: Id of the Partner
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/arm-managementpartner'
  - uid: '@azure/arm-managementpartner.Partner.deleteMethod_2'
    name: 'deleteMethod(string, RequestOptionsBase, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteMethod(partnerId: string, options: RequestOptionsBase,
        callback: ServiceCallback<void>)
      parameters:
        - id: partnerId
          type:
            - string
          description: Id of the Partner
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/arm-managementpartner'
  - uid: '@azure/arm-managementpartner.Partner.deleteMethod_1'
    name: 'deleteMethod(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteMethod(partnerId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: partnerId
          type:
            - string
          description: Id of the Partner
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/arm-managementpartner'
  - uid: '@azure/arm-managementpartner.Partner.get'
    name: 'get(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Get the management partner using the partnerId, objectId and tenantId.'
    syntax:
      content: 'function get(partnerId: string, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: partnerId
          type:
            - string
          description: Id of the Partner
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PartnerGetResponse>
        description: Promise<Models.PartnerGetResponse>
    package: '@azure/arm-managementpartner'
  - uid: '@azure/arm-managementpartner.Partner.get_2'
    name: 'get(string, RequestOptionsBase, ServiceCallback<PartnerResponse>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function get(partnerId: string, options: RequestOptionsBase, callback:
        ServiceCallback<PartnerResponse>)
      parameters:
        - id: partnerId
          type:
            - string
          description: Id of the Partner
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-managementpartner.PartnerResponse>
          description: |
            The callback
    package: '@azure/arm-managementpartner'
  - uid: '@azure/arm-managementpartner.Partner.get_1'
    name: 'get(string, ServiceCallback<PartnerResponse>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function get(partnerId: string, callback:
        ServiceCallback<PartnerResponse>)
      parameters:
        - id: partnerId
          type:
            - string
          description: Id of the Partner
        - id: callback
          type:
            - ServiceCallback<@azure/arm-managementpartner.PartnerResponse>
          description: |
            The callback
    package: '@azure/arm-managementpartner'
  - uid: '@azure/arm-managementpartner.Partner.constructor'
    name: Partner(ACEProvisioningManagementPartnerAPIContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Create a Partner.
    syntax:
      content: 'new Partner(client: ACEProvisioningManagementPartnerAPIContext)'
      parameters:
        - id: client
          type:
            - >-
              @azure/arm-managementpartner.ACEProvisioningManagementPartnerAPIContext
          description: |
            Reference to the service client.
    package: '@azure/arm-managementpartner'
  - uid: '@azure/arm-managementpartner.Partner.update'
    name: 'update(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Update the management partner for the objectId and tenantId.
    syntax:
      content: 'function update(partnerId: string, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: partnerId
          type:
            - string
          description: Id of the Partner
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PartnerUpdateResponse>
        description: Promise<Models.PartnerUpdateResponse>
    package: '@azure/arm-managementpartner'
  - uid: '@azure/arm-managementpartner.Partner.update_2'
    name: 'update(string, RequestOptionsBase, ServiceCallback<PartnerResponse>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function update(partnerId: string, options: RequestOptionsBase,
        callback: ServiceCallback<PartnerResponse>)
      parameters:
        - id: partnerId
          type:
            - string
          description: Id of the Partner
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-managementpartner.PartnerResponse>
          description: |
            The callback
    package: '@azure/arm-managementpartner'
  - uid: '@azure/arm-managementpartner.Partner.update_1'
    name: 'update(string, ServiceCallback<PartnerResponse>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function update(partnerId: string, callback:
        ServiceCallback<PartnerResponse>)
      parameters:
        - id: partnerId
          type:
            - string
          description: Id of the Partner
        - id: callback
          type:
            - ServiceCallback<@azure/arm-managementpartner.PartnerResponse>
          description: |
            The callback
    package: '@azure/arm-managementpartner'
references:
  - uid: '@azure/arm-managementpartner.ACEProvisioningManagementPartnerAPIContext'
    name: ACEProvisioningManagementPartnerAPIContext
    spec.typeScript:
      - name: ACEProvisioningManagementPartnerAPIContext
        fullName: ACEProvisioningManagementPartnerAPIContext
        uid: >-
          @azure/arm-managementpartner.ACEProvisioningManagementPartnerAPIContext
  - uid: ServiceCallback<@azure/arm-managementpartner.PartnerResponse>
    name: PartnerResponse>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PartnerResponse
        fullName: PartnerResponse
        uid: '@azure/arm-managementpartner.PartnerResponse'
      - name: '>'
        fullName: '>'
