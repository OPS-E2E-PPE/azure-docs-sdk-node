### YamlMime:UniversalReference
items:
  - uid: '@azure/cosmos.Databases'
    name: Databases
    fullName: Databases
    children:
      - '@azure/cosmos.Databases.client'
      - '@azure/cosmos.Databases.create'
      - '@azure/cosmos.Databases.createIfNotExists'
      - '@azure/cosmos.Databases.query'
      - '@azure/cosmos.Databases.query_1'
      - '@azure/cosmos.Databases.readAll'
    langs:
      - typeScript
    type: class
    summary: 'Operations for creating new databases, and reading/querying all databases'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Databases.client'
    name: client
    fullName: client
    children: []
    langs:
      - typeScript
    type: property
    summary: 'The parent <xref:CosmosClient> for the Database.'
    syntax:
      content: 'public client: CosmosClient'
      return:
        type:
          - '@azure/cosmos.CosmosClient'
        description: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Databases.create'
    name: 'create(DatabaseRequest, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Send a request for creating a database.

      A database manages users, permissions and a set of containers.

      Each Azure Cosmos DB Database Account is able to support multiple
      independent named databases,

      with the database being the logical container for data.


      Each Database consists of one or more containers, each of which in turn
      contain one or more

      documents. Since databases are an administrative resource, the Service
      Master Key will be

      required in order to access and successfully complete any action using the
      User APIs.
    syntax:
      content: 'function create(body: DatabaseRequest, options: RequestOptions)'
      parameters:
        - id: body
          type:
            - '@azure/cosmos.DatabaseRequest'
          description: >-
            The <xref:DatabaseDefinition> that represents the <xref:Database> to
            be created.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: >
            Use to set options like response page size, continuation tokens,
            etc.
      return:
        type:
          - Promise<@azure/cosmos.DatabaseResponse>
        description: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Databases.createIfNotExists'
    name: 'createIfNotExists(DatabaseRequest, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Check if a database exists, and if it doesn't, create it.

      This will make a read operation based on the id in the `body`, then if it
      is not found, a create operation.

      A database manages users, permissions and a set of containers.

      Each Azure Cosmos DB Database Account is able to support multiple
      independent named databases,

      with the database being the logical container for data.


      Each Database consists of one or more containers, each of which in turn
      contain one or more

      documents. Since databases are an an administrative resource, the Service
      Master Key will be

      required in order to access and successfully complete any action using the
      User APIs.
    syntax:
      content: >-
        function createIfNotExists(body: DatabaseRequest, options?:
        RequestOptions)
      parameters:
        - id: body
          type:
            - '@azure/cosmos.DatabaseRequest'
          description: >-
            The <xref:DatabaseDefinition> that represents the <xref:Database> to
            be created.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: |+

          optional: true
      return:
        type:
          - Promise<@azure/cosmos.DatabaseResponse>
        description: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Databases.query'
    name: 'query(string | SqlQuerySpec, FeedOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Queries all databases.
    syntax:
      content: 'function query(query: string | SqlQuerySpec, options?: FeedOptions)'
      parameters:
        - id: query
          type:
            - string | @azure/cosmos.SqlQuerySpec
          description: >-
            Query configuration for the operation. See <xref:SqlQuerySpec> for
            more info on how to configure a query.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: >-
            Use to set options like response page size, continuation tokens,
            etc.
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator<any>'
        description: >-
          Allows you to return all databases in an array or iterate over them
          one at a time.
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Databases.query_1'
    name: 'query(string | SqlQuerySpec, FeedOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Queries all databases.
    syntax:
      content: 'function query<T>(query: string | SqlQuerySpec, options?: FeedOptions)'
      parameters:
        - id: query
          type:
            - string | @azure/cosmos.SqlQuerySpec
          description: >-
            Query configuration for the operation. See <xref:SqlQuerySpec> for
            more info on how to configure a query.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: >-
            Use to set options like response page size, continuation tokens,
            etc.
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator<T>'
        description: >-
          Allows you to return all databases in an array or iterate over them
          one at a time.
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Databases.readAll'
    name: readAll(FeedOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Reads all databases.
    syntax:
      content: 'function readAll(options?: FeedOptions)'
      parameters:
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: >-
            Use to set options like response page size, continuation tokens,
            etc.
          optional: true
      return:
        type:
          - >-
            @azure/cosmos.QueryIterator<@azure/cosmos.DatabaseDefinition &
            @azure/cosmos.Resource>
        description: >-
          Allows you to return all databases in an array or iterate over them
          one at a time.
    package: '@azure/cosmos'
references:
  - uid: '@azure/cosmos.CosmosClient'
    name: CosmosClient
    spec.typeScript:
      - name: CosmosClient
        fullName: CosmosClient
        uid: '@azure/cosmos.CosmosClient'
  - uid: '@azure/cosmos.DatabaseRequest'
    name: DatabaseRequest
    spec.typeScript:
      - name: DatabaseRequest
        fullName: DatabaseRequest
        uid: '@azure/cosmos.DatabaseRequest'
  - uid: '@azure/cosmos.RequestOptions'
    name: RequestOptions
    spec.typeScript:
      - name: RequestOptions
        fullName: RequestOptions
        uid: '@azure/cosmos.RequestOptions'
  - uid: Promise<@azure/cosmos.DatabaseResponse>
    name: DatabaseResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DatabaseResponse
        fullName: DatabaseResponse
        uid: '@azure/cosmos.DatabaseResponse'
      - name: '>'
        fullName: '>'
  - uid: string | @azure/cosmos.SqlQuerySpec
    name: SqlQuerySpec
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - name: SqlQuerySpec
        fullName: SqlQuerySpec
        uid: '@azure/cosmos.SqlQuerySpec'
  - uid: '@azure/cosmos.FeedOptions'
    name: FeedOptions
    spec.typeScript:
      - name: FeedOptions
        fullName: FeedOptions
        uid: '@azure/cosmos.FeedOptions'
  - uid: '@azure/cosmos.QueryIterator<any>'
    name: QueryIterator<any>
    spec.typeScript:
      - name: QueryIterator
        fullName: QueryIterator
        uid: '@azure/cosmos.QueryIterator'
      - name: <any>
        fullName: <any>
  - uid: '@azure/cosmos.QueryIterator<T>'
    name: QueryIterator<T>
    spec.typeScript:
      - name: QueryIterator
        fullName: QueryIterator
        uid: '@azure/cosmos.QueryIterator'
      - name: <T>
        fullName: <T>
  - uid: >-
      @azure/cosmos.QueryIterator<@azure/cosmos.DatabaseDefinition &
      @azure/cosmos.Resource>
    name: Resource>
    spec.typeScript:
      - name: QueryIterator
        fullName: QueryIterator
        uid: '@azure/cosmos.QueryIterator'
      - name: <
        fullName: <
      - name: DatabaseDefinition
        fullName: DatabaseDefinition
        uid: '@azure/cosmos.DatabaseDefinition'
      - name: ' & '
        fullName: ' & '
      - name: Resource
        fullName: Resource
        uid: '@azure/cosmos.Resource'
      - name: '>'
        fullName: '>'
