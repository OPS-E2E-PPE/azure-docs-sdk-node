### YamlMime:UniversalReference
items:
  - uid: '@azure/cosmos.QueryIterator'
    name: QueryIterator
    fullName: QueryIterator<T>
    children:
      - '@azure/cosmos.QueryIterator.fetchAll'
      - '@azure/cosmos.QueryIterator.fetchNext'
      - '@azure/cosmos.QueryIterator.getAsyncIterator'
      - '@azure/cosmos.QueryIterator.hasMoreResults'
      - '@azure/cosmos.QueryIterator.reset'
    langs:
      - typeScript
    type: class
    summary: >-
      Represents a QueryIterator Object, an implementation of feed or query
      response that enables

      traversal and iterating over the response

      in the Azure Cosmos DB database service.
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.QueryIterator.fetchAll'
    name: fetchAll()
    children: []
    type: method
    langs:
      - typeScript
    summary: Fetch all pages for the query and return a single FeedResponse.
    syntax:
      content: function fetchAll()
      parameters: []
      return:
        type:
          - Promise<@azure/cosmos.FeedResponse<T>>
        description: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.QueryIterator.fetchNext'
    name: fetchNext()
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Retrieve the next batch from the feed.

      This may or may not fetch more pages from the backend depending on your
      settings

      and the type of query. Aggregate queries will generally fetch all backend
      pages

      before returning the first batch of responses.
    syntax:
      content: function fetchNext()
      parameters: []
      return:
        type:
          - Promise<@azure/cosmos.FeedResponse<T>>
        description: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.QueryIterator.getAsyncIterator'
    name: getAsyncIterator()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Gets an async iterator that will yield results until completion.
      NOTE: AsyncIterators are a very new feature and you might need to
      use polyfils/etc. in order to use them in your code.

      If you're using TypeScript, you can use the following polyfill as long
      as you target ES6 or higher and are running on Node 6 or higher.

      ```typescript
      if (!Symbol || !Symbol.asyncIterator) {
        (Symbol as any).asyncIterator = Symbol.for("Symbol.asyncIterator");
      }
      ```
    syntax:
      content: function getAsyncIterator()
      parameters: []
      return:
        type:
          - AsyncIterable<@azure/cosmos.FeedResponse<T>>
        description: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.QueryIterator.hasMoreResults'
    name: hasMoreResults()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Determine if there are still remaining resources to processs based on the
      value of the continuation token or the\

      elements remaining on the current batch in the QueryIterator.
    syntax:
      content: function hasMoreResults()
      parameters: []
      return:
        type:
          - boolean
        description: true if there is other elements to process in the QueryIterator.
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.QueryIterator.reset'
    name: reset()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Reset the QueryIterator to the beginning and clear all the resources
      inside it
    syntax:
      content: function reset()
      parameters: []
    package: '@azure/cosmos'
references:
  - uid: Promise<@azure/cosmos.FeedResponse<T>>
    name: FeedResponse<T>>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: FeedResponse
        fullName: FeedResponse
        uid: '@azure/cosmos.FeedResponse'
      - name: <T>>
        fullName: <T>>
  - uid: AsyncIterable<@azure/cosmos.FeedResponse<T>>
    name: FeedResponse<T>>
    spec.typeScript:
      - name: AsyncIterable<
        fullName: AsyncIterable<
      - name: FeedResponse
        fullName: FeedResponse
        uid: '@azure/cosmos.FeedResponse'
      - name: <T>>
        fullName: <T>>
