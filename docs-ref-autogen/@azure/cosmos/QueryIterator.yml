### YamlMime:TSType
name: QueryIterator
uid: '@azure/cosmos.QueryIterator'
package: '@azure/cosmos'
summary: >-
  Represents a QueryIterator Object, an implementation of feed or query response
  that enables

  traversal and iterating over the response

  in the Azure Cosmos DB database service.
fullName: QueryIterator<T>
remarks: ''
isPreview: false
isDeprecated: false
type: class
methods:
  - name: fetchAll()
    uid: '@azure/cosmos.QueryIterator.fetchAll'
    package: '@azure/cosmos'
    summary: Fetch all pages for the query and return a single FeedResponse.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function fetchAll()
      return:
        type: Promise&lt;<xref uid="@azure/cosmos.FeedResponse" />&lt;T&gt;&gt;
        description: ''
  - name: fetchNext()
    uid: '@azure/cosmos.QueryIterator.fetchNext'
    package: '@azure/cosmos'
    summary: >
      Retrieve the next batch from the feed.

      This may or may not fetch more pages from the backend depending on your
      settings

      and the type of query. Aggregate queries will generally fetch all backend
      pages

      before returning the first batch of responses.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function fetchNext()
      return:
        type: Promise&lt;<xref uid="@azure/cosmos.FeedResponse" />&lt;T&gt;&gt;
        description: ''
  - name: getAsyncIterator()
    uid: '@azure/cosmos.QueryIterator.getAsyncIterator'
    package: '@azure/cosmos'
    summary: |
      Gets an async iterator that will yield results until completion.
      NOTE: AsyncIterators are a very new feature and you might need to
      use polyfils/etc. in order to use them in your code.

      If you're using TypeScript, you can use the following polyfill as long
      as you target ES6 or higher and are running on Node 6 or higher.

      ```typescript
      if (!Symbol || !Symbol.asyncIterator) {
        (Symbol as any).asyncIterator = Symbol.for("Symbol.asyncIterator");
      }
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getAsyncIterator()
      return:
        type: >-
          AsyncIterable&lt;<xref uid="@azure/cosmos.FeedResponse"
          />&lt;T&gt;&gt;
        description: ''
  - name: hasMoreResults()
    uid: '@azure/cosmos.QueryIterator.hasMoreResults'
    package: '@azure/cosmos'
    summary: >-
      Determine if there are still remaining resources to processs based on the
      value of the continuation token or the

      elements remaining on the current batch in the QueryIterator.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function hasMoreResults()
      return:
        type: boolean
        description: true if there is other elements to process in the QueryIterator.
  - name: reset()
    uid: '@azure/cosmos.QueryIterator.reset'
    package: '@azure/cosmos'
    summary: >-
      Reset the QueryIterator to the beginning and clear all the resources
      inside it
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function reset()
