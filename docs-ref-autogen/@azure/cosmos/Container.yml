### YamlMime:TSType
name: Container
uid: '@azure/cosmos.Container'
package: '@azure/cosmos'
summary: >-
  Operations for reading, replacing, or deleting a specific, existing container
  by id.
fullName: Container
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
  - name: conflicts
    uid: '@azure/cosmos.Container.conflicts'
    package: '@azure/cosmos'
    summary: |
      Operations for reading and querying conflicts for the given container.
      For reading or deleting a specific conflict, use `.conflict(id)`.
    fullName: conflicts
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: Conflicts conflicts
      return:
        type: <xref uid="@azure/cosmos.Conflicts" />
        description: ''
  - name: database
    uid: '@azure/cosmos.Container.database'
    package: '@azure/cosmos'
    summary: ''
    fullName: database
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'database: Database'
      return:
        type: <xref uid="@azure/cosmos.Database" />
        description: ''
  - name: id
    uid: '@azure/cosmos.Container.id'
    package: '@azure/cosmos'
    summary: ''
    fullName: id
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'id: string'
      return:
        type: string
        description: ''
  - name: items
    uid: '@azure/cosmos.Container.items'
    package: '@azure/cosmos'
    summary: |
      Operations for creating new items, and reading/querying all items
      For reading, replacing, or deleting an existing item, use `.item(id)`.
    fullName: items
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: Items items
      return:
        type: <xref uid="@azure/cosmos.Items" />
        description: ''
  - name: scripts
    uid: '@azure/cosmos.Container.scripts'
    package: '@azure/cosmos'
    summary: 'All operations for Stored Procedures, Triggers, and User Defined Functions'
    fullName: scripts
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: Scripts scripts
      return:
        type: <xref uid="@azure/cosmos.Scripts" />
        description: ''
  - name: url
    uid: '@azure/cosmos.Container.url'
    package: '@azure/cosmos'
    summary: Returns a reference URL to the resource. Used for linking in Permissions.
    fullName: url
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: string url
      return:
        type: string
        description: ''
methods:
  - name: 'conflict(string, PartitionKey)'
    uid: '@azure/cosmos.Container.conflict'
    package: '@azure/cosmos'
    summary: >-
      Used to read, replace, or delete a specific, existing <xref:Conflict> by
      id.

      Use `.conflicts` for creating new conflicts, or querying/reading all
      conflicts.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function conflict(id: string, partitionKey?: PartitionKey)'
      parameters:
        - id: id
          type: string
          description: |
            The id of the <xref:Conflict>.
        - id: partitionKey
          type: <xref uid="@azure/cosmos.PartitionKey" />
          description: ''
      return:
        type: <xref uid="@azure/cosmos.Conflict" />
        description: ''
  - name: delete(RequestOptions)
    uid: '@azure/cosmos.Container.delete'
    package: '@azure/cosmos'
    summary: Delete the container
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function delete(options?: RequestOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/cosmos.ContainerResponse" />&gt;
        description: ''
  - name: getPartitionKeyDefinition()
    uid: '@azure/cosmos.Container.getPartitionKeyDefinition'
    package: '@azure/cosmos'
    summary: >-
      Gets the partition key definition first by looking into the cache
      otherwise by reading the collection.
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: This method has been renamed to readPartitionKeyDefinition.
    syntax:
      content: function getPartitionKeyDefinition()
      return:
        type: >-
          Promise&lt;<xref uid="@azure/cosmos.ResourceResponse" />&lt;<xref
          uid="@azure/cosmos.PartitionKeyDefinition" />&gt;&gt;
        description: ''
  - name: getQueryPlan(string | SqlQuerySpec)
    uid: '@azure/cosmos.Container.getQueryPlan'
    package: '@azure/cosmos'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getQueryPlan(query: string | SqlQuerySpec)'
      parameters:
        - id: query
          type: string | <xref uid="@azure/cosmos.SqlQuerySpec" />
          description: ''
      return:
        type: Promise&lt;Response&lt;PartitionedQueryExecutionInfo&gt;&gt;
        description: ''
  - name: 'item(string, PartitionKey)'
    uid: '@azure/cosmos.Container.item'
    package: '@azure/cosmos'
    summary: |
      Used to read, replace, or delete a specific, existing <xref:Item> by id.
      Use `.items` for creating new items, or querying/reading all items.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function item(id: string, partitionKeyValue?: PartitionKey)'
      parameters:
        - id: id
          type: string
          description: 'The id of the <xref:Item>.'
        - id: partitionKeyValue
          type: <xref uid="@azure/cosmos.PartitionKey" />
          description: 'The value of the <xref:Item> partition key'
      return:
        type: <xref uid="@azure/cosmos.Item" />
        description: ''
  - name: read(RequestOptions)
    uid: '@azure/cosmos.Container.read'
    package: '@azure/cosmos'
    summary: Read the container's definition
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function read(options?: RequestOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/cosmos.ContainerResponse" />&gt;
        description: ''
  - name: readOffer(RequestOptions)
    uid: '@azure/cosmos.Container.readOffer'
    package: '@azure/cosmos'
    summary: >-
      Gets offer on container. If none exists, returns an OfferResponse with
      undefined.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function readOffer(options?: RequestOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/cosmos.OfferResponse" />&gt;
        description: ''
  - name: readPartitionKeyRanges(FeedOptions)
    uid: '@azure/cosmos.Container.readPartitionKeyRanges'
    package: '@azure/cosmos'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function readPartitionKeyRanges(feedOptions?: FeedOptions)'
      parameters:
        - id: feedOptions
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: ''
      return:
        type: <xref uid="@azure/cosmos.QueryIterator" />&lt;PartitionKeyRange&gt;
        description: ''
  - name: 'replace(ContainerDefinition, RequestOptions)'
    uid: '@azure/cosmos.Container.replace'
    package: '@azure/cosmos'
    summary: Replace the container's definition
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function replace(body: ContainerDefinition, options?: RequestOptions)'
      parameters:
        - id: body
          type: <xref uid="@azure/cosmos.ContainerDefinition" />
          description: ''
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/cosmos.ContainerResponse" />&gt;
        description: ''
