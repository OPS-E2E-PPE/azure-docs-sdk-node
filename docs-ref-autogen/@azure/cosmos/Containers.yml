### YamlMime:TSType
name: Containers
uid: '@azure/cosmos.Containers'
package: '@azure/cosmos'
summary: 'Operations for creating new containers, and reading/querying all containers'
fullName: Containers
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'Containers(Database, ClientContext)'
    uid: '@azure/cosmos.Containers.constructor'
    package: '@azure/cosmos'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new Containers(database: Database, clientContext: ClientContext)'
      parameters:
        - id: database
          type: <xref uid="@azure/cosmos.Database" />
          description: ''
        - id: clientContext
          type: ClientContext
          description: ''
properties:
  - name: database
    uid: '@azure/cosmos.Containers.database'
    package: '@azure/cosmos'
    summary: ''
    fullName: database
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'database: Database'
      return:
        type: <xref uid="@azure/cosmos.Database" />
        description: ''
methods:
  - name: 'create(ContainerRequest, RequestOptions)'
    uid: '@azure/cosmos.Containers.create'
    package: '@azure/cosmos'
    summary: >
      Creates a container.

      A container is a named logical container for items.


      A database may contain zero or more named containers and each container
      consists of

      zero or more JSON items.


      Being schema-free, the items in a container do not need to share the same
      structure or fields.



      Since containers are application resources, they can be authorized using
      either the

      master key or resource keys.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function create(body: ContainerRequest, options?: RequestOptions)'
      parameters:
        - id: body
          type: <xref uid="@azure/cosmos.ContainerRequest" />
          description: Represents the body of the container.
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: >
            Use to set options like response page size, continuation tokens,
            etc.
      return:
        type: Promise&lt;<xref uid="@azure/cosmos.ContainerResponse" />&gt;
        description: ''
  - name: 'createIfNotExists(ContainerRequest, RequestOptions)'
    uid: '@azure/cosmos.Containers.createIfNotExists'
    package: '@azure/cosmos'
    summary: >
      Checks if a Container exists, and, if it doesn't, creates it.

      This will make a read operation based on the id in the `body`, then if it
      is not found, a create operation.

      You should confirm that the output matches the body you passed in for
      non-default properties (i.e. indexing policy/etc.)

      A container is a named logical container for items.


      A database may contain zero or more named containers and each container
      consists of

      zero or more JSON items.


      Being schema-free, the items in a container do not need to share the same
      structure or fields.



      Since containers are application resources, they can be authorized using
      either the

      master key or resource keys.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createIfNotExists(body: ContainerRequest, options?:
        RequestOptions)
      parameters:
        - id: body
          type: <xref uid="@azure/cosmos.ContainerRequest" />
          description: Represents the body of the container.
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: >
            Use to set options like response page size, continuation tokens,
            etc.
      return:
        type: Promise&lt;<xref uid="@azure/cosmos.ContainerResponse" />&gt;
        description: ''
  - name: 'query(SqlQuerySpec, FeedOptions)'
    uid: '@azure/cosmos.Containers.query'
    package: '@azure/cosmos'
    summary: Queries all containers.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function query(query: SqlQuerySpec, options?: FeedOptions)'
      parameters:
        - id: query
          type: <xref uid="@azure/cosmos.SqlQuerySpec" />
          description: >-
            Query configuration for the operation. See <xref:SqlQuerySpec> for
            more info on how to configure a query.
        - id: options
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: >-
            Use to set options like response page size, continuation tokens,
            etc.
      return:
        type: <xref uid="@azure/cosmos.QueryIterator" />&lt;any&gt;
        description: >-
          Allows you to return specific containers in an array or iterate over
          them one at a time.
  - name: 'query<T>(SqlQuerySpec, FeedOptions)'
    uid: '@azure/cosmos.Containers.query_1'
    package: '@azure/cosmos'
    summary: Queries all containers.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function query<T>(query: SqlQuerySpec, options?: FeedOptions)'
      parameters:
        - id: query
          type: <xref uid="@azure/cosmos.SqlQuerySpec" />
          description: >-
            Query configuration for the operation. See <xref:SqlQuerySpec> for
            more info on how to configure a query.
        - id: options
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: >-
            Use to set options like response page size, continuation tokens,
            etc.
      return:
        type: <xref uid="@azure/cosmos.QueryIterator" />&lt;T&gt;
        description: >-
          Allows you to return specific containers in an array or iterate over
          them one at a time.
  - name: readAll(FeedOptions)
    uid: '@azure/cosmos.Containers.readAll'
    package: '@azure/cosmos'
    summary: Read all containers.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function readAll(options?: FeedOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: >-
            Use to set options like response page size, continuation tokens,
            etc.
      return:
        type: >-
          <xref uid="@azure/cosmos.QueryIterator" />&lt;<xref
          uid="@azure/cosmos.ContainerDefinition" /> & <xref
          uid="@azure/cosmos.Resource" />&gt;
        description: >-
          Allows you to return all containers in an array or iterate over them
          one at a time.
