### YamlMime:UniversalReference
items:
  - uid: '@azure/cosmos.CosmosClient'
    name: CosmosClient
    fullName: CosmosClient
    children:
      - '@azure/cosmos.CosmosClient.constructor_1'
      - '@azure/cosmos.CosmosClient.constructor'
      - '@azure/cosmos.CosmosClient.database'
      - '@azure/cosmos.CosmosClient.databases'
      - '@azure/cosmos.CosmosClient.getDatabaseAccount'
      - '@azure/cosmos.CosmosClient.getReadEndpoint'
      - '@azure/cosmos.CosmosClient.getWriteEndpoint'
      - '@azure/cosmos.CosmosClient.offer'
      - '@azure/cosmos.CosmosClient.offers'
    langs:
      - typeScript
    type: class
    summary: >-
      Provides a client-side logical representation of the Azure Cosmos DB
      database account.

      This client is used to configure and execute requests in the Azure Cosmos
      DB database service.
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.CosmosClient.constructor_1'
    name: CosmosClient(CosmosClientOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >-
      Creates a new <xref:CosmosClient> object. See <xref:CosmosClientOptions>
      for more details on what options you can use.
    syntax:
      content: 'new CosmosClient(options: CosmosClientOptions)'
      parameters:
        - id: options
          type:
            - '@azure/cosmos.CosmosClientOptions'
          description: |
            bag of options - require at least endpoint and auth to be configured
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.CosmosClient.constructor'
    name: CosmosClient(string)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >-
      Creates a new <xref:CosmosClient> object from a connection string. Your
      database connection string can be found in the Azure Portal
    syntax:
      content: 'new CosmosClient(connectionString: string)'
      parameters:
        - id: connectionString
          type:
            - string
          description: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.CosmosClient.database'
    name: database(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Used for reading, updating, or deleting a existing database by id or
      accessing containers belonging to that database.

      This does not make a network call. Use `.read` to get info about the
      database after getting the <xref:Database> object.
    syntax:
      content: 'function database(id: string)'
      parameters:
        - id: id
          type:
            - string
          description: The id of the database.
      return:
        type:
          - '@azure/cosmos.Database'
        description: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.CosmosClient.databases'
    name: databases
    fullName: databases
    children: []
    langs:
      - typeScript
    type: property
    summary: >
      Used for creating new databases, or querying/reading all databases.

      Use `.database(id)` to read, replace, or delete a specific, existing
      database by id.
    syntax:
      content: 'public databases: Databases'
      return:
        type:
          - '@azure/cosmos.Databases'
        description: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.CosmosClient.getDatabaseAccount'
    name: getDatabaseAccount(RequestOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Get information about the current <xref:DatabaseAccount> (including which
      regions are supported, etc.)
    syntax:
      content: 'function getDatabaseAccount(options?: RequestOptions)'
      parameters:
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<@azure/cosmos.ResourceResponse<@azure/cosmos.DatabaseAccount>>
        description: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.CosmosClient.getReadEndpoint'
    name: getReadEndpoint()
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Gets the currently used read endpoint. Useful for troubleshooting
      purposes.

      The url may contain a region suffix (e.g. "-eastus") if we're using
      location specific endpoints.
    syntax:
      content: function getReadEndpoint()
      parameters: []
      return:
        type:
          - Promise<string>
        description: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.CosmosClient.getWriteEndpoint'
    name: getWriteEndpoint()
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Gets the currently used write endpoint url. Useful for troubleshooting
      purposes.

      The url may contain a region suffix (e.g. "-eastus") if we're using
      location specific endpoints.
    syntax:
      content: function getWriteEndpoint()
      parameters: []
      return:
        type:
          - Promise<string>
        description: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.CosmosClient.offer'
    name: offer(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Used for reading, or updating a existing offer by id.'
    syntax:
      content: 'function offer(id: string)'
      parameters:
        - id: id
          type:
            - string
          description: |
            The id of the offer.
      return:
        type:
          - '@azure/cosmos.Offer'
        description: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.CosmosClient.offers'
    name: offers
    fullName: offers
    children: []
    langs:
      - typeScript
    type: property
    summary: |
      Used for querying & reading all offers.
      Use `.offer(id)` to read, or replace existing offers.
    syntax:
      content: 'public offers: Offers'
      return:
        type:
          - '@azure/cosmos.Offers'
        description: ''
    package: '@azure/cosmos'
references:
  - uid: '@azure/cosmos.CosmosClientOptions'
    name: CosmosClientOptions
    spec.typeScript:
      - name: CosmosClientOptions
        fullName: CosmosClientOptions
        uid: '@azure/cosmos.CosmosClientOptions'
  - uid: '@azure/cosmos.Databases'
    name: Databases
    spec.typeScript:
      - name: Databases
        fullName: Databases
        uid: '@azure/cosmos.Databases'
  - uid: '@azure/cosmos.Offers'
    name: Offers
    spec.typeScript:
      - name: Offers
        fullName: Offers
        uid: '@azure/cosmos.Offers'
  - uid: '@azure/cosmos.Database'
    name: Database
    spec.typeScript:
      - name: Database
        fullName: Database
        uid: '@azure/cosmos.Database'
  - uid: '@azure/cosmos.RequestOptions'
    name: RequestOptions
    spec.typeScript:
      - name: RequestOptions
        fullName: RequestOptions
        uid: '@azure/cosmos.RequestOptions'
  - uid: Promise<@azure/cosmos.ResourceResponse<@azure/cosmos.DatabaseAccount>>
    name: DatabaseAccount>>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ResourceResponse
        fullName: ResourceResponse
        uid: '@azure/cosmos.ResourceResponse'
      - name: <
        fullName: <
      - name: DatabaseAccount
        fullName: DatabaseAccount
        uid: '@azure/cosmos.DatabaseAccount'
      - name: '>>'
        fullName: '>>'
  - uid: '@azure/cosmos.Offer'
    name: Offer
    spec.typeScript:
      - name: Offer
        fullName: Offer
        uid: '@azure/cosmos.Offer'
