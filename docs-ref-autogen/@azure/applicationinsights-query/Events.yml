### YamlMime:UniversalReference
items:
  - uid: '@azure/applicationinsights-query.Events'
    name: Events
    fullName: Events
    children:
      - '@azure/applicationinsights-query.Events.constructor'
      - '@azure/applicationinsights-query.Events.get_2'
      - '@azure/applicationinsights-query.Events.get'
      - '@azure/applicationinsights-query.Events.get_1'
      - '@azure/applicationinsights-query.Events.getByType_2'
      - '@azure/applicationinsights-query.Events.getByType'
      - '@azure/applicationinsights-query.Events.getByType_1'
    langs:
      - typeScript
    type: class
    summary: Class representing a Events.
    package: '@azure/applicationinsights-query'
  - uid: '@azure/applicationinsights-query.Events.constructor'
    name: Events(ApplicationInsightsDataClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Create a Events.
    syntax:
      content: 'new Events(client: ApplicationInsightsDataClientContext)'
      parameters:
        - id: client
          type:
            - >-
              @azure/applicationinsights-query.ApplicationInsightsDataClientContext
          description: |
            Reference to the service client.
    package: '@azure/applicationinsights-query'
  - uid: '@azure/applicationinsights-query.Events.get_2'
    name: >-
      get(string, Models.EventType, string, EventsGetOptionalParams,
      ServiceCallback<EventsResults>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function get(appId: string, eventType: Models.EventType, eventId:
        string, options: EventsGetOptionalParams, callback:
        ServiceCallback<EventsResults>)
      parameters:
        - id: appId
          type:
            - string
          description: >-
            ID of the application. This is Application ID from the API Access
            settings blade in

            the Azure portal.
        - id: eventType
          type:
            - Models.EventType
          description: >-
            The type of events to query; either a standard event type (`traces`,

            `customEvents`, `pageViews`, `requests`, `dependencies`,
            `exceptions`, `availabilityResults`) or

            `$all` to query across all event types. Possible values include:
            '$all', 'traces',

            'customEvents', 'pageViews', 'browserTimings', 'requests',
            'dependencies', 'exceptions',

            'availabilityResults', 'performanceCounters', 'customMetrics'
        - id: eventId
          type:
            - string
          description: ID of event.
        - id: options
          type:
            - '@azure/applicationinsights-query.EventsGetOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/applicationinsights-query.EventsResults>
          description: |
            The callback
    package: '@azure/applicationinsights-query'
  - uid: '@azure/applicationinsights-query.Events.get'
    name: 'get(string, Models.EventType, string, Models.EventsGetOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets the data for a single event
    syntax:
      content: >-
        function get(appId: string, eventType: Models.EventType, eventId:
        string, options?: Models.EventsGetOptionalParams)
      parameters:
        - id: appId
          type:
            - string
          description: >-
            ID of the application. This is Application ID from the API Access
            settings blade in

            the Azure portal.
        - id: eventType
          type:
            - Models.EventType
          description: >-
            The type of events to query; either a standard event type (`traces`,

            `customEvents`, `pageViews`, `requests`, `dependencies`,
            `exceptions`, `availabilityResults`) or

            `$all` to query across all event types. Possible values include:
            '$all', 'traces',

            'customEvents', 'pageViews', 'browserTimings', 'requests',
            'dependencies', 'exceptions',

            'availabilityResults', 'performanceCounters', 'customMetrics'
        - id: eventId
          type:
            - string
          description: ID of event.
        - id: options
          type:
            - Models.EventsGetOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.EventsGetResponse>
        description: Promise<Models.EventsGetResponse>
    package: '@azure/applicationinsights-query'
  - uid: '@azure/applicationinsights-query.Events.get_1'
    name: 'get(string, Models.EventType, string, ServiceCallback<EventsResults>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function get(appId: string, eventType: Models.EventType, eventId:
        string, callback: ServiceCallback<EventsResults>)
      parameters:
        - id: appId
          type:
            - string
          description: >-
            ID of the application. This is Application ID from the API Access
            settings blade in

            the Azure portal.
        - id: eventType
          type:
            - Models.EventType
          description: >-
            The type of events to query; either a standard event type (`traces`,

            `customEvents`, `pageViews`, `requests`, `dependencies`,
            `exceptions`, `availabilityResults`) or

            `$all` to query across all event types. Possible values include:
            '$all', 'traces',

            'customEvents', 'pageViews', 'browserTimings', 'requests',
            'dependencies', 'exceptions',

            'availabilityResults', 'performanceCounters', 'customMetrics'
        - id: eventId
          type:
            - string
          description: ID of event.
        - id: callback
          type:
            - ServiceCallback<@azure/applicationinsights-query.EventsResults>
          description: |
            The callback
    package: '@azure/applicationinsights-query'
  - uid: '@azure/applicationinsights-query.Events.getByType_2'
    name: >-
      getByType(string, Models.EventType, EventsGetByTypeOptionalParams,
      ServiceCallback<EventsResults>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getByType(appId: string, eventType: Models.EventType, options:
        EventsGetByTypeOptionalParams, callback: ServiceCallback<EventsResults>)
      parameters:
        - id: appId
          type:
            - string
          description: >-
            ID of the application. This is Application ID from the API Access
            settings blade in

            the Azure portal.
        - id: eventType
          type:
            - Models.EventType
          description: >-
            The type of events to query; either a standard event type (`traces`,

            `customEvents`, `pageViews`, `requests`, `dependencies`,
            `exceptions`, `availabilityResults`) or

            `$all` to query across all event types. Possible values include:
            '$all', 'traces',

            'customEvents', 'pageViews', 'browserTimings', 'requests',
            'dependencies', 'exceptions',

            'availabilityResults', 'performanceCounters', 'customMetrics'
        - id: options
          type:
            - '@azure/applicationinsights-query.EventsGetByTypeOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/applicationinsights-query.EventsResults>
          description: |
            The callback
    package: '@azure/applicationinsights-query'
  - uid: '@azure/applicationinsights-query.Events.getByType'
    name: 'getByType(string, Models.EventType, Models.EventsGetByTypeOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Executes an OData query for events
    syntax:
      content: >-
        function getByType(appId: string, eventType: Models.EventType, options?:
        Models.EventsGetByTypeOptionalParams)
      parameters:
        - id: appId
          type:
            - string
          description: >-
            ID of the application. This is Application ID from the API Access
            settings blade in

            the Azure portal.
        - id: eventType
          type:
            - Models.EventType
          description: >-
            The type of events to query; either a standard event type (`traces`,

            `customEvents`, `pageViews`, `requests`, `dependencies`,
            `exceptions`, `availabilityResults`) or

            `$all` to query across all event types. Possible values include:
            '$all', 'traces',

            'customEvents', 'pageViews', 'browserTimings', 'requests',
            'dependencies', 'exceptions',

            'availabilityResults', 'performanceCounters', 'customMetrics'
        - id: options
          type:
            - Models.EventsGetByTypeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.EventsGetByTypeResponse>
        description: Promise<Models.EventsGetByTypeResponse>
    package: '@azure/applicationinsights-query'
  - uid: '@azure/applicationinsights-query.Events.getByType_1'
    name: 'getByType(string, Models.EventType, ServiceCallback<EventsResults>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getByType(appId: string, eventType: Models.EventType, callback:
        ServiceCallback<EventsResults>)
      parameters:
        - id: appId
          type:
            - string
          description: >-
            ID of the application. This is Application ID from the API Access
            settings blade in

            the Azure portal.
        - id: eventType
          type:
            - Models.EventType
          description: >-
            The type of events to query; either a standard event type (`traces`,

            `customEvents`, `pageViews`, `requests`, `dependencies`,
            `exceptions`, `availabilityResults`) or

            `$all` to query across all event types. Possible values include:
            '$all', 'traces',

            'customEvents', 'pageViews', 'browserTimings', 'requests',
            'dependencies', 'exceptions',

            'availabilityResults', 'performanceCounters', 'customMetrics'
        - id: callback
          type:
            - ServiceCallback<@azure/applicationinsights-query.EventsResults>
          description: |
            The callback
    package: '@azure/applicationinsights-query'
references:
  - uid: '@azure/applicationinsights-query.ApplicationInsightsDataClientContext'
    name: ApplicationInsightsDataClientContext
    spec.typeScript:
      - name: ApplicationInsightsDataClientContext
        fullName: ApplicationInsightsDataClientContext
        uid: '@azure/applicationinsights-query.ApplicationInsightsDataClientContext'
  - uid: ServiceCallback<@azure/applicationinsights-query.EventsResults>
    name: EventsResults>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: EventsResults
        fullName: EventsResults
        uid: '@azure/applicationinsights-query.EventsResults'
      - name: '>'
        fullName: '>'
  - uid: '@azure/applicationinsights-query.EventsGetOptionalParams'
    name: EventsGetOptionalParams
    spec.typeScript:
      - name: EventsGetOptionalParams
        fullName: EventsGetOptionalParams
        uid: '@azure/applicationinsights-query.EventsGetOptionalParams'
  - uid: '@azure/applicationinsights-query.EventsGetByTypeOptionalParams'
    name: EventsGetByTypeOptionalParams
    spec.typeScript:
      - name: EventsGetByTypeOptionalParams
        fullName: EventsGetByTypeOptionalParams
        uid: '@azure/applicationinsights-query.EventsGetByTypeOptionalParams'
