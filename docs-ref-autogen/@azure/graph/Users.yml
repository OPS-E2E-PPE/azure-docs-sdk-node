### YamlMime:UniversalReference
items:
  - uid: '@azure/graph.Users'
    name: Users
    fullName: Users
    children:
      - '@azure/graph.Users.create'
      - '@azure/graph.Users.create_2'
      - '@azure/graph.Users.create_1'
      - '@azure/graph.Users.deleteMethod'
      - '@azure/graph.Users.deleteMethod_2'
      - '@azure/graph.Users.deleteMethod_1'
      - '@azure/graph.Users.get'
      - '@azure/graph.Users.get_2'
      - '@azure/graph.Users.get_1'
      - '@azure/graph.Users.getMemberGroups'
      - '@azure/graph.Users.getMemberGroups_2'
      - '@azure/graph.Users.getMemberGroups_1'
      - '@azure/graph.Users.list'
      - '@azure/graph.Users.list_1'
      - '@azure/graph.Users.list_2'
      - '@azure/graph.Users.listNext'
      - '@azure/graph.Users.listNext_2'
      - '@azure/graph.Users.listNext_1'
      - '@azure/graph.Users.update'
      - '@azure/graph.Users.update_2'
      - '@azure/graph.Users.update_1'
      - '@azure/graph.Users.constructor'
    langs:
      - typeScript
    type: class
    summary: Class representing a Users.
    package: '@azure/graph'
  - uid: '@azure/graph.Users.create'
    name: 'create(UserCreateParameters, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Create a new user.
    syntax:
      content: >-
        function create(parameters: UserCreateParameters, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: parameters
          type:
            - '@azure/graph.UserCreateParameters'
          description: Parameters to create a user.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.UsersCreateResponse>
        description: Promise<Models.UsersCreateResponse>
    package: '@azure/graph'
  - uid: '@azure/graph.Users.create_2'
    name: 'create(UserCreateParameters, RequestOptionsBase, ServiceCallback<User>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function create(parameters: UserCreateParameters, options:
        RequestOptionsBase, callback: ServiceCallback<User>)
      parameters:
        - id: parameters
          type:
            - '@azure/graph.UserCreateParameters'
          description: Parameters to create a user.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/graph.User>
          description: |
            The callback
    package: '@azure/graph'
  - uid: '@azure/graph.Users.create_1'
    name: 'create(UserCreateParameters, ServiceCallback<User>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function create(parameters: UserCreateParameters, callback:
        ServiceCallback<User>)
      parameters:
        - id: parameters
          type:
            - '@azure/graph.UserCreateParameters'
          description: Parameters to create a user.
        - id: callback
          type:
            - ServiceCallback<@azure/graph.User>
          description: |
            The callback
    package: '@azure/graph'
  - uid: '@azure/graph.Users.deleteMethod'
    name: 'deleteMethod(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete a user.
    syntax:
      content: >-
        function deleteMethod(upnOrObjectId: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: upnOrObjectId
          type:
            - string
          description: The object ID or principal name of the user to delete.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/graph'
  - uid: '@azure/graph.Users.deleteMethod_2'
    name: 'deleteMethod(string, RequestOptionsBase, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteMethod(upnOrObjectId: string, options:
        RequestOptionsBase, callback: ServiceCallback<void>)
      parameters:
        - id: upnOrObjectId
          type:
            - string
          description: The object ID or principal name of the user to delete.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/graph'
  - uid: '@azure/graph.Users.deleteMethod_1'
    name: 'deleteMethod(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteMethod(upnOrObjectId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: upnOrObjectId
          type:
            - string
          description: The object ID or principal name of the user to delete.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/graph'
  - uid: '@azure/graph.Users.get'
    name: 'get(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets user information from the directory.
    syntax:
      content: 'function get(upnOrObjectId: string, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: upnOrObjectId
          type:
            - string
          description: >-
            The object ID or principal name of the user for which to get
            information.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.UsersGetResponse>
        description: Promise<Models.UsersGetResponse>
    package: '@azure/graph'
  - uid: '@azure/graph.Users.get_2'
    name: 'get(string, RequestOptionsBase, ServiceCallback<User>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function get(upnOrObjectId: string, options: RequestOptionsBase,
        callback: ServiceCallback<User>)
      parameters:
        - id: upnOrObjectId
          type:
            - string
          description: >-
            The object ID or principal name of the user for which to get
            information.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/graph.User>
          description: |
            The callback
    package: '@azure/graph'
  - uid: '@azure/graph.Users.get_1'
    name: 'get(string, ServiceCallback<User>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function get(upnOrObjectId: string, callback: ServiceCallback<User>)'
      parameters:
        - id: upnOrObjectId
          type:
            - string
          description: >-
            The object ID or principal name of the user for which to get
            information.
        - id: callback
          type:
            - ServiceCallback<@azure/graph.User>
          description: |
            The callback
    package: '@azure/graph'
  - uid: '@azure/graph.Users.getMemberGroups'
    name: >-
      getMemberGroups(string, UserGetMemberGroupsParameters,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets a collection that contains the object IDs of the groups of which the
      user is a member.
    syntax:
      content: >-
        function getMemberGroups(objectId: string, parameters:
        UserGetMemberGroupsParameters, options?: msRest.RequestOptionsBase)
      parameters:
        - id: objectId
          type:
            - string
          description: The object ID of the user for which to get group membership.
        - id: parameters
          type:
            - '@azure/graph.UserGetMemberGroupsParameters'
          description: User filtering parameters.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.UsersGetMemberGroupsResponse>
        description: Promise<Models.UsersGetMemberGroupsResponse>
    package: '@azure/graph'
  - uid: '@azure/graph.Users.getMemberGroups_2'
    name: >-
      getMemberGroups(string, UserGetMemberGroupsParameters, RequestOptionsBase,
      ServiceCallback<UserGetMemberGroupsResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getMemberGroups(objectId: string, parameters:
        UserGetMemberGroupsParameters, options: RequestOptionsBase, callback:
        ServiceCallback<UserGetMemberGroupsResult>)
      parameters:
        - id: objectId
          type:
            - string
          description: The object ID of the user for which to get group membership.
        - id: parameters
          type:
            - '@azure/graph.UserGetMemberGroupsParameters'
          description: User filtering parameters.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/graph.UserGetMemberGroupsResult>
          description: |
            The callback
    package: '@azure/graph'
  - uid: '@azure/graph.Users.getMemberGroups_1'
    name: >-
      getMemberGroups(string, UserGetMemberGroupsParameters,
      ServiceCallback<UserGetMemberGroupsResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getMemberGroups(objectId: string, parameters:
        UserGetMemberGroupsParameters, callback:
        ServiceCallback<UserGetMemberGroupsResult>)
      parameters:
        - id: objectId
          type:
            - string
          description: The object ID of the user for which to get group membership.
        - id: parameters
          type:
            - '@azure/graph.UserGetMemberGroupsParameters'
          description: User filtering parameters.
        - id: callback
          type:
            - ServiceCallback<@azure/graph.UserGetMemberGroupsResult>
          description: |
            The callback
    package: '@azure/graph'
  - uid: '@azure/graph.Users.list'
    name: list(Models.UsersListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets list of users for the current tenant.
    syntax:
      content: 'function list(options?: Models.UsersListOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.UsersListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.UsersListResponse>
        description: Promise<Models.UsersListResponse>
    package: '@azure/graph'
  - uid: '@azure/graph.Users.list_1'
    name: list(ServiceCallback<UserListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function list(callback: ServiceCallback<UserListResult>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/graph.UserListResult>
          description: |
            The callback
    package: '@azure/graph'
  - uid: '@azure/graph.Users.list_2'
    name: 'list(UsersListOptionalParams, ServiceCallback<UserListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function list(options: UsersListOptionalParams, callback:
        ServiceCallback<UserListResult>)
      parameters:
        - id: options
          type:
            - '@azure/graph.UsersListOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/graph.UserListResult>
          description: |
            The callback
    package: '@azure/graph'
  - uid: '@azure/graph.Users.listNext'
    name: 'listNext(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets a list of users for the current tenant.
    syntax:
      content: 'function listNext(nextLink: string, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: nextLink
          type:
            - string
          description: Next link for the list operation.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.UsersListNextResponse>
        description: Promise<Models.UsersListNextResponse>
    package: '@azure/graph'
  - uid: '@azure/graph.Users.listNext_2'
    name: 'listNext(string, RequestOptionsBase, ServiceCallback<UserListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listNext(nextLink: string, options: RequestOptionsBase,
        callback: ServiceCallback<UserListResult>)
      parameters:
        - id: nextLink
          type:
            - string
          description: Next link for the list operation.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/graph.UserListResult>
          description: |
            The callback
    package: '@azure/graph'
  - uid: '@azure/graph.Users.listNext_1'
    name: 'listNext(string, ServiceCallback<UserListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listNext(nextLink: string, callback:
        ServiceCallback<UserListResult>)
      parameters:
        - id: nextLink
          type:
            - string
          description: Next link for the list operation.
        - id: callback
          type:
            - ServiceCallback<@azure/graph.UserListResult>
          description: |
            The callback
    package: '@azure/graph'
  - uid: '@azure/graph.Users.update'
    name: 'update(string, UserUpdateParameters, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Updates a user.
    syntax:
      content: >-
        function update(upnOrObjectId: string, parameters: UserUpdateParameters,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: upnOrObjectId
          type:
            - string
          description: The object ID or principal name of the user to update.
        - id: parameters
          type:
            - '@azure/graph.UserUpdateParameters'
          description: Parameters to update an existing user.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/graph'
  - uid: '@azure/graph.Users.update_2'
    name: >-
      update(string, UserUpdateParameters, RequestOptionsBase,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function update(upnOrObjectId: string, parameters: UserUpdateParameters,
        options: RequestOptionsBase, callback: ServiceCallback<void>)
      parameters:
        - id: upnOrObjectId
          type:
            - string
          description: The object ID or principal name of the user to update.
        - id: parameters
          type:
            - '@azure/graph.UserUpdateParameters'
          description: Parameters to update an existing user.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/graph'
  - uid: '@azure/graph.Users.update_1'
    name: 'update(string, UserUpdateParameters, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function update(upnOrObjectId: string, parameters: UserUpdateParameters,
        callback: ServiceCallback<void>)
      parameters:
        - id: upnOrObjectId
          type:
            - string
          description: The object ID or principal name of the user to update.
        - id: parameters
          type:
            - '@azure/graph.UserUpdateParameters'
          description: Parameters to update an existing user.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/graph'
  - uid: '@azure/graph.Users.constructor'
    name: Users(GraphRbacManagementClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Create a Users.
    syntax:
      content: 'new Users(client: GraphRbacManagementClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/graph.GraphRbacManagementClientContext'
          description: |
            Reference to the service client.
    package: '@azure/graph'
references:
  - uid: '@azure/graph.GraphRbacManagementClientContext'
    name: GraphRbacManagementClientContext
    spec.typeScript:
      - name: GraphRbacManagementClientContext
        fullName: GraphRbacManagementClientContext
        uid: '@azure/graph.GraphRbacManagementClientContext'
  - uid: '@azure/graph.UserCreateParameters'
    name: UserCreateParameters
    spec.typeScript:
      - name: UserCreateParameters
        fullName: UserCreateParameters
        uid: '@azure/graph.UserCreateParameters'
  - uid: ServiceCallback<@azure/graph.User>
    name: User>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: User
        fullName: User
        uid: '@azure/graph.User'
      - name: '>'
        fullName: '>'
  - uid: '@azure/graph.UserGetMemberGroupsParameters'
    name: UserGetMemberGroupsParameters
    spec.typeScript:
      - name: UserGetMemberGroupsParameters
        fullName: UserGetMemberGroupsParameters
        uid: '@azure/graph.UserGetMemberGroupsParameters'
  - uid: ServiceCallback<@azure/graph.UserGetMemberGroupsResult>
    name: UserGetMemberGroupsResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: UserGetMemberGroupsResult
        fullName: UserGetMemberGroupsResult
        uid: '@azure/graph.UserGetMemberGroupsResult'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/graph.UserListResult>
    name: UserListResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: UserListResult
        fullName: UserListResult
        uid: '@azure/graph.UserListResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/graph.UsersListOptionalParams'
    name: UsersListOptionalParams
    spec.typeScript:
      - name: UsersListOptionalParams
        fullName: UsersListOptionalParams
        uid: '@azure/graph.UsersListOptionalParams'
  - uid: '@azure/graph.UserUpdateParameters'
    name: UserUpdateParameters
    spec.typeScript:
      - name: UserUpdateParameters
        fullName: UserUpdateParameters
        uid: '@azure/graph.UserUpdateParameters'
