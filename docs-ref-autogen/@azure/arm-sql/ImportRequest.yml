### YamlMime:UniversalReference
items:
  - uid: '@azure/arm-sql.ImportRequest'
    name: ImportRequest
    fullName: ImportRequest
    children:
      - '@azure/arm-sql.ImportRequest.administratorLogin'
      - '@azure/arm-sql.ImportRequest.administratorLoginPassword'
      - '@azure/arm-sql.ImportRequest.authenticationType'
      - '@azure/arm-sql.ImportRequest.databaseName'
      - '@azure/arm-sql.ImportRequest.edition'
      - '@azure/arm-sql.ImportRequest.maxSizeBytes'
      - '@azure/arm-sql.ImportRequest.serviceObjectiveName'
      - '@azure/arm-sql.ImportRequest.storageKey'
      - '@azure/arm-sql.ImportRequest.storageKeyType'
      - '@azure/arm-sql.ImportRequest.storageUri'
    langs:
      - typeScript
    type: interface
    summary: Import database parameters.
    extends:
      name: '@azure/arm-sql.ExportRequest'
    package: '@azure/arm-sql'
  - uid: '@azure/arm-sql.ImportRequest.administratorLogin'
    name: administratorLogin
    fullName: administratorLogin
    children: []
    langs:
      - typeScript
    type: property
    summary: The name of the SQL administrator.
    syntax:
      content: 'administratorLogin: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/arm-sql'
  - uid: '@azure/arm-sql.ImportRequest.administratorLoginPassword'
    name: administratorLoginPassword
    fullName: administratorLoginPassword
    children: []
    langs:
      - typeScript
    type: property
    summary: The password of the SQL administrator.
    syntax:
      content: 'administratorLoginPassword: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/arm-sql'
  - uid: '@azure/arm-sql.ImportRequest.authenticationType'
    name: authenticationType
    fullName: authenticationType
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The authentication type. Possible values include: 'SQL', 'ADPassword'.
      Default value: 'SQL'.
    optional: true
    syntax:
      content: 'authenticationType?: AuthenticationType'
      return:
        type:
          - '@azure/arm-sql.AuthenticationType'
        description: ''
    package: '@azure/arm-sql'
  - uid: '@azure/arm-sql.ImportRequest.databaseName'
    name: databaseName
    fullName: databaseName
    children: []
    langs:
      - typeScript
    type: property
    summary: The name of the database to import.
    syntax:
      content: 'databaseName: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/arm-sql'
  - uid: '@azure/arm-sql.ImportRequest.edition'
    name: edition
    fullName: edition
    children: []
    langs:
      - typeScript
    type: property
    summary: >
      The edition for the database being created.

      The list of SKUs may vary by region and support offer. To determine the
      SKUs (including the

      SKU name, tier/edition, family, and capacity) that are available to your
      subscription in an

      Azure region, use the `Capabilities_ListByLocation` REST API or one of the
      following commands:


      ```azurecli

      az sql db list-editions -l <location> -o table

      ````


      ```powershell

      Get-AzSqlServerServiceObjective -Location <location>

      ````

      . Possible values include: 'Web', 'Business', 'Basic', 'Standard',
      'Premium', 'PremiumRS',

      'Free', 'Stretch', 'DataWarehouse', 'System', 'System2', 'GeneralPurpose',
      'BusinessCritical',

      'Hyperscale'
    syntax:
      content: 'edition: DatabaseEdition'
      return:
        type:
          - '@azure/arm-sql.DatabaseEdition'
        description: ''
    package: '@azure/arm-sql'
  - uid: '@azure/arm-sql.ImportRequest.maxSizeBytes'
    name: maxSizeBytes
    fullName: maxSizeBytes
    children: []
    langs:
      - typeScript
    type: property
    summary: The maximum size for the newly imported database.
    syntax:
      content: 'maxSizeBytes: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/arm-sql'
  - uid: '@azure/arm-sql.ImportRequest.serviceObjectiveName'
    name: serviceObjectiveName
    fullName: serviceObjectiveName
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The name of the service objective to assign to the database. Possible
      values include:

      'System', 'System0', 'System1', 'System2', 'System3', 'System4',
      'System2L', 'System3L',

      'System4L', 'Free', 'Basic', 'S0', 'S1', 'S2', 'S3', 'S4', 'S6', 'S7',
      'S9', 'S12', 'P1',

      'P2', 'P3', 'P4', 'P6', 'P11', 'P15', 'PRS1', 'PRS2', 'PRS4', 'PRS6',
      'DW100', 'DW200',

      'DW300', 'DW400', 'DW500', 'DW600', 'DW1000', 'DW1200', 'DW1000c',
      'DW1500', 'DW1500c',

      'DW2000', 'DW2000c', 'DW3000', 'DW2500c', 'DW3000c', 'DW6000', 'DW5000c',
      'DW6000c',

      'DW7500c', 'DW10000c', 'DW15000c', 'DW30000c', 'DS100', 'DS200', 'DS300',
      'DS400', 'DS500',

      'DS600', 'DS1000', 'DS1200', 'DS1500', 'DS2000', 'ElasticPool'
    syntax:
      content: 'serviceObjectiveName: ServiceObjectiveName'
      return:
        type:
          - '@azure/arm-sql.ServiceObjectiveName'
        description: ''
    package: '@azure/arm-sql'
  - uid: '@azure/arm-sql.ImportRequest.storageKey'
    name: storageKey
    fullName: storageKey
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The storage key to use.  If storage key type is SharedAccessKey, it must
      be preceded with a

      "?."
    syntax:
      content: 'storageKey: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/arm-sql'
  - uid: '@azure/arm-sql.ImportRequest.storageKeyType'
    name: storageKeyType
    fullName: storageKeyType
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The type of the storage key to use. Possible values include:
      'StorageAccessKey',

      'SharedAccessKey'
    syntax:
      content: 'storageKeyType: StorageKeyType'
      return:
        type:
          - '@azure/arm-sql.StorageKeyType'
        description: ''
    package: '@azure/arm-sql'
  - uid: '@azure/arm-sql.ImportRequest.storageUri'
    name: storageUri
    fullName: storageUri
    children: []
    langs:
      - typeScript
    type: property
    summary: The storage uri to use.
    syntax:
      content: 'storageUri: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/arm-sql'
references:
  - uid: '@azure/arm-sql.ExportRequest'
    name: ExportRequest
    spec.typeScript:
      - name: ExportRequest
        fullName: ExportRequest
        uid: '@azure/arm-sql.ExportRequest'
  - uid: '@azure/arm-sql.AuthenticationType'
    name: AuthenticationType
    spec.typeScript:
      - name: AuthenticationType
        fullName: AuthenticationType
        uid: '@azure/arm-sql.AuthenticationType'
  - uid: '@azure/arm-sql.DatabaseEdition'
    name: DatabaseEdition
    spec.typeScript:
      - name: DatabaseEdition
        fullName: DatabaseEdition
        uid: '@azure/arm-sql.DatabaseEdition'
  - uid: '@azure/arm-sql.ServiceObjectiveName'
    name: ServiceObjectiveName
    spec.typeScript:
      - name: ServiceObjectiveName
        fullName: ServiceObjectiveName
        uid: '@azure/arm-sql.ServiceObjectiveName'
  - uid: '@azure/arm-sql.StorageKeyType'
    name: StorageKeyType
    spec.typeScript:
      - name: StorageKeyType
        fullName: StorageKeyType
        uid: '@azure/arm-sql.StorageKeyType'
