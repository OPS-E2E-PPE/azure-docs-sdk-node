### YamlMime:TSType
name: SecretClient
uid: '@azure/keyvault-secrets.SecretClient'
package: '@azure/keyvault-secrets'
summary: >-
  The SecretClient provides methods to manage <xref:KeyVaultSecret> in

  the Azure Key Vault. The client supports creating, retrieving, updating,

  deleting, purging, backing up, restoring and listing KeyVaultSecrets. The

  client also supports listing <xref:DeletedSecret> for a soft-delete enabled
  Azure

  Key Vault.
fullName: SecretClient
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'SecretClient(string, TokenCredential, SecretClientOptions)'
    uid: '@azure/keyvault-secrets.SecretClient.constructor'
    package: '@azure/keyvault-secrets'
    summary: |-
      Creates an instance of SecretClient.
      Example usage:
      ```ts
      import { SecretClient } from "@azure/keyvault-secrets";
      import { DefaultAzureCredential } from "@azure/identity";

      let vaultUrl = `https://<MY KEYVAULT HERE>.vault.azure.net`;
      let credentials = new DefaultAzureCredential();

      let client = new SecretClient(vaultUrl, credentials);
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new SecretClient(vaultUrl: string, credential: TokenCredential,
        pipelineOptions?: SecretClientOptions)
      parameters:
        - id: vaultUrl
          type: string
          description: the base URL to the vault.
        - id: credential
          type: TokenCredential
          description: >-
            An object that implements the `TokenCredential` interface used to
            authenticate requests to the service. Use the @azure/identity
            package to create a credential that suits your needs.
        - id: pipelineOptions
          type: <xref uid="@azure/keyvault-secrets.SecretClientOptions" />
          description: ''
properties:
  - name: vaultUrl
    uid: '@azure/keyvault-secrets.SecretClient.vaultUrl'
    package: '@azure/keyvault-secrets'
    summary: The base URL to the vault
    fullName: vaultUrl
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'vaultUrl: string'
      return:
        type: string
        description: ''
methods:
  - name: 'backupSecret(string, BackupSecretOptions)'
    uid: '@azure/keyvault-secrets.SecretClient.backupSecret'
    package: '@azure/keyvault-secrets'
    summary: >-
      Requests that a backup of the specified secret be downloaded to the
      client. All versions of the

      secret will be downloaded. This operation requires the secrets/backup
      permission.

      Example usage:

      ```ts

      let client = new SecretClient(url, credentials);

      let backupResult = await client.backupSecret("MySecretName");

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function backupSecret(secretName: string, options?: BackupSecretOptions)'
      parameters:
        - id: secretName
          type: string
          description: The name of the secret.
        - id: options
          type: <xref uid="@azure/keyvault-secrets.BackupSecretOptions" />
          description: ''
      return:
        type: Promise&lt;Uint8Array | undefined&gt;
        description: ''
  - name: 'beginDeleteSecret(string, BeginDeleteSecretOptions)'
    uid: '@azure/keyvault-secrets.SecretClient.beginDeleteSecret'
    package: '@azure/keyvault-secrets'
    summary: >-
      Deletes a secret stored in Azure Key Vault.

      This function returns a Long Running Operation poller that allows you to
      wait indefinitely until the secret is deleted.

      This operation requires the secrets/delete permission.


      Example usage:

      ```ts

      const client = new SecretClient(url, credentials);

      await client.setSecret("MySecretName", "ABC123");


      const deletePoller = await client.beginDeleteSecret("MySecretName");


      // Serializing the poller

      const serialized = deletePoller.toString();


      // A new poller can be created with:

      // const newPoller = await client.beginDeleteSecret("MySecretName", {
      resumeFrom: serialized });


      // Waiting until it's done

      const deletedSecret = await deletePoller.pollUntilDone();

      console.log(deletedSecret);

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteSecret(name: string, options?:
        BeginDeleteSecretOptions)
      parameters:
        - id: name
          type: string
          description: ''
        - id: options
          type: <xref uid="@azure/keyvault-secrets.BeginDeleteSecretOptions" />
          description: ''
      return:
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/keyvault-secrets.DeletedSecret" />&gt;, <xref
          uid="@azure/keyvault-secrets.DeletedSecret" />&gt;&gt;
        description: ''
  - name: 'beginRecoverDeletedSecret(string, BeginRecoverDeletedSecretOptions)'
    uid: '@azure/keyvault-secrets.SecretClient.beginRecoverDeletedSecret'
    package: '@azure/keyvault-secrets'
    summary: >-
      Recovers the deleted secret in the specified vault.

      This function returns a Long Running Operation poller that allows you to
      wait indefinitely until the secret is recovered.

      This operation requires the secrets/recover permission.


      Example usage:

      ```ts

      const client = new SecretClient(url, credentials);

      await client.setSecret("MySecretName", "ABC123");


      const deletePoller = await client.beginDeleteSecret("MySecretName");

      await deletePoller.pollUntilDone();


      const recoverPoller = await
      client.beginRecoverDeletedSecret("MySecretName");


      // Serializing the poller

      const serialized = recoverPoller.toString();


      // A new poller can be created with:

      // const newPoller = await
      client.beginRecoverDeletedSecret("MySecretName", { resumeFrom: serialized
      });


      // Waiting until it's done

      const deletedSecret = await recoverPoller.pollUntilDone();

      console.log(deletedSecret);

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginRecoverDeletedSecret(name: string, options?:
        BeginRecoverDeletedSecretOptions)
      parameters:
        - id: name
          type: string
          description: ''
        - id: options
          type: >-
            <xref uid="@azure/keyvault-secrets.BeginRecoverDeletedSecretOptions"
            />
          description: ''
      return:
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/keyvault-secrets.SecretProperties" />&gt;, <xref
          uid="@azure/keyvault-secrets.SecretProperties" />&gt;&gt;
        description: ''
  - name: 'getDeletedSecret(string, GetDeletedSecretOptions)'
    uid: '@azure/keyvault-secrets.SecretClient.getDeletedSecret'
    package: '@azure/keyvault-secrets'
    summary: >-
      The getDeletedSecret method returns the specified deleted secret along
      with its attributes.

      This operation requires the secrets/get permission.

      Example usage:

      ```ts

      let client = new SecretClient(url, credentials);

      await client.getDeletedSecret("MyDeletedSecret");

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedSecret(secretName: string, options?:
        GetDeletedSecretOptions)
      parameters:
        - id: secretName
          type: string
          description: The name of the secret.
        - id: options
          type: <xref uid="@azure/keyvault-secrets.GetDeletedSecretOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/keyvault-secrets.DeletedSecret" />&gt;
        description: ''
  - name: 'getSecret(string, GetSecretOptions)'
    uid: '@azure/keyvault-secrets.SecretClient.getSecret'
    package: '@azure/keyvault-secrets'
    summary: >-
      The getSecret method is applicable to any secret stored in Azure Key
      Vault. This operation requires

      the secrets/get permission.

      Example usage:

      ```ts

      let client = new SecretClient(url, credentials);

      let secret = await client.getSecret("MySecretName");

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getSecret(secretName: string, options?: GetSecretOptions)'
      parameters:
        - id: secretName
          type: string
          description: The name of the secret.
        - id: options
          type: <xref uid="@azure/keyvault-secrets.GetSecretOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/keyvault-secrets.KeyVaultSecret" />&gt;
        description: ''
  - name: listDeletedSecrets(ListDeletedSecretsOptions)
    uid: '@azure/keyvault-secrets.SecretClient.listDeletedSecrets'
    package: '@azure/keyvault-secrets'
    summary: >-
      Iterates the deleted secrets in the vault.  The full secret identifier and
      attributes are provided

      in the response. No values are returned for the secrets. This operations
      requires the secrets/list permission.

      Example usage:

      ```ts

      let client = new SecretClient(url, credentials);

      for await (const deletedSecret of client.listDeletedSecrets()) {
        console.log("deleted secret: ", deletedSecret);
      }

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listDeletedSecrets(options?: ListDeletedSecretsOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/keyvault-secrets.ListDeletedSecretsOptions" />
          description: ''
      return:
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/keyvault-secrets.DeletedSecret" />&gt;
        description: ''
  - name: listPropertiesOfSecrets(ListPropertiesOfSecretsOptions)
    uid: '@azure/keyvault-secrets.SecretClient.listPropertiesOfSecrets'
    package: '@azure/keyvault-secrets'
    summary: >-
      Iterates the latest version of all secrets in the vault.  The full secret
      identifier and attributes are provided

      in the response. No values are returned for the secrets. This operations
      requires the secrets/list permission.

      Example usage:

      ```ts

      let client = new SecretClient(url, credentials);

      for await (const secretProperties of client.listPropertiesOfSecrets()) {
        const secret = await client.getSecret(secretProperties.name);
        console.log("secret: ", secret);
      }

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listPropertiesOfSecrets(options?:
        ListPropertiesOfSecretsOptions)
      parameters:
        - id: options
          type: >-
            <xref uid="@azure/keyvault-secrets.ListPropertiesOfSecretsOptions"
            />
          description: ''
      return:
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/keyvault-secrets.SecretProperties" />&gt;
        description: ''
  - name: >-
      listPropertiesOfSecretVersions(string,
      ListPropertiesOfSecretVersionsOptions)
    uid: '@azure/keyvault-secrets.SecretClient.listPropertiesOfSecretVersions'
    package: '@azure/keyvault-secrets'
    summary: >-
      Iterates all versions of the given secret in the vault. The full secret
      identifier and attributes are provided

      in the response. No values are returned for the secrets. This operations
      requires the secrets/list permission.

      Example usage:

      ```ts

      let client = new SecretClient(url, credentials);

      for await (const secretProperties of
      client.listPropertiesOfSecretVersions("MySecretName")) {
        const secret = await client.getSecret(secretProperties.name);
        console.log("secret version: ", secret);
      }

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listPropertiesOfSecretVersions(secretName: string, options?:
        ListPropertiesOfSecretVersionsOptions)
      parameters:
        - id: secretName
          type: string
          description: Name of the secret to fetch versions for.
        - id: options
          type: >-
            <xref
            uid="@azure/keyvault-secrets.ListPropertiesOfSecretVersionsOptions"
            />
          description: ''
      return:
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/keyvault-secrets.SecretProperties" />&gt;
        description: ''
  - name: 'purgeDeletedSecret(string, PurgeDeletedSecretOptions)'
    uid: '@azure/keyvault-secrets.SecretClient.purgeDeletedSecret'
    package: '@azure/keyvault-secrets'
    summary: >-
      The purge deleted secret operation removes the secret permanently, without
      the possibility of

      recovery. This operation can only be enabled on a soft-delete enabled
      vault. This operation

      requires the secrets/purge permission.

      Example usage:

      ```ts

      const client = new SecretClient(url, credentials);

      const deletePoller = await client.beginDeleteSecret("MySecretName");

      await deletePoller.pollUntilDone();

      await client.purgeDeletedSecret("MySecretName");

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function purgeDeletedSecret(secretName: string, options?:
        PurgeDeletedSecretOptions)
      parameters:
        - id: secretName
          type: string
          description: The name of the secret.
        - id: options
          type: <xref uid="@azure/keyvault-secrets.PurgeDeletedSecretOptions" />
          description: ''
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: 'restoreSecretBackup(Uint8Array, RestoreSecretBackupOptions)'
    uid: '@azure/keyvault-secrets.SecretClient.restoreSecretBackup'
    package: '@azure/keyvault-secrets'
    summary: >-
      Restores a backed up secret, and all its versions, to a vault. This
      operation requires the

      secrets/restore permission.

      Example usage:

      ```ts

      let client = new SecretClient(url, credentials);

      let mySecretBundle = await client.backupSecret("MySecretName");

      // ...

      await client.restoreSecretBackup(mySecretBundle);

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function restoreSecretBackup(secretBundleBackup: Uint8Array, options?:
        RestoreSecretBackupOptions)
      parameters:
        - id: secretBundleBackup
          type: Uint8Array
          description: The backup blob associated with a secret bundle.
        - id: options
          type: <xref uid="@azure/keyvault-secrets.RestoreSecretBackupOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/keyvault-secrets.SecretProperties" />&gt;
        description: ''
  - name: 'setSecret(string, string, SetSecretOptions)'
    uid: '@azure/keyvault-secrets.SecretClient.setSecret'
    package: '@azure/keyvault-secrets'
    summary: >-
      The setSecret method adds a secret or secret version to the Azure Key
      Vault. If the named secret

      already exists, Azure Key Vault creates a new version of that secret.

      This operation requires the secrets/set permission.

      Example usage:

      ```ts

      let client = new SecretClient(url, credentials);

      await client.setSecret("MySecretName", "ABC123");

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setSecret(secretName: string, value: string, options?:
        SetSecretOptions)
      parameters:
        - id: secretName
          type: string
          description: The name of the secret.
        - id: value
          type: string
          description: The value of the secret.
        - id: options
          type: <xref uid="@azure/keyvault-secrets.SetSecretOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/keyvault-secrets.KeyVaultSecret" />&gt;
        description: ''
  - name: 'updateSecretProperties(string, string, UpdateSecretPropertiesOptions)'
    uid: '@azure/keyvault-secrets.SecretClient.updateSecretProperties'
    package: '@azure/keyvault-secrets'
    summary: >-
      The updateSecret method changes specified attributes of an existing stored
      secret. Properties that

      are not specified in the request are left unchanged. The value of a secret
      itself cannot be

      changed. This operation requires the secrets/set permission.

      Example usage:

      ```ts

      let secretName = "MySecretName";

      let client = new SecretClient(url, credentials);

      let secret = await client.getSecret(secretName);

      await client.updateSecretProperties(secretName, secret.properties.version,
      { enabled: false });

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateSecretProperties(secretName: string, secretVersion:
        string, options?: UpdateSecretPropertiesOptions)
      parameters:
        - id: secretName
          type: string
          description: The name of the secret.
        - id: secretVersion
          type: string
          description: The version of the secret.
        - id: options
          type: <xref uid="@azure/keyvault-secrets.UpdateSecretPropertiesOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/keyvault-secrets.SecretProperties" />&gt;
        description: ''
