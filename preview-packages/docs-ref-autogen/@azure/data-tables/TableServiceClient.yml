### YamlMime:TSType
name: TableServiceClient
uid: '@azure/data-tables.TableServiceClient'
package: '@azure/data-tables'
summary: >-
  A TableServiceClient represents a Client to the Azure Tables service allowing
  you

  to perform operations on the tables and the entities.
fullName: TableServiceClient
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'TableServiceClient(string, TableServiceClientOptions)'
    uid: '@azure/data-tables.TableServiceClient.constructor_1'
    package: '@azure/data-tables'
    summary: Creates a new instance of the TableServiceClient class.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new TableServiceClient(url: string, options?: TableServiceClientOptions)'
      parameters:
        - id: url
          type: string
          description: >-
            The URL of the service account that is the target of the desired
            operation., such as
                         "https://myaccount.table.core.windows.net". You can append a SAS,
                         such as "https://myaccount.table.core.windows.net?sasString".
        - id: options
          type: <xref uid="@azure/data-tables.TableServiceClientOptions" />
          description: >
            Options to configure the HTTP pipeline.


            Example using an account name/key:


            ```js

            const account = "<storage account name>"

            const sharedKeyCredential = new TablesSharedKeyCredential(account,
            "<account key>");


            const tableServiceClient = new TableServiceClient(
              `https://${account}.table.core.windows.net`,
              sharedKeyCredential
            );

            ```
  - name: >-
      TableServiceClient(string, TablesSharedKeyCredential,
      TableServiceClientOptions)
    uid: '@azure/data-tables.TableServiceClient.constructor'
    package: '@azure/data-tables'
    summary: Creates a new instance of the TableServiceClient class.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new TableServiceClient(url: string, credential:
        TablesSharedKeyCredential, options?: TableServiceClientOptions)
      parameters:
        - id: url
          type: string
          description: >-
            The URL of the service account that is the target of the desired
            operation., such as
                         "https://myaccount.table.core.windows.net". You can append a SAS,
                         such as "https://myaccount.table.core.windows.net?sasString".
        - id: credential
          type: <xref uid="@azure/data-tables.TablesSharedKeyCredential" />
          description: >-
            TablesSharedKeyCredential used to authenticate requests. Only
            Supported for Browsers
        - id: options
          type: <xref uid="@azure/data-tables.TableServiceClientOptions" />
          description: >
            Options to configure the HTTP pipeline.


            Example using an account name/key:


            ```js

            const account = "<storage account name>"

            const sharedKeyCredential = new TablesSharedKeyCredential(account,
            "<account key>");


            const tableServiceClient = new TableServiceClient(
              `https://${account}.table.core.windows.net`,
              sharedKeyCredential
            );

            ```
methods:
  - name: 'createTable(string, CreateTableOptions)'
    uid: '@azure/data-tables.TableServiceClient.createTable'
    package: '@azure/data-tables'
    summary: Creates a new table under the given account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function createTable(tableName: string, options?: CreateTableOptions)'
      parameters:
        - id: tableName
          type: string
          description: The name of the table.
        - id: options
          type: <xref uid="@azure/data-tables.CreateTableOptions" />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;<xref uid="@azure/data-tables.CreateTableItemResponse"
          />&gt;
        description: ''
  - name: 'deleteTable(string, DeleteTableOptions)'
    uid: '@azure/data-tables.TableServiceClient.deleteTable'
    package: '@azure/data-tables'
    summary: Operation permanently deletes the specified table.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function deleteTable(tableName: string, options?: DeleteTableOptions)'
      parameters:
        - id: tableName
          type: string
          description: The name of the table.
        - id: options
          type: <xref uid="@azure/data-tables.DeleteTableOptions" />
          description: |
            The options parameters.
      return:
        type: Promise&lt;<xref uid="@azure/data-tables.DeleteTableResponse" />&gt;
        description: ''
  - name: 'fromConnectionString(string, TableServiceClientOptions)'
    uid: '@azure/data-tables.TableServiceClient.fromConnectionString'
    package: '@azure/data-tables'
    summary: Creates an instance of TableServiceClient from connection string.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function fromConnectionString(connectionString: string, options?:
        TableServiceClientOptions)
      parameters:
        - id: connectionString
          type: string
          description: >-
            Account connection string or a SAS connection string of an Azure
            storage account.
                                      [ Note - Account connection string can only be used in NODE.JS runtime. ]
                                      Account connection string example -
                                      `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`
                                      SAS connection string example -
                                      `BlobEndpoint=https://myaccount.table.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`
        - id: options
          type: <xref uid="@azure/data-tables.TableServiceClientOptions" />
          description: Options to configure the HTTP pipeline.
      return:
        type: <xref uid="@azure/data-tables.TableServiceClient" />
        description: A new TableServiceClient from the given connection string.
  - name: 'getAccessPolicy(string, GetAccessPolicyOptions)'
    uid: '@azure/data-tables.TableServiceClient.getAccessPolicy'
    package: '@azure/data-tables'
    summary: >-
      Retrieves details about any stored access policies specified on the table
      that may be used with

      Shared Access Signatures.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAccessPolicy(tableName: string, options?:
        GetAccessPolicyOptions)
      parameters:
        - id: tableName
          type: string
          description: The name of the table.
        - id: options
          type: <xref uid="@azure/data-tables.GetAccessPolicyOptions" />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;<xref uid="@azure/data-tables.GetAccessPolicyResponse"
          />&gt;
        description: ''
  - name: getProperties(GetPropertiesOptions)
    uid: '@azure/data-tables.TableServiceClient.getProperties'
    package: '@azure/data-tables'
    summary: >-
      Gets the properties of an account's Table service, including properties
      for Analytics and CORS

      (Cross-Origin Resource Sharing) rules.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getProperties(options?: GetPropertiesOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/data-tables.GetPropertiesOptions" />
          description: |
            The options parameters.
      return:
        type: Promise&lt;<xref uid="@azure/data-tables.GetPropertiesResponse" />&gt;
        description: ''
  - name: getStatistics(GetStatisticsOptions)
    uid: '@azure/data-tables.TableServiceClient.getStatistics'
    package: '@azure/data-tables'
    summary: >-
      Retrieves statistics related to replication for the Table service. It is
      only available on the

      secondary location endpoint when read-access geo-redundant replication is
      enabled for the account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getStatistics(options?: GetStatisticsOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/data-tables.GetStatisticsOptions" />
          description: |
            The options parameters.
      return:
        type: Promise&lt;<xref uid="@azure/data-tables.GetStatisticsResponse" />&gt;
        description: ''
  - name: listTables(ListTableItemsOptions)
    uid: '@azure/data-tables.TableServiceClient.listTables'
    package: '@azure/data-tables'
    summary: Queries tables under the given account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listTables(options?: ListTableItemsOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/data-tables.ListTableItemsOptions" />
          description: |
            The options parameters.
      return:
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/data-tables.TableResponseProperties" />, <xref
          uid="@azure/data-tables.ListTableItemsResponse" />&gt;
        description: ''
  - name: 'setAccessPolicy(string, SetAccessPolicyOptions)'
    uid: '@azure/data-tables.TableServiceClient.setAccessPolicy'
    package: '@azure/data-tables'
    summary: >-
      Sets stored access policies for the table that may be used with Shared
      Access Signatures.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setAccessPolicy(tableName: string, options?:
        SetAccessPolicyOptions)
      parameters:
        - id: tableName
          type: string
          description: The name of the table.
        - id: options
          type: <xref uid="@azure/data-tables.SetAccessPolicyOptions" />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;<xref uid="@azure/data-tables.SetAccessPolicyResponse"
          />&gt;
        description: ''
  - name: 'setProperties(ServiceProperties, SetPropertiesOptions)'
    uid: '@azure/data-tables.TableServiceClient.setProperties'
    package: '@azure/data-tables'
    summary: >-
      Sets properties for an account's Table service endpoint, including
      properties for Analytics and CORS

      (Cross-Origin Resource Sharing) rules.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setProperties(properties: ServiceProperties, options?:
        SetPropertiesOptions)
      parameters:
        - id: properties
          type: <xref uid="@azure/data-tables.ServiceProperties" />
          description: The Table Service properties.
        - id: options
          type: <xref uid="@azure/data-tables.SetPropertiesOptions" />
          description: |
            The options parameters.
      return:
        type: Promise&lt;<xref uid="@azure/data-tables.SetPropertiesResponse" />&gt;
        description: ''
