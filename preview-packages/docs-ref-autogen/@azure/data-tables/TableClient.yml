### YamlMime:TSType
name: TableClient
uid: '@azure/data-tables.TableClient'
package: '@azure/data-tables'
summary: |-
  A TableClient represents a Client to the Azure Tables service allowing you
  to perform operations on a single table.
fullName: TableClient
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'TableClient(string, string, TableServiceClientOptions)'
    uid: '@azure/data-tables.TableClient.constructor_1'
    package: '@azure/data-tables'
    summary: Creates an instance of TableClient.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new TableClient(url: string, tableName: string, options?:
        TableServiceClientOptions)
      parameters:
        - id: url
          type: string
          description: >-
            The URL of the service account that is the target of the desired
            operation., such as
                                "https://myaccount.table.core.windows.net".
        - id: tableName
          type: string
          description: the name of the table
        - id: options
          type: <xref uid="@azure/data-tables.TableServiceClientOptions" />
          description: >
            Optional. Options to configure the HTTP pipeline.


            Example using an account name/key:


            ```js

            const account = "<storage account name>";

            const tableName = "<table name>";

            const sharedKeyCredential = new TablesSharedKeyCredential(account,
            "<account key>");


            const tableServiceClient = new TableServiceClient(
              `https://${account}.table.core.windows.net`,
              `${tableName}`
              sharedKeyCredential
            );

            ```
  - name: >-
      TableClient(string, string, TablesSharedKeyCredential,
      TableServiceClientOptions)
    uid: '@azure/data-tables.TableClient.constructor'
    package: '@azure/data-tables'
    summary: Creates a new instance of the TableClient class.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new TableClient(url: string, tableName: string, credential:
        TablesSharedKeyCredential, options?: TableServiceClientOptions)
      parameters:
        - id: url
          type: string
          description: >-
            The URL of the service account that is the target of the desired
            operation., such as
                                "https://myaccount.table.core.windows.net".
        - id: tableName
          type: string
          description: the name of the table
        - id: credential
          type: <xref uid="@azure/data-tables.TablesSharedKeyCredential" />
          description: >-
            TablesSharedKeyCredential used to authenticate requests. Only
            Supported for Browsers
        - id: options
          type: <xref uid="@azure/data-tables.TableServiceClientOptions" />
          description: >
            Optional. Options to configure the HTTP pipeline.


            Example using an account name/key:


            ```js

            const account = "<storage account name>";

            const tableName = "<table name>";

            const sharedKeyCredential = new TablesSharedKeyCredential(account,
            "<account key>");


            const tableServiceClient = new TableServiceClient(
              `https://${account}.table.core.windows.net`,
              `${tableName}`
              sharedKeyCredential
            );

            ```
properties:
  - name: tableName
    uid: '@azure/data-tables.TableClient.tableName'
    package: '@azure/data-tables'
    summary: Name of the table to perform operations on.
    fullName: tableName
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'tableName: string'
      return:
        type: string
        description: ''
methods:
  - name: create(CreateTableOptions)
    uid: '@azure/data-tables.TableClient.create'
    package: '@azure/data-tables'
    summary: Creates the current table it it doesn't exist
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function create(options?: CreateTableOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/data-tables.CreateTableOptions" />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;<xref uid="@azure/data-tables.CreateTableItemResponse"
          />&gt;
        description: ''
  - name: createBatch(string)
    uid: '@azure/data-tables.TableClient.createBatch'
    package: '@azure/data-tables'
    summary: >-
      Creates a new Batch to collect sub-operations that can be submitted
      together via submitBatch
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function createBatch(partitionKey: string)'
      parameters:
        - id: partitionKey
          type: string
          description: |
            partitionKey to which the batch operations will be targetted to
      return:
        type: <xref uid="@azure/data-tables.TableBatch" />
        description: ''
  - name: 'createEntity<T>(TableEntity<T>, CreateTableEntityOptions)'
    uid: '@azure/data-tables.TableClient.createEntity'
    package: '@azure/data-tables'
    summary: Insert entity in the table.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createEntity<T>(entity: TableEntity<T>, options?:
        CreateTableEntityOptions)
      parameters:
        - id: entity
          type: <xref uid="@azure/data-tables.TableEntity" />&lt;T&gt;
          description: The properties for the table entity.
        - id: options
          type: <xref uid="@azure/data-tables.CreateTableEntityOptions" />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;<xref uid="@azure/data-tables.CreateTableEntityResponse"
          />&gt;
        description: ''
  - name: delete(DeleteTableOptions)
    uid: '@azure/data-tables.TableClient.delete'
    package: '@azure/data-tables'
    summary: Permanently deletes the current table with all of its entities.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function delete(options?: DeleteTableOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/data-tables.DeleteTableOptions" />
          description: |
            The options parameters.
      return:
        type: Promise&lt;<xref uid="@azure/data-tables.DeleteTableResponse" />&gt;
        description: ''
  - name: 'deleteEntity(string, string, DeleteTableEntityOptions)'
    uid: '@azure/data-tables.TableClient.deleteEntity'
    package: '@azure/data-tables'
    summary: Deletes the specified entity in the table.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteEntity(partitionKey: string, rowKey: string, options?:
        DeleteTableEntityOptions)
      parameters:
        - id: partitionKey
          type: string
          description: The partition key of the entity.
        - id: rowKey
          type: string
          description: The row key of the entity.
        - id: options
          type: <xref uid="@azure/data-tables.DeleteTableEntityOptions" />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;<xref uid="@azure/data-tables.DeleteTableEntityResponse"
          />&gt;
        description: ''
  - name: 'fromConnectionString(string, string, TableServiceClientOptions)'
    uid: '@azure/data-tables.TableClient.fromConnectionString'
    package: '@azure/data-tables'
    summary: Creates an instance of TableClient from connection string.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function fromConnectionString(connectionString: string,
        tableName: string, options?: TableServiceClientOptions)
      parameters:
        - id: connectionString
          type: string
          description: >-
            Account connection string or a SAS connection string of an Azure
            storage account.
                                      [ Note - Account connection string can only be used in NODE.JS runtime. ]
                                      Account connection string example -
                                      `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`
                                      SAS connection string example -
                                      `BlobEndpoint=https://myaccount.table.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`
        - id: tableName
          type: string
          description: ''
        - id: options
          type: <xref uid="@azure/data-tables.TableServiceClientOptions" />
          description: Options to configure the HTTP pipeline.
      return:
        type: <xref uid="@azure/data-tables.TableClient" />
        description: A new TableClient from the given connection string.
  - name: 'getEntity<T>(string, string, GetTableEntityOptions)'
    uid: '@azure/data-tables.TableClient.getEntity'
    package: '@azure/data-tables'
    summary: Returns a single entity in the table.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getEntity<T>(partitionKey: string, rowKey: string, options?:
        GetTableEntityOptions)
      parameters:
        - id: partitionKey
          type: string
          description: The partition key of the entity.
        - id: rowKey
          type: string
          description: The row key of the entity.
        - id: options
          type: <xref uid="@azure/data-tables.GetTableEntityOptions" />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;<xref uid="@azure/data-tables.GetTableEntityResponse"
          />&lt;<xref uid="@azure/data-tables.TableEntityResult"
          />&lt;T&gt;&gt;&gt;
        description: ''
  - name: listEntities<T>(ListTableEntitiesOptions)
    uid: '@azure/data-tables.TableClient.listEntities'
    package: '@azure/data-tables'
    summary: Queries entities in a table.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listEntities<T>(options?: ListTableEntitiesOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/data-tables.ListTableEntitiesOptions" />
          description: |
            The options parameters.
      return:
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/data-tables.TableEntityResult" />&lt;T&gt;, <xref
          uid="@azure/data-tables.ListEntitiesResponse" />&lt;<xref
          uid="@azure/data-tables.TableEntityResult" />&lt;T&gt;&gt;&gt;
        description: ''
  - name: 'updateEntity<T>(TableEntity<T>, UpdateMode, UpdateTableEntityOptions)'
    uid: '@azure/data-tables.TableClient.updateEntity'
    package: '@azure/data-tables'
    summary: Update an entity in the table.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateEntity<T>(entity: TableEntity<T>, mode: UpdateMode,
        options?: UpdateTableEntityOptions)
      parameters:
        - id: entity
          type: <xref uid="@azure/data-tables.TableEntity" />&lt;T&gt;
          description: The properties of the entity to be updated.
        - id: mode
          type: <xref uid="@azure/data-tables.UpdateMode" />
          description: |-
            The different modes for updating the entity:
                          - Merge: Updates an entity by updating the entity's properties without replacing the existing entity.
                          - Replace: Updates an existing entity by replacing the entire entity.
        - id: options
          type: <xref uid="@azure/data-tables.UpdateTableEntityOptions" />
          description: |
            The options parameters.
      return:
        type: Promise&lt;<xref uid="@azure/data-tables.UpdateEntityResponse" />&gt;
        description: ''
  - name: 'upsertEntity<T>(TableEntity<T>, UpdateMode, UpsertTableEntityOptions)'
    uid: '@azure/data-tables.TableClient.upsertEntity'
    package: '@azure/data-tables'
    summary: Upsert an entity in the table.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function upsertEntity<T>(entity: TableEntity<T>, mode: UpdateMode,
        options?: UpsertTableEntityOptions)
      parameters:
        - id: entity
          type: <xref uid="@azure/data-tables.TableEntity" />&lt;T&gt;
          description: The properties for the table entity.
        - id: mode
          type: <xref uid="@azure/data-tables.UpdateMode" />
          description: |-
            The different modes for updating the entity:
                          - Merge: Updates an entity by updating the entity's properties without replacing the existing entity.
                          - Replace: Updates an existing entity by replacing the entire entity.
        - id: options
          type: <xref uid="@azure/data-tables.UpsertTableEntityOptions" />
          description: |
            The options parameters.
      return:
        type: Promise&lt;<xref uid="@azure/data-tables.UpsertEntityResponse" />&gt;
        description: ''
