### YamlMime:TSType
name: KeyVaultBackupClient
uid: '@azure/keyvault-admin.KeyVaultBackupClient'
package: '@azure/keyvault-admin'
summary: >-
  The KeyVaultBackupClient provides methods to generate backups

  and restore backups of any given Azure Key Vault instance.

  This client supports generating full backups, selective restores of specific
  keys

  and full restores of Key Vault instances.
fullName: KeyVaultBackupClient
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'KeyVaultBackupClient(string, TokenCredential, BackupClientOptions)'
    uid: '@azure/keyvault-admin.KeyVaultBackupClient.constructor'
    package: '@azure/keyvault-admin'
    summary: |-
      Creates an instance of the KeyVaultBackupClient.
      Example usage:
      ```ts
      import { KeyVaultBackupClient } from "@azure/keyvault-admin";
      import { DefaultAzureCredential } from "@azure/identity";

      let vaultUrl = `https://<MY KEY VAULT HERE>.vault.azure.net`;
      let credentials = new DefaultAzureCredential();

      let client = new KeyVaultBackupClient(vaultUrl, credentials);
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new KeyVaultBackupClient(vaultUrl: string, credential: TokenCredential,
        pipelineOptions?: BackupClientOptions)
      parameters:
        - id: vaultUrl
          type: string
          description: >-
            the URL of the Key Vault. It should have this shape:
            `https://${your-key-vault-name}.vault.azure.net`
        - id: credential
          type: TokenCredential
          description: >-
            An object that implements the `TokenCredential` interface used to
            authenticate requests to the service. Use the \@azure/identity
            package to create a credential that suits your needs.
        - id: pipelineOptions
          type: <xref uid="@azure/keyvault-admin.BackupClientOptions" />
          description: >
            Pipeline options used to configure Key Vault API requests. Omit this
            parameter to use the default pipeline configuration.
properties:
  - name: vaultUrl
    uid: '@azure/keyvault-admin.KeyVaultBackupClient.vaultUrl'
    package: '@azure/keyvault-admin'
    summary: The base URL to the vault
    fullName: vaultUrl
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'vaultUrl: string'
      return:
        type: string
        description: ''
methods:
  - name: 'beginBackup(string, string, BeginBackupOptions)'
    uid: '@azure/keyvault-admin.KeyVaultBackupClient.beginBackup'
    package: '@azure/keyvault-admin'
    summary: >-
      Starts generating a backup of an Azure Key Vault on the specified Storage
      Blob account.

      This function returns a Long Running Operation poller that allows you to
      wait indefinitely until the Key Vault backup is generated.


      Example usage:

      ```ts

      const client = new KeyVaultBackupClient(url, credentials);


      const blobStorageUri = "<blob-storage-uri>"; // <Blob storage URL>/<folder
      name>

      const sasToken = "<sas-token>";

      const poller = await client.beginBackup(blobStorageUri, sasToken);


      // Serializing the poller

      //

      //   const serialized = poller.toString();

      //

      // A new poller can be created with:

      //

      //   await client.beginBackup(blobStorageUri, sasToken, { resumeFrom:
      serialized });

      //


      // Waiting until it's done

      const backupUri = await poller.pollUntilDone();

      console.log(backupUri);

      ```

      Starts a full backup operation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginBackup(blobStorageUri: string, sasToken: string, options?:
        BeginBackupOptions)
      parameters:
        - id: blobStorageUri
          type: string
          description: >-
            The URL of the blob storage resource, including the path to the
            container where the backup will end up being stored.
        - id: sasToken
          type: string
          description: The SAS token.
        - id: options
          type: <xref uid="@azure/keyvault-admin.BeginBackupOptions" />
          description: |
            The optional parameters.
      return:
        type: >-
          Promise&lt;PollerLike&lt;<xref
          uid="@azure/keyvault-admin.BackupOperationState" />, <xref
          uid="@azure/keyvault-admin.BackupResult" />&gt;&gt;
        description: ''
  - name: 'beginRestore(string, string, string, BeginRestoreOptions)'
    uid: '@azure/keyvault-admin.KeyVaultBackupClient.beginRestore'
    package: '@azure/keyvault-admin'
    summary: >-
      Starts restoring all key materials using the SAS token pointing to a
      previously stored Azure Blob storage

      backup folder.

      This function returns a Long Running Operation poller that allows you to
      wait indefinitely until the Key Vault restore operation is complete.


      Example usage:

      ```ts

      const client = new KeyVaultBackupClient(url, credentials);


      const blobStorageUri = "<blob-storage-uri>"; // <Blob storage URL>/<folder
      name>

      const sasToken = "<sas-token>";

      const folderName = "<folder-name>";

      const poller = await client.beginRestore(blobStorageUri, sasToken,
      folderName);


      // The poller can be serialized with:

      //

      //   const serialized = poller.toString();

      //

      // A new poller can be created with:

      //

      //   await client.beginRestore(blobStorageUri, sasToken, folderName, {
      resumeFrom: serialized });

      //


      // Waiting until it's done

      const backupUri = await poller.pollUntilDone();

      console.log(backupUri);

      ```

      Starts a full restore operation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginRestore(blobStorageUri: string, sasToken: string,
        folderName: string, options?: BeginRestoreOptions)
      parameters:
        - id: blobStorageUri
          type: string
          description: >-
            The URL of the blob storage resource where the previous successful
            full backup was stored.
        - id: sasToken
          type: string
          description: The SAS token.
        - id: folderName
          type: string
          description: >-
            The folder name of the blob where the previous successful full
            backup was stored. The URL segment after the container name.
        - id: options
          type: <xref uid="@azure/keyvault-admin.BeginRestoreOptions" />
          description: |
            The optional parameters.
      return:
        type: >-
          Promise&lt;PollerLike&lt;<xref
          uid="@azure/keyvault-admin.RestoreOperationState" />, <xref
          uid="@azure/keyvault-admin.RestoreResult" />&gt;&gt;
        description: ''
  - name: 'beginSelectiveRestore(string, string, string, string, BeginBackupOptions)'
    uid: '@azure/keyvault-admin.KeyVaultBackupClient.beginSelectiveRestore'
    package: '@azure/keyvault-admin'
    summary: >-
      Starts restoring all key versions of a given key using user supplied SAS
      token pointing to a previously

      stored Azure Blob storage backup folder.

      This function returns a Long Running Operation poller that allows you to
      wait indefinitely until the Key Vault selective restore is complete.


      Example usage:

      ```ts

      const client = new KeyVaultBackupClient(url, credentials);


      const blobStorageUri = "<blob-storage-uri>";

      const sasToken = "<sas-token>";

      const folderName = "<folder-name>";

      const keyName = "<key-name>";

      const poller = await client.beginSelectiveRestore(blobStorageUri,
      sasToken, folderName, keyName);


      // Serializing the poller

      //

      //   const serialized = poller.toString();

      //

      // A new poller can be created with:

      //

      //   await client.beginSelectiveRestore(blobStorageUri, sasToken,
      folderName, keyName, { resumeFrom: serialized });

      //


      // Waiting until it's done

      await poller.pollUntilDone();

      ```

      Creates a new role assignment.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginSelectiveRestore(blobStorageUri: string, sasToken: string,
        folderName: string, keyName: string, options?: BeginBackupOptions)
      parameters:
        - id: blobStorageUri
          type: string
          description: >-
            The URL of the blob storage resource, with the folder name of the
            blob where the previous successful full backup was stored.
        - id: sasToken
          type: string
          description: The SAS token.
        - id: folderName
          type: string
          description: >-
            The Folder name of the blob where the previous successful full
            backup was stored. The URL segment after the container name.
        - id: keyName
          type: string
          description: The name of the key that wants to be restored.
        - id: options
          type: <xref uid="@azure/keyvault-admin.BeginBackupOptions" />
          description: |
            The optional parameters.
      return:
        type: >-
          Promise&lt;PollerLike&lt;<xref
          uid="@azure/keyvault-admin.SelectiveRestoreOperationState" />, <xref
          uid="@azure/keyvault-admin.RestoreResult" />&gt;&gt;
        description: ''
