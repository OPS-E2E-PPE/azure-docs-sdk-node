### YamlMime:TSType
name: FormRecognizerClient
uid: '@azure/ai-form-recognizer.FormRecognizerClient'
package: '@azure/ai-form-recognizer'
summary: Client class for interacting with the Azure Form Recognizer service.
fullName: FormRecognizerClient
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: >-
      FormRecognizerClient(string, TokenCredential | KeyCredential,
      FormRecognizerClientOptions)
    uid: '@azure/ai-form-recognizer.FormRecognizerClient.constructor'
    package: '@azure/ai-form-recognizer'
    summary: >
      Creates an instance of FormRecognizerClient.

      Example usage:

      ```ts

      import { FormRecognizerClient, AzureKeyCredential } from
      "@azure/ai-form-recognizer";


      const client = new FormRecognizerClient(
         "<service endpoint>",
         new AzureKeyCredential("<api key>")
      );

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new FormRecognizerClient(endpointUrl: string, credential:
        TokenCredential | KeyCredential, options?: FormRecognizerClientOptions)
      parameters:
        - id: endpointUrl
          type: string
          description: Url to an Azure Form Recognizer service endpoint
        - id: credential
          type: TokenCredential | KeyCredential
          description: Used to authenticate requests to the service.
        - id: options
          type: <xref uid="@azure/ai-form-recognizer.FormRecognizerClientOptions" />
          description: |
            Used to configure the Form Recognizer client.
properties:
  - name: endpointUrl
    uid: '@azure/ai-form-recognizer.FormRecognizerClient.endpointUrl'
    package: '@azure/ai-form-recognizer'
    summary: URL to an Azure Form Recognizer service endpoint
    fullName: endpointUrl
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'endpointUrl: string'
      return:
        type: string
        description: ''
methods:
  - name: >-
      beginRecognizeBusinessCards(FormRecognizerRequestBody,
      BeginRecognizeBusinessCardsOptions)
    uid: '@azure/ai-form-recognizer.FormRecognizerClient.beginRecognizeBusinessCards'
    package: '@azure/ai-form-recognizer'
    summary: >-
      Recognizes data from business cards using a pre-built business card model,
      enabling you to extract structured data

      from business cards such as name, job title, phone numbers, etc.

      For a list of fields that are contained in the response, please refer to
      the documentation at the

      following link: https://aka.ms/formrecognizer/businesscardfields


      This method returns a long running operation poller that allows you to
      wait

      indefinitely until the operation is completed.


      Note that the onProgress callback will not be invoked if the operation
      completes in the first

      request, and attempting to cancel a completed copy will result in an error
      being thrown.


      Example usage:

      ```ts

      const path = "./business-card-english.png";

      const readStream = fs.createReadStream(path);


      const client = new FormRecognizerClient(endpoint, new
      AzureKeyCredential(apiKey));

      const poller = await client.beginRecognizeBusinessCards(readStream, {
        contentType: "image/png",
        onProgress: (state) => { console.log(`status: ${state.status}`); }
      });


      const [businessCard] = await poller.pollUntilDone();

      ```


      Recognizes business card information from a given document
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginRecognizeBusinessCards(businessCard:
        FormRecognizerRequestBody, options?: BeginRecognizeBusinessCardsOptions)
      parameters:
        - id: businessCard
          type: <xref uid="@azure/ai-form-recognizer.FormRecognizerRequestBody" />
          description: Input document
        - id: options
          type: >-
            <xref
            uid="@azure/ai-form-recognizer.BeginRecognizeBusinessCardsOptions"
            />
          description: |
            Options for the recognition operation
      return:
        type: Promise&lt;<xref uid="@azure/ai-form-recognizer.FormPollerLike" />&gt;
        description: ''
  - name: >-
      beginRecognizeBusinessCardsFromUrl(string,
      BeginRecognizeBusinessCardsOptions)
    uid: >-
      @azure/ai-form-recognizer.FormRecognizerClient.beginRecognizeBusinessCardsFromUrl
    package: '@azure/ai-form-recognizer'
    summary: >-
      Recognizes business card information from a url using a pre-built business
      card model, enabling you to extract structured data

      from business cards such as name, job title, phone numbers, etc.

      For a list of fields that are contained in the response, please refer to
      the documentation at the following link:
      https://aka.ms/formrecognizer/businesscardfields


      This method returns a long running operation poller that allows you to
      wait

      indefinitely until the operation is completed.


      Note that the onProgress callback will not be invoked if the operation
      completes in the first

      request, and attempting to cancel a completed copy will result in an error
      being thrown.


      Example usage:

      ```ts

      const url = "<url to the business card document>";

      const client = new FormRecognizerClient(endpoint, new
      AzureKeyCredential(apiKey));

      const poller = await client.beginRecognizeBusinessCardsFromUrl(url, {
        includeFieldElements: true,
        onProgress: (state) => {
          console.log(`analyzing status: ${state.status}`);
        }
      });

      const [businessCard] = await poller.pollUntilDone();

      ```


      Recognizes business card information from a given accessible url to a
      document
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginRecognizeBusinessCardsFromUrl(businessCardUrl: string,
        options?: BeginRecognizeBusinessCardsOptions)
      parameters:
        - id: businessCardUrl
          type: string
          description: >-
            Url to a business card document that is accessible from the service.
            Must be a valid, encoded URL to a document of a supported content
            type.
        - id: options
          type: >-
            <xref
            uid="@azure/ai-form-recognizer.BeginRecognizeBusinessCardsOptions"
            />
          description: |
            Options for the recognition operation
      return:
        type: Promise&lt;<xref uid="@azure/ai-form-recognizer.FormPollerLike" />&gt;
        description: ''
  - name: >-
      beginRecognizeContent(FormRecognizerRequestBody,
      BeginRecognizeContentOptions)
    uid: '@azure/ai-form-recognizer.FormRecognizerClient.beginRecognizeContent'
    package: '@azure/ai-form-recognizer'
    summary: >-
      Recognizes content, including text and table structure from a form
      document.

      This method returns a long running operation poller that allows you to
      wait

      indefinitely until the operation is completed.

      Note that the onProgress callback will not be invoked if the operation
      completes in the first

      request, and attempting to cancel a completed copy will result in an error
      being thrown.


      Example usage:

      ```ts

      const path = "./Invoice_7.pdf";

      const readStream = fs.createReadStream(path);


      const client = new FormRecognizerClient(endpoint, new
      AzureKeyCredential(apiKey));

      const poller = await client.beginRecognizeContent(readStream,
      "application/pdf", {
        onProgress: (state) => { console.log(`status: ${state.status}`); }
      });


      const pages = await poller.pollUntilDone();

      ```

      Recognizes content/layout information from a given document
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginRecognizeContent(form: FormRecognizerRequestBody,
        options?: BeginRecognizeContentOptions)
      parameters:
        - id: form
          type: <xref uid="@azure/ai-form-recognizer.FormRecognizerRequestBody" />
          description: Input document
        - id: options
          type: >-
            <xref uid="@azure/ai-form-recognizer.BeginRecognizeContentOptions"
            />
          description: |
            Options to start content recognition operation
      return:
        type: >-
          Promise&lt;<xref uid="@azure/ai-form-recognizer.ContentPollerLike"
          />&gt;
        description: ''
  - name: 'beginRecognizeContentFromUrl(string, BeginRecognizeContentOptions)'
    uid: >-
      @azure/ai-form-recognizer.FormRecognizerClient.beginRecognizeContentFromUrl
    package: '@azure/ai-form-recognizer'
    summary: >-
      Recognizes content, including text and table structure from a url to a
      form document.

      This method returns a long running operation poller that allows you to
      wait

      indefinitely until the operation is completed.

      Note that the onProgress callback will not be invoked if the operation
      completes in the first

      request, and attempting to cancel a completed copy will result in an error
      being thrown.


      Example usage:

      ```ts

      const url = "<form document url>";


      const client = new FormRecognizerClient(endpoint, new
      AzureKeyCredential(apiKey));

      const poller = await client.beginRecognizeContentFromUrl(url, {
        onProgress: (state) => { console.log(`status: ${state.status}`); }
      });


      const pages = await poller.pollUntilDone();

      ```


      Recognizes content/layout information from a url to a form document
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginRecognizeContentFromUrl(formUrl: string, options?:
        BeginRecognizeContentOptions)
      parameters:
        - id: formUrl
          type: string
          description: >-
            Url to a document that is accessible from the service. Must be a
            valid, encoded URL to a document of a supported content type.
        - id: options
          type: >-
            <xref uid="@azure/ai-form-recognizer.BeginRecognizeContentOptions"
            />
          description: |
            Options for the content recognition operation
      return:
        type: >-
          Promise&lt;<xref uid="@azure/ai-form-recognizer.ContentPollerLike"
          />&gt;
        description: ''
  - name: >-
      beginRecognizeCustomForms(string, FormRecognizerRequestBody,
      BeginRecognizeCustomFormsOptions)
    uid: '@azure/ai-form-recognizer.FormRecognizerClient.beginRecognizeCustomForms'
    package: '@azure/ai-form-recognizer'
    summary: >-
      Recognizes forms from a given document using a custom form model from
      training.

      This method returns a long running operation poller that allows you to
      wait

      indefinitely until the operation is completed.


      Note that the onProgress callback will not be invoked if the operation
      completes in the first

      request, and attempting to cancel a completed copy will result in an error
      being thrown.


      Example usage:

      ```ts

      const path = "./Invoice_6.pdf";

      const readStream = fs.createReadStream(path);


      const client = new FormRecognizerClient(endpoint, new
      AzureKeyCredential(apiKey));

      const poller = await client.beginRecognizeCustomForms(modelId, readStream,
      "application/pdf", {
        onProgress: (state) => { console.log(`status: ${state.status}`); }
      });

      const forms = await poller.pollUntilDone();

      ```

      Recognizes form information from a given document using a custom form
      model.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginRecognizeCustomForms(modelId: string, form:
        FormRecognizerRequestBody, options?: BeginRecognizeCustomFormsOptions)
      parameters:
        - id: modelId
          type: string
          description: Id of the custom form model to use
        - id: form
          type: <xref uid="@azure/ai-form-recognizer.FormRecognizerRequestBody" />
          description: Input form document
        - id: options
          type: >-
            <xref
            uid="@azure/ai-form-recognizer.BeginRecognizeCustomFormsOptions" />
          description: |
            Options to start the form recognition operation
      return:
        type: Promise&lt;<xref uid="@azure/ai-form-recognizer.FormPollerLike" />&gt;
        description: ''
  - name: >-
      beginRecognizeCustomFormsFromUrl(string, string,
      BeginRecognizeCustomFormsOptions)
    uid: >-
      @azure/ai-form-recognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl
    package: '@azure/ai-form-recognizer'
    summary: >-
      Recognizes forms from a URL to a document using a custom form model from
      training.

      This method returns a long running operation poller that allows you to
      wait

      indefinitely until the operation is completed.


      Note that the onProgress callback will not be invoked if the operation
      completes in the first

      request, and attempting to cancel a completed copy will result in an error
      being thrown.


      Example usage:

      ```ts

      const url = "<form document url>";


      const client = new FormRecognizerClient(endpoint, new
      AzureKeyCredential(apiKey));

      const poller = await client.beginRecognizeCustomFormsFromUrl(modelId, url,
      {
        onProgress: (state) => { console.log(`status: ${state.status}`); }
      });

      const forms = await poller.pollUntilDone();

      ```


      Recognizes form information from a url to a document using a custom form
      model.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginRecognizeCustomFormsFromUrl(modelId: string, formUrl:
        string, options?: BeginRecognizeCustomFormsOptions)
      parameters:
        - id: modelId
          type: string
          description: Id of the custom form model to use
        - id: formUrl
          type: string
          description: >-
            Url to a document that is accessible from the service. Must be a
            valid, encoded URL to a document of a supported content type.
        - id: options
          type: >-
            <xref
            uid="@azure/ai-form-recognizer.BeginRecognizeCustomFormsOptions" />
          description: |
            Options for the recognition operation
      return:
        type: Promise&lt;<xref uid="@azure/ai-form-recognizer.FormPollerLike" />&gt;
        description: ''
  - name: >-
      beginRecognizeIdDocuments(FormRecognizerRequestBody,
      BeginRecognizeIdDocumentsOptions)
    uid: '@azure/ai-form-recognizer.FormRecognizerClient.beginRecognizeIdDocuments'
    package: '@azure/ai-form-recognizer'
    summary: >
      Recognizes data from identification documents using a pre-built ID

      document model, enabling you to extract structured data from ID documents

      such as first/last name, document number, expiration date, and more.

      For a list of fields that are contained in the response, please refer to

      the documentation at the following link:

      https://aka.ms/formrecognizer/iddocumentfields


      This method returns a long running operation poller that allows you to

      wait indefinitely until the operation is completed.


      Note that the onProgress callback will not be invoked if the operation

      completes in the first request, and attempting to cancel a completed copy

      will result in an error being thrown.


      Example usage:


      ```ts

      const path = "./license.jpg";

      const readStream = fs.createReadStream(path);


      const client = new FormRecognizerClient(endpoint, new
      AzureKeyCredential(apiKey));

      const poller = await client.beginRecognizeIdDocuments(readStream, {
        onProgress: (state) => { console.log(`status: ${state.status}`); }
      });


      const [idDocument] = await poller.pollUntilDone();

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginRecognizeIdDocuments(idDocument:
        FormRecognizerRequestBody, options?: BeginRecognizeIdDocumentsOptions)
      parameters:
        - id: idDocument
          type: <xref uid="@azure/ai-form-recognizer.FormRecognizerRequestBody" />
          description: Input document
        - id: options
          type: >-
            <xref
            uid="@azure/ai-form-recognizer.BeginRecognizeIdDocumentsOptions" />
          description: |
            Options for the recognition operation
      return:
        type: Promise&lt;<xref uid="@azure/ai-form-recognizer.FormPollerLike" />&gt;
        description: ''
  - name: 'beginRecognizeIdDocumentsFromUrl(string, BeginRecognizeIdDocumentsOptions)'
    uid: >-
      @azure/ai-form-recognizer.FormRecognizerClient.beginRecognizeIdDocumentsFromUrl
    package: '@azure/ai-form-recognizer'
    summary: >
      Recognizes identity document information from a url using pre-built ID

      document model, enabling you to extract structured data from ID documents

      such as first/last name, document number, expiration date, and more.

      For a list of fields that are contained in the response, please refer to

      the documentation at the following link:

      https://aka.ms/formrecognizer/iddocumentfields


      This method returns a long running operation poller that allows you to

      wait indefinitely until the operation is completed.


      Note that the onProgress callback will not be invoked if the operation

      completes in the first request, and attempting to cancel a completed copy

      will result in an error being thrown.


      Example usage:

      ```ts

      const url = "<url to the identity document>";


      const client = new FormRecognizerClient(endpoint, new
      AzureKeyCredential(apiKey));

      const poller = await client.beginRecognizeIdDocumentsFromUrl(url, {
        includeFieldElements: true,
        onProgress: (state) => {
          console.log(`analyzing status: ${state.status}`);
        }
      });


      const [idDocument] = await poller.pollUntilDone();

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginRecognizeIdDocumentsFromUrl(idDocumentUrl: string,
        options?: BeginRecognizeIdDocumentsOptions)
      parameters:
        - id: idDocumentUrl
          type: string
          description: >-
            Url to an identity document that is accessible from

            the service. Must be a valid, encoded URL to a document of a
            supported

            content type.
        - id: options
          type: >-
            <xref
            uid="@azure/ai-form-recognizer.BeginRecognizeIdDocumentsOptions" />
          description: |
            Options for the recognition operation
      return:
        type: Promise&lt;<xref uid="@azure/ai-form-recognizer.FormPollerLike" />&gt;
        description: ''
  - name: >-
      beginRecognizeInvoices(FormRecognizerRequestBody,
      BeginRecognizeInvoicesOptions)
    uid: '@azure/ai-form-recognizer.FormRecognizerClient.beginRecognizeInvoices'
    package: '@azure/ai-form-recognizer'
    summary: >-
      Recognizes data from invoices using a pre-built invoice model, enabling
      you to extract structured data

      from invoices such as customer address, vendor address, purchase order ID,
      etc.

      For a list of fields that are contained in the response, please refer to
      the documentation at the following link:
      https://aka.ms/formrecognizer/invoicefields


      This method returns a long running operation poller that allows you to
      wait

      indefinitely until the operation is completed.


      Note that the onProgress callback will not be invoked if the operation
      completes in the first

      request, and attempting to cancel a completed copy will result in an error
      being thrown.


      Example usage:

      ```ts

      const path = "./Invoice_1.pdf";

      const readStream = fs.createReadStream(path);


      const client = new FormRecognizerClient(endpoint, new
      AzureKeyCredential(apiKey));

      const poller = await client.beginRecognizeInvoices(readStream, {
        contentType: "application/pdf",
        onProgress: (state) => { console.log(`status: ${state.status}`); }
      });


      const [invoice] = await poller.pollUntilDone();

      ```


      Recognizes invoice information from a given document
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginRecognizeInvoices(invoice: FormRecognizerRequestBody,
        options?: BeginRecognizeInvoicesOptions)
      parameters:
        - id: invoice
          type: <xref uid="@azure/ai-form-recognizer.FormRecognizerRequestBody" />
          description: Input document
        - id: options
          type: >-
            <xref uid="@azure/ai-form-recognizer.BeginRecognizeInvoicesOptions"
            />
          description: |
            Options for the recognition operation
      return:
        type: Promise&lt;<xref uid="@azure/ai-form-recognizer.FormPollerLike" />&gt;
        description: ''
  - name: 'beginRecognizeInvoicesFromUrl(string, BeginRecognizeInvoicesOptions)'
    uid: >-
      @azure/ai-form-recognizer.FormRecognizerClient.beginRecognizeInvoicesFromUrl
    package: '@azure/ai-form-recognizer'
    summary: >-
      Recognizes invoice information from a URL using a pre-built invoice model,
      enabling you to extract structured data

      from invoices such as customer address, vendor address, purchase order ID,
      etc.

      For a list of fields that are contained in the response, please refer to
      the documentation at the following link:
      https://aka.ms/formrecognizer/invoicefields


      This method returns a long running operation poller that allows you to
      wait

      indefinitely until the operation is completed.


      Note that the onProgress callback will not be invoked if the operation
      completes in the first

      request, and attempting to cancel a completed copy will result in an error
      being thrown.


      Example usage:

      ```ts

      const url = "<url to the invoice document>";

      const client = new FormRecognizerClient(endpoint, new
      AzureKeyCredential(apiKey));

      const poller = await client.beginRecognizeInvoicesFromUrl(url, {
        includeFieldElements: true,
        onProgress: (state) => {
          console.log(`analyzing status: ${state.status}`);
        }
      });

      const [invoice] = await poller.pollUntilDone();

      ```


      Recognizes invoice information from a given accessible url to a document
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginRecognizeInvoicesFromUrl(invoiceUrl: string, options?:
        BeginRecognizeInvoicesOptions)
      parameters:
        - id: invoiceUrl
          type: string
          description: >-
            Url to an invoice document that is accessible from the service. Must
            be a valid, encoded URL to a document of a supported content type.
        - id: options
          type: >-
            <xref uid="@azure/ai-form-recognizer.BeginRecognizeInvoicesOptions"
            />
          description: |
            Options for the recognition operation
      return:
        type: Promise&lt;<xref uid="@azure/ai-form-recognizer.FormPollerLike" />&gt;
        description: ''
  - name: >-
      beginRecognizeReceipts(FormRecognizerRequestBody,
      BeginRecognizeReceiptsOptions)
    uid: '@azure/ai-form-recognizer.FormRecognizerClient.beginRecognizeReceipts'
    package: '@azure/ai-form-recognizer'
    summary: >-
      Recognizes data from receipts using a pre-built receipt model, enabling
      you to extract structured data

      from receipts such as merchant name, merchant phone number, transaction
      date, and more.

      For a list of fields that are contained in the response, please refer to
      the documentation at the following link:
      https://aka.ms/formrecognizer/receiptfields


      This method returns a long running operation poller that allows you to
      wait

      indefinitely until the operation is completed.


      Note that the onProgress callback will not be invoked if the operation
      completes in the first

      request, and attempting to cancel a completed copy will result in an error
      being thrown.


      Example usage:

      ```ts

      const path = "./contoso-allinone.jpg";

      const readStream = fs.createReadStream(path);


      const client = new FormRecognizerClient(endpoint, new
      AzureKeyCredential(apiKey));

      const poller = await client.beginRecognizeReceipts(readStream, {
        contentType: "image/jpeg",
        onProgress: (state) => { console.log(`status: ${state.status}`); }
      });


      const [receipt] = await poller.pollUntilDone();

      ```


      Recognizes receipt information from a given document
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginRecognizeReceipts(receipt: FormRecognizerRequestBody,
        options?: BeginRecognizeReceiptsOptions)
      parameters:
        - id: receipt
          type: <xref uid="@azure/ai-form-recognizer.FormRecognizerRequestBody" />
          description: Input document
        - id: options
          type: >-
            <xref uid="@azure/ai-form-recognizer.BeginRecognizeReceiptsOptions"
            />
          description: |
            Options for the recognition operation
      return:
        type: Promise&lt;<xref uid="@azure/ai-form-recognizer.FormPollerLike" />&gt;
        description: ''
  - name: 'beginRecognizeReceiptsFromUrl(string, BeginRecognizeReceiptsOptions)'
    uid: >-
      @azure/ai-form-recognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl
    package: '@azure/ai-form-recognizer'
    summary: >-
      Recognizes receipt information from a url using pre-built receipt model,
      enabling you to extract structure data

      from receipts such as merchant name, merchant phone number, transaction
      date, and more.

      For a list of fields that are contained in the response, please refer to
      the documentation at the

      following link: https://aka.ms/formrecognizer/receiptfields


      This method returns a long running operation poller that allows you to
      wait

      indefinitely until the operation is completed.


      Note that the onProgress callback will not be invoked if the operation
      completes in the first

      request, and attempting to cancel a completed copy will result in an error
      being thrown.


      Example usage:

      ```ts

      const url = "<url to the receipt document>";

      const client = new FormRecognizerClient(endpoint, new
      AzureKeyCredential(apiKey));

      const poller = await client.beginRecognizeReceiptsFromUrl(url, {
        includeFieldElements: true,
        onProgress: (state) => {
          console.log(`analyzing status: ${state.status}`);
        }
      });

      const [receipt] = await poller.pollUntilDone();

      ```


      Recognizes receipt information from a given accessible url to a document
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginRecognizeReceiptsFromUrl(receiptUrl: string, options?:
        BeginRecognizeReceiptsOptions)
      parameters:
        - id: receiptUrl
          type: string
          description: >-
            Url to a receipt document that is accessible from the service. Must
            be a valid, encoded URL to a document of a supported content type.
        - id: options
          type: >-
            <xref uid="@azure/ai-form-recognizer.BeginRecognizeReceiptsOptions"
            />
          description: |
            Options for the recognition operation
      return:
        type: Promise&lt;<xref uid="@azure/ai-form-recognizer.FormPollerLike" />&gt;
        description: ''
