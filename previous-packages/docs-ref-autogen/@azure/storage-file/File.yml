### YamlMime:TSType
name: File
uid: '@azure/storage-file.File'
package: '@azure/storage-file'
summary: Class representing a File.
fullName: File
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: File(StorageClientContext)
    uid: '@azure/storage-file.File.constructor'
    package: '@azure/storage-file'
    summary: Create a File.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new File(client: StorageClientContext)'
      parameters:
        - id: client
          type: <xref uid="@azure/storage-file.StorageClientContext" />
          description: |
            Reference to the service client.
methods:
  - name: 'abortCopy(string, FileAbortCopyOptionalParams, ServiceCallback<void>)'
    uid: '@azure/storage-file.File.abortCopy_2'
    package: '@azure/storage-file'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function abortCopy(copyId: string, options: FileAbortCopyOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: copyId
          type: string
          description: >-
            The copy identifier provided in the x-ms-copy-id header of the
            original Copy File

            operation.
        - id: options
          type: <xref uid="@azure/storage-file.FileAbortCopyOptionalParams" />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'abortCopy(string, Models.FileAbortCopyOptionalParams)'
    uid: '@azure/storage-file.File.abortCopy'
    package: '@azure/storage-file'
    summary: >-
      Aborts a pending Copy File operation, and leaves a destination file with
      zero length and full

      metadata.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function abortCopy(copyId: string, options?:
        Models.FileAbortCopyOptionalParams)
      parameters:
        - id: copyId
          type: string
          description: >-
            The copy identifier provided in the x-ms-copy-id header of the
            original Copy File

            operation.
        - id: options
          type: <xref uid="Models.FileAbortCopyOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.FileAbortCopyResponse" />&gt;
        description: Promise<Models.FileAbortCopyResponse>
  - name: 'abortCopy(string, ServiceCallback<void>)'
    uid: '@azure/storage-file.File.abortCopy_1'
    package: '@azure/storage-file'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function abortCopy(copyId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: copyId
          type: string
          description: >-
            The copy identifier provided in the x-ms-copy-id header of the
            original Copy File

            operation.
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      create(number, string, string, string, FileCreateOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/storage-file.File.create_2'
    package: '@azure/storage-file'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function create(fileContentLength: number, fileAttributes: string,
        fileCreationTime: string, fileLastWriteTime: string, options:
        FileCreateOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: fileContentLength
          type: number
          description: 'Specifies the maximum size for the file, up to 1 TB.'
        - id: fileAttributes
          type: string
          description: >-
            If specified, the provided file attributes shall be set. Default
            value:

            ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be
            specified as default.
        - id: fileCreationTime
          type: string
          description: Creation time for the file/directory.
        - id: fileLastWriteTime
          type: string
          description: Last write time for the file/directory.
        - id: options
          type: <xref uid="@azure/storage-file.FileCreateOptionalParams" />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'create(number, string, string, string, Models.FileCreateOptionalParams)'
    uid: '@azure/storage-file.File.create'
    package: '@azure/storage-file'
    summary: >-
      Creates a new file or replaces a file. Note it only initializes the file
      with no content.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function create(fileContentLength: number, fileAttributes: string,
        fileCreationTime: string, fileLastWriteTime: string, options?:
        Models.FileCreateOptionalParams)
      parameters:
        - id: fileContentLength
          type: number
          description: 'Specifies the maximum size for the file, up to 1 TB.'
        - id: fileAttributes
          type: string
          description: >-
            If specified, the provided file attributes shall be set. Default
            value:

            ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be
            specified as default.
        - id: fileCreationTime
          type: string
          description: Creation time for the file/directory.
        - id: fileLastWriteTime
          type: string
          description: Last write time for the file/directory.
        - id: options
          type: <xref uid="Models.FileCreateOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.FileCreateResponse" />&gt;
        description: Promise<Models.FileCreateResponse>
  - name: 'create(number, string, string, string, ServiceCallback<void>)'
    uid: '@azure/storage-file.File.create_1'
    package: '@azure/storage-file'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function create(fileContentLength: number, fileAttributes: string,
        fileCreationTime: string, fileLastWriteTime: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: fileContentLength
          type: number
          description: 'Specifies the maximum size for the file, up to 1 TB.'
        - id: fileAttributes
          type: string
          description: >-
            If specified, the provided file attributes shall be set. Default
            value:

            ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be
            specified as default.
        - id: fileCreationTime
          type: string
          description: Creation time for the file/directory.
        - id: fileLastWriteTime
          type: string
          description: Last write time for the file/directory.
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'deleteMethod(FileDeleteMethodOptionalParams, ServiceCallback<void>)'
    uid: '@azure/storage-file.File.deleteMethod_2'
    package: '@azure/storage-file'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(options: FileDeleteMethodOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file.FileDeleteMethodOptionalParams" />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: deleteMethod(Models.FileDeleteMethodOptionalParams)
    uid: '@azure/storage-file.File.deleteMethod'
    package: '@azure/storage-file'
    summary: removes the file from the storage account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function deleteMethod(options?: Models.FileDeleteMethodOptionalParams)'
      parameters:
        - id: options
          type: <xref uid="Models.FileDeleteMethodOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.FileDeleteResponse" />&gt;
        description: Promise<Models.FileDeleteResponse>
  - name: deleteMethod(ServiceCallback<void>)
    uid: '@azure/storage-file.File.deleteMethod_1'
    package: '@azure/storage-file'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function deleteMethod(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'download(FileDownloadOptionalParams, ServiceCallback<void>)'
    uid: '@azure/storage-file.File.download_2'
    package: '@azure/storage-file'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function download(options: FileDownloadOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file.FileDownloadOptionalParams" />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: download(Models.FileDownloadOptionalParams)
    uid: '@azure/storage-file.File.download'
    package: '@azure/storage-file'
    summary: >-
      Reads or downloads a file from the system, including its metadata and
      properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function download(options?: Models.FileDownloadOptionalParams)'
      parameters:
        - id: options
          type: <xref uid="Models.FileDownloadOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.FileDownloadResponse" />&gt;
        description: Promise<Models.FileDownloadResponse>
  - name: download(ServiceCallback<void>)
    uid: '@azure/storage-file.File.download_1'
    package: '@azure/storage-file'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function download(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      forceCloseHandles(string, FileForceCloseHandlesOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/storage-file.File.forceCloseHandles_2'
    package: '@azure/storage-file'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function forceCloseHandles(handleId: string, options:
        FileForceCloseHandlesOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: handleId
          type: string
          description: >-
            Specifies handle ID opened on the file or directory to be closed.
            Asterix (‘*’)

            is a wildcard that specifies all handles.
        - id: options
          type: >-
            <xref uid="@azure/storage-file.FileForceCloseHandlesOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'forceCloseHandles(string, Models.FileForceCloseHandlesOptionalParams)'
    uid: '@azure/storage-file.File.forceCloseHandles'
    package: '@azure/storage-file'
    summary: Closes all handles open for given file
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function forceCloseHandles(handleId: string, options?:
        Models.FileForceCloseHandlesOptionalParams)
      parameters:
        - id: handleId
          type: string
          description: >-
            Specifies handle ID opened on the file or directory to be closed.
            Asterix (‘*’)

            is a wildcard that specifies all handles.
        - id: options
          type: <xref uid="Models.FileForceCloseHandlesOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.FileForceCloseHandlesResponse" />&gt;
        description: Promise<Models.FileForceCloseHandlesResponse>
  - name: 'forceCloseHandles(string, ServiceCallback<void>)'
    uid: '@azure/storage-file.File.forceCloseHandles_1'
    package: '@azure/storage-file'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function forceCloseHandles(handleId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: handleId
          type: string
          description: >-
            Specifies handle ID opened on the file or directory to be closed.
            Asterix (‘*’)

            is a wildcard that specifies all handles.
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'getProperties(FileGetPropertiesOptionalParams, ServiceCallback<void>)'
    uid: '@azure/storage-file.File.getProperties_2'
    package: '@azure/storage-file'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getProperties(options: FileGetPropertiesOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file.FileGetPropertiesOptionalParams" />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: getProperties(Models.FileGetPropertiesOptionalParams)
    uid: '@azure/storage-file.File.getProperties'
    package: '@azure/storage-file'
    summary: >-
      Returns all user-defined metadata, standard HTTP properties, and system
      properties for the file.

      It does not return the content of the file.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getProperties(options?: Models.FileGetPropertiesOptionalParams)'
      parameters:
        - id: options
          type: <xref uid="Models.FileGetPropertiesOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.FileGetPropertiesResponse" />&gt;
        description: Promise<Models.FileGetPropertiesResponse>
  - name: getProperties(ServiceCallback<void>)
    uid: '@azure/storage-file.File.getProperties_1'
    package: '@azure/storage-file'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getProperties(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'getRangeList(FileGetRangeListOptionalParams, ServiceCallback<Range[]>)'
    uid: '@azure/storage-file.File.getRangeList_2'
    package: '@azure/storage-file'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getRangeList(options: FileGetRangeListOptionalParams, callback:
        ServiceCallback<Range[]>)
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file.FileGetRangeListOptionalParams" />
          description: The optional parameters
        - id: callback
          type: 'ServiceCallback&lt;<xref uid="@azure/storage-file.Range" />[]&gt;'
          description: |
            The callback
  - name: getRangeList(Models.FileGetRangeListOptionalParams)
    uid: '@azure/storage-file.File.getRangeList'
    package: '@azure/storage-file'
    summary: Returns the list of valid ranges for a file.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getRangeList(options?: Models.FileGetRangeListOptionalParams)'
      parameters:
        - id: options
          type: <xref uid="Models.FileGetRangeListOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.FileGetRangeListResponse" />&gt;
        description: Promise<Models.FileGetRangeListResponse>
  - name: 'getRangeList(ServiceCallback<Range[]>)'
    uid: '@azure/storage-file.File.getRangeList_1'
    package: '@azure/storage-file'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getRangeList(callback: ServiceCallback<Range[]>)'
      parameters:
        - id: callback
          type: 'ServiceCallback&lt;<xref uid="@azure/storage-file.Range" />[]&gt;'
          description: |
            The callback
  - name: >-
      listHandles(FileListHandlesOptionalParams,
      ServiceCallback<ListHandlesResponse>)
    uid: '@azure/storage-file.File.listHandles_2'
    package: '@azure/storage-file'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listHandles(options: FileListHandlesOptionalParams, callback:
        ServiceCallback<ListHandlesResponse>)
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file.FileListHandlesOptionalParams" />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/storage-file.ListHandlesResponse" />&gt;
          description: |
            The callback
  - name: listHandles(Models.FileListHandlesOptionalParams)
    uid: '@azure/storage-file.File.listHandles'
    package: '@azure/storage-file'
    summary: Lists handles for file
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listHandles(options?: Models.FileListHandlesOptionalParams)'
      parameters:
        - id: options
          type: <xref uid="Models.FileListHandlesOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.FileListHandlesResponse" />&gt;
        description: Promise<Models.FileListHandlesResponse>
  - name: listHandles(ServiceCallback<ListHandlesResponse>)
    uid: '@azure/storage-file.File.listHandles_1'
    package: '@azure/storage-file'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listHandles(callback: ServiceCallback<ListHandlesResponse>)'
      parameters:
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/storage-file.ListHandlesResponse" />&gt;
          description: |
            The callback
  - name: >-
      setHTTPHeaders(string, string, string, FileSetHTTPHeadersOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/storage-file.File.setHTTPHeaders_2'
    package: '@azure/storage-file'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setHTTPHeaders(fileAttributes: string, fileCreationTime:
        string, fileLastWriteTime: string, options:
        FileSetHTTPHeadersOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: fileAttributes
          type: string
          description: >-
            If specified, the provided file attributes shall be set. Default
            value:

            ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be
            specified as default.
        - id: fileCreationTime
          type: string
          description: Creation time for the file/directory.
        - id: fileLastWriteTime
          type: string
          description: Last write time for the file/directory.
        - id: options
          type: <xref uid="@azure/storage-file.FileSetHTTPHeadersOptionalParams" />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      setHTTPHeaders(string, string, string,
      Models.FileSetHTTPHeadersOptionalParams)
    uid: '@azure/storage-file.File.setHTTPHeaders'
    package: '@azure/storage-file'
    summary: Sets HTTP headers on the file.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setHTTPHeaders(fileAttributes: string, fileCreationTime:
        string, fileLastWriteTime: string, options?:
        Models.FileSetHTTPHeadersOptionalParams)
      parameters:
        - id: fileAttributes
          type: string
          description: >-
            If specified, the provided file attributes shall be set. Default
            value:

            ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be
            specified as default.
        - id: fileCreationTime
          type: string
          description: Creation time for the file/directory.
        - id: fileLastWriteTime
          type: string
          description: Last write time for the file/directory.
        - id: options
          type: <xref uid="Models.FileSetHTTPHeadersOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.FileSetHTTPHeadersResponse" />&gt;
        description: Promise<Models.FileSetHTTPHeadersResponse>
  - name: 'setHTTPHeaders(string, string, string, ServiceCallback<void>)'
    uid: '@azure/storage-file.File.setHTTPHeaders_1'
    package: '@azure/storage-file'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setHTTPHeaders(fileAttributes: string, fileCreationTime:
        string, fileLastWriteTime: string, callback: ServiceCallback<void>)
      parameters:
        - id: fileAttributes
          type: string
          description: >-
            If specified, the provided file attributes shall be set. Default
            value:

            ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be
            specified as default.
        - id: fileCreationTime
          type: string
          description: Creation time for the file/directory.
        - id: fileLastWriteTime
          type: string
          description: Last write time for the file/directory.
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'setMetadata(FileSetMetadataOptionalParams, ServiceCallback<void>)'
    uid: '@azure/storage-file.File.setMetadata_2'
    package: '@azure/storage-file'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setMetadata(options: FileSetMetadataOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file.FileSetMetadataOptionalParams" />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: setMetadata(Models.FileSetMetadataOptionalParams)
    uid: '@azure/storage-file.File.setMetadata'
    package: '@azure/storage-file'
    summary: Updates user-defined metadata for the specified file.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setMetadata(options?: Models.FileSetMetadataOptionalParams)'
      parameters:
        - id: options
          type: <xref uid="Models.FileSetMetadataOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.FileSetMetadataResponse" />&gt;
        description: Promise<Models.FileSetMetadataResponse>
  - name: setMetadata(ServiceCallback<void>)
    uid: '@azure/storage-file.File.setMetadata_1'
    package: '@azure/storage-file'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setMetadata(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'startCopy(string, FileStartCopyOptionalParams, ServiceCallback<void>)'
    uid: '@azure/storage-file.File.startCopy_2'
    package: '@azure/storage-file'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function startCopy(copySource: string, options:
        FileStartCopyOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: copySource
          type: string
          description: >-
            Specifies the URL of the source file or blob, up to 2 KB in length.
            To copy a

            file to another file within the same storage account, you may use
            Shared Key to authenticate the

            source file. If you are copying a file from another storage account,
            or if you are copying a

            blob from the same storage account or another storage account, then
            you must authenticate the

            source file or blob using a shared access signature. If the source
            is a public blob, no

            authentication is required to perform the copy operation. A file in
            a share snapshot can also be

            specified as a copy source.
        - id: options
          type: <xref uid="@azure/storage-file.FileStartCopyOptionalParams" />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'startCopy(string, Models.FileStartCopyOptionalParams)'
    uid: '@azure/storage-file.File.startCopy'
    package: '@azure/storage-file'
    summary: Copies a blob or file to a destination file within the storage account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function startCopy(copySource: string, options?:
        Models.FileStartCopyOptionalParams)
      parameters:
        - id: copySource
          type: string
          description: >-
            Specifies the URL of the source file or blob, up to 2 KB in length.
            To copy a

            file to another file within the same storage account, you may use
            Shared Key to authenticate the

            source file. If you are copying a file from another storage account,
            or if you are copying a

            blob from the same storage account or another storage account, then
            you must authenticate the

            source file or blob using a shared access signature. If the source
            is a public blob, no

            authentication is required to perform the copy operation. A file in
            a share snapshot can also be

            specified as a copy source.
        - id: options
          type: <xref uid="Models.FileStartCopyOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.FileStartCopyResponse" />&gt;
        description: Promise<Models.FileStartCopyResponse>
  - name: 'startCopy(string, ServiceCallback<void>)'
    uid: '@azure/storage-file.File.startCopy_1'
    package: '@azure/storage-file'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function startCopy(copySource: string, callback: ServiceCallback<void>)'
      parameters:
        - id: copySource
          type: string
          description: >-
            Specifies the URL of the source file or blob, up to 2 KB in length.
            To copy a

            file to another file within the same storage account, you may use
            Shared Key to authenticate the

            source file. If you are copying a file from another storage account,
            or if you are copying a

            blob from the same storage account or another storage account, then
            you must authenticate the

            source file or blob using a shared access signature. If the source
            is a public blob, no

            authentication is required to perform the copy operation. A file in
            a share snapshot can also be

            specified as a copy source.
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      uploadRange(string, Models.FileRangeWriteType, number,
      FileUploadRangeOptionalParams, ServiceCallback<void>)
    uid: '@azure/storage-file.File.uploadRange_2'
    package: '@azure/storage-file'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function uploadRange(range: string, fileRangeWrite:
        Models.FileRangeWriteType, contentLength: number, options:
        FileUploadRangeOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: range
          type: string
          description: >-
            Specifies the range of bytes to be written. Both the start and end
            of the range

            must be specified. For an update operation, the range can be up to 4
            MB in size. For a clear

            operation, the range can be up to the value of the file's full size.
            The File service accepts

            only a single byte range for the Range and 'x-ms-range' headers, and
            the byte range must be

            specified in the following format: bytes=startByte-endByte.
        - id: fileRangeWrite
          type: <xref uid="Models.FileRangeWriteType" />
          description: >-
            Specify one of the following options: - Update: Writes the bytes
            specified

            by the request body into the specified range. The Range and
            Content-Length headers must match to

            perform the update. - Clear: Clears the specified range and releases
            the space used in storage

            for that range. To clear a range, set the Content-Length header to
            zero, and set the Range

            header to a value that indicates the range to clear, up to maximum
            file size. Possible values

            include: 'update', 'clear'
        - id: contentLength
          type: number
          description: >-
            Specifies the number of bytes being transmitted in the request body.
            When

            the x-ms-write header is set to clear, the value of this header must
            be set to zero.
        - id: options
          type: <xref uid="@azure/storage-file.FileUploadRangeOptionalParams" />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      uploadRange(string, Models.FileRangeWriteType, number,
      Models.FileUploadRangeOptionalParams)
    uid: '@azure/storage-file.File.uploadRange'
    package: '@azure/storage-file'
    summary: Upload a range of bytes to a file.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function uploadRange(range: string, fileRangeWrite:
        Models.FileRangeWriteType, contentLength: number, options?:
        Models.FileUploadRangeOptionalParams)
      parameters:
        - id: range
          type: string
          description: >-
            Specifies the range of bytes to be written. Both the start and end
            of the range

            must be specified. For an update operation, the range can be up to 4
            MB in size. For a clear

            operation, the range can be up to the value of the file's full size.
            The File service accepts

            only a single byte range for the Range and 'x-ms-range' headers, and
            the byte range must be

            specified in the following format: bytes=startByte-endByte.
        - id: fileRangeWrite
          type: <xref uid="Models.FileRangeWriteType" />
          description: >-
            Specify one of the following options: - Update: Writes the bytes
            specified

            by the request body into the specified range. The Range and
            Content-Length headers must match to

            perform the update. - Clear: Clears the specified range and releases
            the space used in storage

            for that range. To clear a range, set the Content-Length header to
            zero, and set the Range

            header to a value that indicates the range to clear, up to maximum
            file size. Possible values

            include: 'update', 'clear'
        - id: contentLength
          type: number
          description: >-
            Specifies the number of bytes being transmitted in the request body.
            When

            the x-ms-write header is set to clear, the value of this header must
            be set to zero.
        - id: options
          type: <xref uid="Models.FileUploadRangeOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.FileUploadRangeResponse" />&gt;
        description: Promise<Models.FileUploadRangeResponse>
  - name: >-
      uploadRange(string, Models.FileRangeWriteType, number,
      ServiceCallback<void>)
    uid: '@azure/storage-file.File.uploadRange_1'
    package: '@azure/storage-file'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function uploadRange(range: string, fileRangeWrite:
        Models.FileRangeWriteType, contentLength: number, callback:
        ServiceCallback<void>)
      parameters:
        - id: range
          type: string
          description: >-
            Specifies the range of bytes to be written. Both the start and end
            of the range

            must be specified. For an update operation, the range can be up to 4
            MB in size. For a clear

            operation, the range can be up to the value of the file's full size.
            The File service accepts

            only a single byte range for the Range and 'x-ms-range' headers, and
            the byte range must be

            specified in the following format: bytes=startByte-endByte.
        - id: fileRangeWrite
          type: <xref uid="Models.FileRangeWriteType" />
          description: >-
            Specify one of the following options: - Update: Writes the bytes
            specified

            by the request body into the specified range. The Range and
            Content-Length headers must match to

            perform the update. - Clear: Clears the specified range and releases
            the space used in storage

            for that range. To clear a range, set the Content-Length header to
            zero, and set the Range

            header to a value that indicates the range to clear, up to maximum
            file size. Possible values

            include: 'update', 'clear'
        - id: contentLength
          type: number
          description: >-
            Specifies the number of bytes being transmitted in the request body.
            When

            the x-ms-write header is set to clear, the value of this header must
            be set to zero.
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      uploadRangeFromURL(string, string, string, number,
      FileUploadRangeFromURLOptionalParams, ServiceCallback<void>)
    uid: '@azure/storage-file.File.uploadRangeFromURL_2'
    package: '@azure/storage-file'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function uploadRangeFromURL(range: string, copySource: string,
        sourceRange: string, contentLength: number, options:
        FileUploadRangeFromURLOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: range
          type: string
          description: Writes data to the specified byte range in the file.
        - id: copySource
          type: string
          description: >-
            Specifies the URL of the source file or blob, up to 2 KB in length.
            To copy a

            file to another file within the same storage account, you may use
            Shared Key to authenticate the

            source file. If you are copying a file from another storage account,
            or if you are copying a

            blob from the same storage account or another storage account, then
            you must authenticate the

            source file or blob using a shared access signature. If the source
            is a public blob, no

            authentication is required to perform the copy operation. A file in
            a share snapshot can also be

            specified as a copy source.
        - id: sourceRange
          type: string
          description: Bytes of source data in the specified range.
        - id: contentLength
          type: number
          description: >-
            Specifies the number of bytes being transmitted in the request body.
            When

            the x-ms-write header is set to clear, the value of this header must
            be set to zero.
        - id: options
          type: >-
            <xref uid="@azure/storage-file.FileUploadRangeFromURLOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      uploadRangeFromURL(string, string, string, number,
      Models.FileUploadRangeFromURLOptionalParams)
    uid: '@azure/storage-file.File.uploadRangeFromURL'
    package: '@azure/storage-file'
    summary: Upload a range of bytes to a file where the contents are read from a URL.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function uploadRangeFromURL(range: string, copySource: string,
        sourceRange: string, contentLength: number, options?:
        Models.FileUploadRangeFromURLOptionalParams)
      parameters:
        - id: range
          type: string
          description: Writes data to the specified byte range in the file.
        - id: copySource
          type: string
          description: >-
            Specifies the URL of the source file or blob, up to 2 KB in length.
            To copy a

            file to another file within the same storage account, you may use
            Shared Key to authenticate the

            source file. If you are copying a file from another storage account,
            or if you are copying a

            blob from the same storage account or another storage account, then
            you must authenticate the

            source file or blob using a shared access signature. If the source
            is a public blob, no

            authentication is required to perform the copy operation. A file in
            a share snapshot can also be

            specified as a copy source.
        - id: sourceRange
          type: string
          description: Bytes of source data in the specified range.
        - id: contentLength
          type: number
          description: >-
            Specifies the number of bytes being transmitted in the request body.
            When

            the x-ms-write header is set to clear, the value of this header must
            be set to zero.
        - id: options
          type: <xref uid="Models.FileUploadRangeFromURLOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.FileUploadRangeFromURLResponse" />&gt;
        description: Promise<Models.FileUploadRangeFromURLResponse>
  - name: 'uploadRangeFromURL(string, string, string, number, ServiceCallback<void>)'
    uid: '@azure/storage-file.File.uploadRangeFromURL_1'
    package: '@azure/storage-file'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function uploadRangeFromURL(range: string, copySource: string,
        sourceRange: string, contentLength: number, callback:
        ServiceCallback<void>)
      parameters:
        - id: range
          type: string
          description: Writes data to the specified byte range in the file.
        - id: copySource
          type: string
          description: >-
            Specifies the URL of the source file or blob, up to 2 KB in length.
            To copy a

            file to another file within the same storage account, you may use
            Shared Key to authenticate the

            source file. If you are copying a file from another storage account,
            or if you are copying a

            blob from the same storage account or another storage account, then
            you must authenticate the

            source file or blob using a shared access signature. If the source
            is a public blob, no

            authentication is required to perform the copy operation. A file in
            a share snapshot can also be

            specified as a copy source.
        - id: sourceRange
          type: string
          description: Bytes of source data in the specified range.
        - id: contentLength
          type: number
          description: >-
            Specifies the number of bytes being transmitted in the request body.
            When

            the x-ms-write header is set to clear, the value of this header must
            be set to zero.
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
